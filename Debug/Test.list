
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d320  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00022030  0800d508  0800d508  0001d508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f538  0802f538  000400c8  2**0
                  CONTENTS
  4 .ARM          00000008  0802f538  0802f538  0003f538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f540  0802f540  000400c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0802f540  0802f540  0003f540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802f550  0802f550  0003f550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0802f554  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dd6c  200000c8  0802f61c  000400c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000de34  0802f61c  0004de34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020bb2  00000000  00000000  000400f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005718  00000000  00000000  00060ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  000663c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001698  00000000  00000000  00067c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bf8  00000000  00000000  00069310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a9c  00000000  00000000  00089f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009046f  00000000  00000000  000aa9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ae13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006be4  00000000  00000000  0013ae64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000c8 	.word	0x200000c8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d4f0 	.word	0x0800d4f0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000cc 	.word	0x200000cc
 8000224:	0800d4f0 	.word	0x0800d4f0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_d2f>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b7c:	bf24      	itt	cs
 8000b7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b86:	d90d      	bls.n	8000ba4 <__aeabi_d2f+0x30>
 8000b88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b9c:	bf08      	it	eq
 8000b9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ba2:	4770      	bx	lr
 8000ba4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba8:	d121      	bne.n	8000bee <__aeabi_d2f+0x7a>
 8000baa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bae:	bfbc      	itt	lt
 8000bb0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	4770      	bxlt	lr
 8000bb6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bbe:	f1c2 0218 	rsb	r2, r2, #24
 8000bc2:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bca:	fa20 f002 	lsr.w	r0, r0, r2
 8000bce:	bf18      	it	ne
 8000bd0:	f040 0001 	orrne.w	r0, r0, #1
 8000bd4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bdc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be0:	ea40 000c 	orr.w	r0, r0, ip
 8000be4:	fa23 f302 	lsr.w	r3, r3, r2
 8000be8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bec:	e7cc      	b.n	8000b88 <__aeabi_d2f+0x14>
 8000bee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf2:	d107      	bne.n	8000c04 <__aeabi_d2f+0x90>
 8000bf4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf8:	bf1e      	ittt	ne
 8000bfa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c02:	4770      	bxne	lr
 8000c04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <__aeabi_frsub>:
 8000c14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c18:	e002      	b.n	8000c20 <__addsf3>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_fsub>:
 8000c1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c20 <__addsf3>:
 8000c20:	0042      	lsls	r2, r0, #1
 8000c22:	bf1f      	itttt	ne
 8000c24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c28:	ea92 0f03 	teqne	r2, r3
 8000c2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c34:	d06a      	beq.n	8000d0c <__addsf3+0xec>
 8000c36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c3e:	bfc1      	itttt	gt
 8000c40:	18d2      	addgt	r2, r2, r3
 8000c42:	4041      	eorgt	r1, r0
 8000c44:	4048      	eorgt	r0, r1
 8000c46:	4041      	eorgt	r1, r0
 8000c48:	bfb8      	it	lt
 8000c4a:	425b      	neglt	r3, r3
 8000c4c:	2b19      	cmp	r3, #25
 8000c4e:	bf88      	it	hi
 8000c50:	4770      	bxhi	lr
 8000c52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c5e:	bf18      	it	ne
 8000c60:	4240      	negne	r0, r0
 8000c62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c6e:	bf18      	it	ne
 8000c70:	4249      	negne	r1, r1
 8000c72:	ea92 0f03 	teq	r2, r3
 8000c76:	d03f      	beq.n	8000cf8 <__addsf3+0xd8>
 8000c78:	f1a2 0201 	sub.w	r2, r2, #1
 8000c7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c80:	eb10 000c 	adds.w	r0, r0, ip
 8000c84:	f1c3 0320 	rsb	r3, r3, #32
 8000c88:	fa01 f103 	lsl.w	r1, r1, r3
 8000c8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	d502      	bpl.n	8000c98 <__addsf3+0x78>
 8000c92:	4249      	negs	r1, r1
 8000c94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c9c:	d313      	bcc.n	8000cc6 <__addsf3+0xa6>
 8000c9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ca2:	d306      	bcc.n	8000cb2 <__addsf3+0x92>
 8000ca4:	0840      	lsrs	r0, r0, #1
 8000ca6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000caa:	f102 0201 	add.w	r2, r2, #1
 8000cae:	2afe      	cmp	r2, #254	; 0xfe
 8000cb0:	d251      	bcs.n	8000d56 <__addsf3+0x136>
 8000cb2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cba:	bf08      	it	eq
 8000cbc:	f020 0001 	biceq.w	r0, r0, #1
 8000cc0:	ea40 0003 	orr.w	r0, r0, r3
 8000cc4:	4770      	bx	lr
 8000cc6:	0049      	lsls	r1, r1, #1
 8000cc8:	eb40 0000 	adc.w	r0, r0, r0
 8000ccc:	3a01      	subs	r2, #1
 8000cce:	bf28      	it	cs
 8000cd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cd4:	d2ed      	bcs.n	8000cb2 <__addsf3+0x92>
 8000cd6:	fab0 fc80 	clz	ip, r0
 8000cda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cde:	ebb2 020c 	subs.w	r2, r2, ip
 8000ce2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ce6:	bfaa      	itet	ge
 8000ce8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cec:	4252      	neglt	r2, r2
 8000cee:	4318      	orrge	r0, r3
 8000cf0:	bfbc      	itt	lt
 8000cf2:	40d0      	lsrlt	r0, r2
 8000cf4:	4318      	orrlt	r0, r3
 8000cf6:	4770      	bx	lr
 8000cf8:	f092 0f00 	teq	r2, #0
 8000cfc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d00:	bf06      	itte	eq
 8000d02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d06:	3201      	addeq	r2, #1
 8000d08:	3b01      	subne	r3, #1
 8000d0a:	e7b5      	b.n	8000c78 <__addsf3+0x58>
 8000d0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d14:	bf18      	it	ne
 8000d16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d1a:	d021      	beq.n	8000d60 <__addsf3+0x140>
 8000d1c:	ea92 0f03 	teq	r2, r3
 8000d20:	d004      	beq.n	8000d2c <__addsf3+0x10c>
 8000d22:	f092 0f00 	teq	r2, #0
 8000d26:	bf08      	it	eq
 8000d28:	4608      	moveq	r0, r1
 8000d2a:	4770      	bx	lr
 8000d2c:	ea90 0f01 	teq	r0, r1
 8000d30:	bf1c      	itt	ne
 8000d32:	2000      	movne	r0, #0
 8000d34:	4770      	bxne	lr
 8000d36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d3a:	d104      	bne.n	8000d46 <__addsf3+0x126>
 8000d3c:	0040      	lsls	r0, r0, #1
 8000d3e:	bf28      	it	cs
 8000d40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d44:	4770      	bx	lr
 8000d46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d4a:	bf3c      	itt	cc
 8000d4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d50:	4770      	bxcc	lr
 8000d52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d5e:	4770      	bx	lr
 8000d60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d64:	bf16      	itet	ne
 8000d66:	4608      	movne	r0, r1
 8000d68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d6c:	4601      	movne	r1, r0
 8000d6e:	0242      	lsls	r2, r0, #9
 8000d70:	bf06      	itte	eq
 8000d72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d76:	ea90 0f01 	teqeq	r0, r1
 8000d7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_ui2f>:
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e004      	b.n	8000d90 <__aeabi_i2f+0x8>
 8000d86:	bf00      	nop

08000d88 <__aeabi_i2f>:
 8000d88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d8c:	bf48      	it	mi
 8000d8e:	4240      	negmi	r0, r0
 8000d90:	ea5f 0c00 	movs.w	ip, r0
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d9c:	4601      	mov	r1, r0
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	e01c      	b.n	8000dde <__aeabi_l2f+0x2a>

08000da4 <__aeabi_ul2f>:
 8000da4:	ea50 0201 	orrs.w	r2, r0, r1
 8000da8:	bf08      	it	eq
 8000daa:	4770      	bxeq	lr
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e00a      	b.n	8000dc8 <__aeabi_l2f+0x14>
 8000db2:	bf00      	nop

08000db4 <__aeabi_l2f>:
 8000db4:	ea50 0201 	orrs.w	r2, r0, r1
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dc0:	d502      	bpl.n	8000dc8 <__aeabi_l2f+0x14>
 8000dc2:	4240      	negs	r0, r0
 8000dc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc8:	ea5f 0c01 	movs.w	ip, r1
 8000dcc:	bf02      	ittt	eq
 8000dce:	4684      	moveq	ip, r0
 8000dd0:	4601      	moveq	r1, r0
 8000dd2:	2000      	moveq	r0, #0
 8000dd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dd8:	bf08      	it	eq
 8000dda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000de2:	fabc f28c 	clz	r2, ip
 8000de6:	3a08      	subs	r2, #8
 8000de8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dec:	db10      	blt.n	8000e10 <__aeabi_l2f+0x5c>
 8000dee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df2:	4463      	add	r3, ip
 8000df4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e00:	fa20 f202 	lsr.w	r2, r0, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	f020 0001 	biceq.w	r0, r0, #1
 8000e0e:	4770      	bx	lr
 8000e10:	f102 0220 	add.w	r2, r2, #32
 8000e14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e18:	f1c2 0220 	rsb	r2, r2, #32
 8000e1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e20:	fa21 f202 	lsr.w	r2, r1, r2
 8000e24:	eb43 0002 	adc.w	r0, r3, r2
 8000e28:	bf08      	it	eq
 8000e2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e2e:	4770      	bx	lr

08000e30 <__aeabi_fmul>:
 8000e30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e38:	bf1e      	ittt	ne
 8000e3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3e:	ea92 0f0c 	teqne	r2, ip
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d06f      	beq.n	8000f28 <__aeabi_fmul+0xf8>
 8000e48:	441a      	add	r2, r3
 8000e4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000e4e:	0240      	lsls	r0, r0, #9
 8000e50:	bf18      	it	ne
 8000e52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e56:	d01e      	beq.n	8000e96 <__aeabi_fmul+0x66>
 8000e58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e64:	fba0 3101 	umull	r3, r1, r0, r1
 8000e68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e6c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e70:	bf3e      	ittt	cc
 8000e72:	0049      	lslcc	r1, r1, #1
 8000e74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	ea40 0001 	orr.w	r0, r0, r1
 8000e7e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e82:	2afd      	cmp	r2, #253	; 0xfd
 8000e84:	d81d      	bhi.n	8000ec2 <__aeabi_fmul+0x92>
 8000e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e8e:	bf08      	it	eq
 8000e90:	f020 0001 	biceq.w	r0, r0, #1
 8000e94:	4770      	bx	lr
 8000e96:	f090 0f00 	teq	r0, #0
 8000e9a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e9e:	bf08      	it	eq
 8000ea0:	0249      	lsleq	r1, r1, #9
 8000ea2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ea6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000eaa:	3a7f      	subs	r2, #127	; 0x7f
 8000eac:	bfc2      	ittt	gt
 8000eae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb6:	4770      	bxgt	lr
 8000eb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	3a01      	subs	r2, #1
 8000ec2:	dc5d      	bgt.n	8000f80 <__aeabi_fmul+0x150>
 8000ec4:	f112 0f19 	cmn.w	r2, #25
 8000ec8:	bfdc      	itt	le
 8000eca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ece:	4770      	bxle	lr
 8000ed0:	f1c2 0200 	rsb	r2, r2, #0
 8000ed4:	0041      	lsls	r1, r0, #1
 8000ed6:	fa21 f102 	lsr.w	r1, r1, r2
 8000eda:	f1c2 0220 	rsb	r2, r2, #32
 8000ede:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ee2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ee6:	f140 0000 	adc.w	r0, r0, #0
 8000eea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eee:	bf08      	it	eq
 8000ef0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ef4:	4770      	bx	lr
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fmul+0xce>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fmul+0xe6>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e78f      	b.n	8000e48 <__aeabi_fmul+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	bf18      	it	ne
 8000f32:	ea93 0f0c 	teqne	r3, ip
 8000f36:	d00a      	beq.n	8000f4e <__aeabi_fmul+0x11e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1d8      	bne.n	8000ef6 <__aeabi_fmul+0xc6>
 8000f44:	ea80 0001 	eor.w	r0, r0, r1
 8000f48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f4c:	4770      	bx	lr
 8000f4e:	f090 0f00 	teq	r0, #0
 8000f52:	bf17      	itett	ne
 8000f54:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f58:	4608      	moveq	r0, r1
 8000f5a:	f091 0f00 	teqne	r1, #0
 8000f5e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f62:	d014      	beq.n	8000f8e <__aeabi_fmul+0x15e>
 8000f64:	ea92 0f0c 	teq	r2, ip
 8000f68:	d101      	bne.n	8000f6e <__aeabi_fmul+0x13e>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d10f      	bne.n	8000f8e <__aeabi_fmul+0x15e>
 8000f6e:	ea93 0f0c 	teq	r3, ip
 8000f72:	d103      	bne.n	8000f7c <__aeabi_fmul+0x14c>
 8000f74:	024b      	lsls	r3, r1, #9
 8000f76:	bf18      	it	ne
 8000f78:	4608      	movne	r0, r1
 8000f7a:	d108      	bne.n	8000f8e <__aeabi_fmul+0x15e>
 8000f7c:	ea80 0001 	eor.w	r0, r0, r1
 8000f80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8c:	4770      	bx	lr
 8000f8e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f92:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f96:	4770      	bx	lr

08000f98 <__aeabi_fdiv>:
 8000f98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fa0:	bf1e      	ittt	ne
 8000fa2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fa6:	ea92 0f0c 	teqne	r2, ip
 8000faa:	ea93 0f0c 	teqne	r3, ip
 8000fae:	d069      	beq.n	8001084 <__aeabi_fdiv+0xec>
 8000fb0:	eba2 0203 	sub.w	r2, r2, r3
 8000fb4:	ea80 0c01 	eor.w	ip, r0, r1
 8000fb8:	0249      	lsls	r1, r1, #9
 8000fba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fbe:	d037      	beq.n	8001030 <__aeabi_fdiv+0x98>
 8000fc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fc4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fc8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fd0:	428b      	cmp	r3, r1
 8000fd2:	bf38      	it	cc
 8000fd4:	005b      	lslcc	r3, r3, #1
 8000fd6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fda:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fde:	428b      	cmp	r3, r1
 8000fe0:	bf24      	itt	cs
 8000fe2:	1a5b      	subcs	r3, r3, r1
 8000fe4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fe8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ff2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ff6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ffa:	bf24      	itt	cs
 8000ffc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001000:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001004:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001008:	bf24      	itt	cs
 800100a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800100e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	bf18      	it	ne
 8001016:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800101a:	d1e0      	bne.n	8000fde <__aeabi_fdiv+0x46>
 800101c:	2afd      	cmp	r2, #253	; 0xfd
 800101e:	f63f af50 	bhi.w	8000ec2 <__aeabi_fmul+0x92>
 8001022:	428b      	cmp	r3, r1
 8001024:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001028:	bf08      	it	eq
 800102a:	f020 0001 	biceq.w	r0, r0, #1
 800102e:	4770      	bx	lr
 8001030:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001034:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001038:	327f      	adds	r2, #127	; 0x7f
 800103a:	bfc2      	ittt	gt
 800103c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001040:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001044:	4770      	bxgt	lr
 8001046:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800104a:	f04f 0300 	mov.w	r3, #0
 800104e:	3a01      	subs	r2, #1
 8001050:	e737      	b.n	8000ec2 <__aeabi_fmul+0x92>
 8001052:	f092 0f00 	teq	r2, #0
 8001056:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800105a:	bf02      	ittt	eq
 800105c:	0040      	lsleq	r0, r0, #1
 800105e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001062:	3a01      	subeq	r2, #1
 8001064:	d0f9      	beq.n	800105a <__aeabi_fdiv+0xc2>
 8001066:	ea40 000c 	orr.w	r0, r0, ip
 800106a:	f093 0f00 	teq	r3, #0
 800106e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001072:	bf02      	ittt	eq
 8001074:	0049      	lsleq	r1, r1, #1
 8001076:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800107a:	3b01      	subeq	r3, #1
 800107c:	d0f9      	beq.n	8001072 <__aeabi_fdiv+0xda>
 800107e:	ea41 010c 	orr.w	r1, r1, ip
 8001082:	e795      	b.n	8000fb0 <__aeabi_fdiv+0x18>
 8001084:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001088:	ea92 0f0c 	teq	r2, ip
 800108c:	d108      	bne.n	80010a0 <__aeabi_fdiv+0x108>
 800108e:	0242      	lsls	r2, r0, #9
 8001090:	f47f af7d 	bne.w	8000f8e <__aeabi_fmul+0x15e>
 8001094:	ea93 0f0c 	teq	r3, ip
 8001098:	f47f af70 	bne.w	8000f7c <__aeabi_fmul+0x14c>
 800109c:	4608      	mov	r0, r1
 800109e:	e776      	b.n	8000f8e <__aeabi_fmul+0x15e>
 80010a0:	ea93 0f0c 	teq	r3, ip
 80010a4:	d104      	bne.n	80010b0 <__aeabi_fdiv+0x118>
 80010a6:	024b      	lsls	r3, r1, #9
 80010a8:	f43f af4c 	beq.w	8000f44 <__aeabi_fmul+0x114>
 80010ac:	4608      	mov	r0, r1
 80010ae:	e76e      	b.n	8000f8e <__aeabi_fmul+0x15e>
 80010b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010b4:	bf18      	it	ne
 80010b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010ba:	d1ca      	bne.n	8001052 <__aeabi_fdiv+0xba>
 80010bc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010c0:	f47f af5c 	bne.w	8000f7c <__aeabi_fmul+0x14c>
 80010c4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010c8:	f47f af3c 	bne.w	8000f44 <__aeabi_fmul+0x114>
 80010cc:	e75f      	b.n	8000f8e <__aeabi_fmul+0x15e>
 80010ce:	bf00      	nop

080010d0 <__gesf2>:
 80010d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80010d4:	e006      	b.n	80010e4 <__cmpsf2+0x4>
 80010d6:	bf00      	nop

080010d8 <__lesf2>:
 80010d8:	f04f 0c01 	mov.w	ip, #1
 80010dc:	e002      	b.n	80010e4 <__cmpsf2+0x4>
 80010de:	bf00      	nop

080010e0 <__cmpsf2>:
 80010e0:	f04f 0c01 	mov.w	ip, #1
 80010e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f4:	bf18      	it	ne
 80010f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010fa:	d011      	beq.n	8001120 <__cmpsf2+0x40>
 80010fc:	b001      	add	sp, #4
 80010fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001102:	bf18      	it	ne
 8001104:	ea90 0f01 	teqne	r0, r1
 8001108:	bf58      	it	pl
 800110a:	ebb2 0003 	subspl.w	r0, r2, r3
 800110e:	bf88      	it	hi
 8001110:	17c8      	asrhi	r0, r1, #31
 8001112:	bf38      	it	cc
 8001114:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001118:	bf18      	it	ne
 800111a:	f040 0001 	orrne.w	r0, r0, #1
 800111e:	4770      	bx	lr
 8001120:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001124:	d102      	bne.n	800112c <__cmpsf2+0x4c>
 8001126:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800112a:	d105      	bne.n	8001138 <__cmpsf2+0x58>
 800112c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001130:	d1e4      	bne.n	80010fc <__cmpsf2+0x1c>
 8001132:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001136:	d0e1      	beq.n	80010fc <__cmpsf2+0x1c>
 8001138:	f85d 0b04 	ldr.w	r0, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <__aeabi_cfrcmple>:
 8001140:	4684      	mov	ip, r0
 8001142:	4608      	mov	r0, r1
 8001144:	4661      	mov	r1, ip
 8001146:	e7ff      	b.n	8001148 <__aeabi_cfcmpeq>

08001148 <__aeabi_cfcmpeq>:
 8001148:	b50f      	push	{r0, r1, r2, r3, lr}
 800114a:	f7ff ffc9 	bl	80010e0 <__cmpsf2>
 800114e:	2800      	cmp	r0, #0
 8001150:	bf48      	it	mi
 8001152:	f110 0f00 	cmnmi.w	r0, #0
 8001156:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001158 <__aeabi_fcmpeq>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff fff4 	bl	8001148 <__aeabi_cfcmpeq>
 8001160:	bf0c      	ite	eq
 8001162:	2001      	moveq	r0, #1
 8001164:	2000      	movne	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_fcmplt>:
 800116c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001170:	f7ff ffea 	bl	8001148 <__aeabi_cfcmpeq>
 8001174:	bf34      	ite	cc
 8001176:	2001      	movcc	r0, #1
 8001178:	2000      	movcs	r0, #0
 800117a:	f85d fb08 	ldr.w	pc, [sp], #8
 800117e:	bf00      	nop

08001180 <__aeabi_fcmple>:
 8001180:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001184:	f7ff ffe0 	bl	8001148 <__aeabi_cfcmpeq>
 8001188:	bf94      	ite	ls
 800118a:	2001      	movls	r0, #1
 800118c:	2000      	movhi	r0, #0
 800118e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001192:	bf00      	nop

08001194 <__aeabi_fcmpge>:
 8001194:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001198:	f7ff ffd2 	bl	8001140 <__aeabi_cfrcmple>
 800119c:	bf94      	ite	ls
 800119e:	2001      	movls	r0, #1
 80011a0:	2000      	movhi	r0, #0
 80011a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a6:	bf00      	nop

080011a8 <__aeabi_fcmpgt>:
 80011a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011ac:	f7ff ffc8 	bl	8001140 <__aeabi_cfrcmple>
 80011b0:	bf34      	ite	cc
 80011b2:	2001      	movcc	r0, #1
 80011b4:	2000      	movcs	r0, #0
 80011b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ba:	bf00      	nop

080011bc <__aeabi_fcmpun>:
 80011bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011c8:	d102      	bne.n	80011d0 <__aeabi_fcmpun+0x14>
 80011ca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011ce:	d108      	bne.n	80011e2 <__aeabi_fcmpun+0x26>
 80011d0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011d4:	d102      	bne.n	80011dc <__aeabi_fcmpun+0x20>
 80011d6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011da:	d102      	bne.n	80011e2 <__aeabi_fcmpun+0x26>
 80011dc:	f04f 0000 	mov.w	r0, #0
 80011e0:	4770      	bx	lr
 80011e2:	f04f 0001 	mov.w	r0, #1
 80011e6:	4770      	bx	lr

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <__aeabi_uldivmod>:
 8001274:	b953      	cbnz	r3, 800128c <__aeabi_uldivmod+0x18>
 8001276:	b94a      	cbnz	r2, 800128c <__aeabi_uldivmod+0x18>
 8001278:	2900      	cmp	r1, #0
 800127a:	bf08      	it	eq
 800127c:	2800      	cmpeq	r0, #0
 800127e:	bf1c      	itt	ne
 8001280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001288:	f000 b976 	b.w	8001578 <__aeabi_idiv0>
 800128c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001294:	f000 f806 	bl	80012a4 <__udivmoddi4>
 8001298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800129c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012a0:	b004      	add	sp, #16
 80012a2:	4770      	bx	lr

080012a4 <__udivmoddi4>:
 80012a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012a8:	9e08      	ldr	r6, [sp, #32]
 80012aa:	460d      	mov	r5, r1
 80012ac:	4604      	mov	r4, r0
 80012ae:	4688      	mov	r8, r1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d14d      	bne.n	8001350 <__udivmoddi4+0xac>
 80012b4:	428a      	cmp	r2, r1
 80012b6:	4694      	mov	ip, r2
 80012b8:	d968      	bls.n	800138c <__udivmoddi4+0xe8>
 80012ba:	fab2 f282 	clz	r2, r2
 80012be:	b152      	cbz	r2, 80012d6 <__udivmoddi4+0x32>
 80012c0:	fa01 f302 	lsl.w	r3, r1, r2
 80012c4:	f1c2 0120 	rsb	r1, r2, #32
 80012c8:	fa20 f101 	lsr.w	r1, r0, r1
 80012cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80012d0:	ea41 0803 	orr.w	r8, r1, r3
 80012d4:	4094      	lsls	r4, r2
 80012d6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80012da:	fbb8 f7f1 	udiv	r7, r8, r1
 80012de:	fa1f fe8c 	uxth.w	lr, ip
 80012e2:	fb01 8817 	mls	r8, r1, r7, r8
 80012e6:	fb07 f00e 	mul.w	r0, r7, lr
 80012ea:	0c23      	lsrs	r3, r4, #16
 80012ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80012f0:	4298      	cmp	r0, r3
 80012f2:	d90a      	bls.n	800130a <__udivmoddi4+0x66>
 80012f4:	eb1c 0303 	adds.w	r3, ip, r3
 80012f8:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80012fc:	f080 811e 	bcs.w	800153c <__udivmoddi4+0x298>
 8001300:	4298      	cmp	r0, r3
 8001302:	f240 811b 	bls.w	800153c <__udivmoddi4+0x298>
 8001306:	3f02      	subs	r7, #2
 8001308:	4463      	add	r3, ip
 800130a:	1a1b      	subs	r3, r3, r0
 800130c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001310:	fb01 3310 	mls	r3, r1, r0, r3
 8001314:	fb00 fe0e 	mul.w	lr, r0, lr
 8001318:	b2a4      	uxth	r4, r4
 800131a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800131e:	45a6      	cmp	lr, r4
 8001320:	d90a      	bls.n	8001338 <__udivmoddi4+0x94>
 8001322:	eb1c 0404 	adds.w	r4, ip, r4
 8001326:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800132a:	f080 8109 	bcs.w	8001540 <__udivmoddi4+0x29c>
 800132e:	45a6      	cmp	lr, r4
 8001330:	f240 8106 	bls.w	8001540 <__udivmoddi4+0x29c>
 8001334:	4464      	add	r4, ip
 8001336:	3802      	subs	r0, #2
 8001338:	2100      	movs	r1, #0
 800133a:	eba4 040e 	sub.w	r4, r4, lr
 800133e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001342:	b11e      	cbz	r6, 800134c <__udivmoddi4+0xa8>
 8001344:	2300      	movs	r3, #0
 8001346:	40d4      	lsrs	r4, r2
 8001348:	e9c6 4300 	strd	r4, r3, [r6]
 800134c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001350:	428b      	cmp	r3, r1
 8001352:	d908      	bls.n	8001366 <__udivmoddi4+0xc2>
 8001354:	2e00      	cmp	r6, #0
 8001356:	f000 80ee 	beq.w	8001536 <__udivmoddi4+0x292>
 800135a:	2100      	movs	r1, #0
 800135c:	e9c6 0500 	strd	r0, r5, [r6]
 8001360:	4608      	mov	r0, r1
 8001362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001366:	fab3 f183 	clz	r1, r3
 800136a:	2900      	cmp	r1, #0
 800136c:	d14a      	bne.n	8001404 <__udivmoddi4+0x160>
 800136e:	42ab      	cmp	r3, r5
 8001370:	d302      	bcc.n	8001378 <__udivmoddi4+0xd4>
 8001372:	4282      	cmp	r2, r0
 8001374:	f200 80fc 	bhi.w	8001570 <__udivmoddi4+0x2cc>
 8001378:	1a84      	subs	r4, r0, r2
 800137a:	eb65 0303 	sbc.w	r3, r5, r3
 800137e:	2001      	movs	r0, #1
 8001380:	4698      	mov	r8, r3
 8001382:	2e00      	cmp	r6, #0
 8001384:	d0e2      	beq.n	800134c <__udivmoddi4+0xa8>
 8001386:	e9c6 4800 	strd	r4, r8, [r6]
 800138a:	e7df      	b.n	800134c <__udivmoddi4+0xa8>
 800138c:	b902      	cbnz	r2, 8001390 <__udivmoddi4+0xec>
 800138e:	deff      	udf	#255	; 0xff
 8001390:	fab2 f282 	clz	r2, r2
 8001394:	2a00      	cmp	r2, #0
 8001396:	f040 8091 	bne.w	80014bc <__udivmoddi4+0x218>
 800139a:	eba1 000c 	sub.w	r0, r1, ip
 800139e:	2101      	movs	r1, #1
 80013a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013a4:	fa1f fe8c 	uxth.w	lr, ip
 80013a8:	fbb0 f3f7 	udiv	r3, r0, r7
 80013ac:	fb07 0013 	mls	r0, r7, r3, r0
 80013b0:	0c25      	lsrs	r5, r4, #16
 80013b2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80013b6:	fb0e f003 	mul.w	r0, lr, r3
 80013ba:	42a8      	cmp	r0, r5
 80013bc:	d908      	bls.n	80013d0 <__udivmoddi4+0x12c>
 80013be:	eb1c 0505 	adds.w	r5, ip, r5
 80013c2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80013c6:	d202      	bcs.n	80013ce <__udivmoddi4+0x12a>
 80013c8:	42a8      	cmp	r0, r5
 80013ca:	f200 80ce 	bhi.w	800156a <__udivmoddi4+0x2c6>
 80013ce:	4643      	mov	r3, r8
 80013d0:	1a2d      	subs	r5, r5, r0
 80013d2:	fbb5 f0f7 	udiv	r0, r5, r7
 80013d6:	fb07 5510 	mls	r5, r7, r0, r5
 80013da:	fb0e fe00 	mul.w	lr, lr, r0
 80013de:	b2a4      	uxth	r4, r4
 80013e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80013e4:	45a6      	cmp	lr, r4
 80013e6:	d908      	bls.n	80013fa <__udivmoddi4+0x156>
 80013e8:	eb1c 0404 	adds.w	r4, ip, r4
 80013ec:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80013f0:	d202      	bcs.n	80013f8 <__udivmoddi4+0x154>
 80013f2:	45a6      	cmp	lr, r4
 80013f4:	f200 80b6 	bhi.w	8001564 <__udivmoddi4+0x2c0>
 80013f8:	4628      	mov	r0, r5
 80013fa:	eba4 040e 	sub.w	r4, r4, lr
 80013fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001402:	e79e      	b.n	8001342 <__udivmoddi4+0x9e>
 8001404:	f1c1 0720 	rsb	r7, r1, #32
 8001408:	408b      	lsls	r3, r1
 800140a:	fa22 fc07 	lsr.w	ip, r2, r7
 800140e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001412:	fa25 fa07 	lsr.w	sl, r5, r7
 8001416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800141a:	fbba f8f9 	udiv	r8, sl, r9
 800141e:	fa20 f307 	lsr.w	r3, r0, r7
 8001422:	fb09 aa18 	mls	sl, r9, r8, sl
 8001426:	408d      	lsls	r5, r1
 8001428:	fa1f fe8c 	uxth.w	lr, ip
 800142c:	431d      	orrs	r5, r3
 800142e:	fa00 f301 	lsl.w	r3, r0, r1
 8001432:	fb08 f00e 	mul.w	r0, r8, lr
 8001436:	0c2c      	lsrs	r4, r5, #16
 8001438:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800143c:	42a0      	cmp	r0, r4
 800143e:	fa02 f201 	lsl.w	r2, r2, r1
 8001442:	d90b      	bls.n	800145c <__udivmoddi4+0x1b8>
 8001444:	eb1c 0404 	adds.w	r4, ip, r4
 8001448:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800144c:	f080 8088 	bcs.w	8001560 <__udivmoddi4+0x2bc>
 8001450:	42a0      	cmp	r0, r4
 8001452:	f240 8085 	bls.w	8001560 <__udivmoddi4+0x2bc>
 8001456:	f1a8 0802 	sub.w	r8, r8, #2
 800145a:	4464      	add	r4, ip
 800145c:	1a24      	subs	r4, r4, r0
 800145e:	fbb4 f0f9 	udiv	r0, r4, r9
 8001462:	fb09 4410 	mls	r4, r9, r0, r4
 8001466:	fb00 fe0e 	mul.w	lr, r0, lr
 800146a:	b2ad      	uxth	r5, r5
 800146c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001470:	45a6      	cmp	lr, r4
 8001472:	d908      	bls.n	8001486 <__udivmoddi4+0x1e2>
 8001474:	eb1c 0404 	adds.w	r4, ip, r4
 8001478:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800147c:	d26c      	bcs.n	8001558 <__udivmoddi4+0x2b4>
 800147e:	45a6      	cmp	lr, r4
 8001480:	d96a      	bls.n	8001558 <__udivmoddi4+0x2b4>
 8001482:	3802      	subs	r0, #2
 8001484:	4464      	add	r4, ip
 8001486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800148a:	fba0 9502 	umull	r9, r5, r0, r2
 800148e:	eba4 040e 	sub.w	r4, r4, lr
 8001492:	42ac      	cmp	r4, r5
 8001494:	46c8      	mov	r8, r9
 8001496:	46ae      	mov	lr, r5
 8001498:	d356      	bcc.n	8001548 <__udivmoddi4+0x2a4>
 800149a:	d053      	beq.n	8001544 <__udivmoddi4+0x2a0>
 800149c:	2e00      	cmp	r6, #0
 800149e:	d069      	beq.n	8001574 <__udivmoddi4+0x2d0>
 80014a0:	ebb3 0208 	subs.w	r2, r3, r8
 80014a4:	eb64 040e 	sbc.w	r4, r4, lr
 80014a8:	fa22 f301 	lsr.w	r3, r2, r1
 80014ac:	fa04 f707 	lsl.w	r7, r4, r7
 80014b0:	431f      	orrs	r7, r3
 80014b2:	40cc      	lsrs	r4, r1
 80014b4:	e9c6 7400 	strd	r7, r4, [r6]
 80014b8:	2100      	movs	r1, #0
 80014ba:	e747      	b.n	800134c <__udivmoddi4+0xa8>
 80014bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80014c0:	f1c2 0120 	rsb	r1, r2, #32
 80014c4:	fa25 f301 	lsr.w	r3, r5, r1
 80014c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80014cc:	fa20 f101 	lsr.w	r1, r0, r1
 80014d0:	4095      	lsls	r5, r2
 80014d2:	430d      	orrs	r5, r1
 80014d4:	fbb3 f1f7 	udiv	r1, r3, r7
 80014d8:	fb07 3311 	mls	r3, r7, r1, r3
 80014dc:	fa1f fe8c 	uxth.w	lr, ip
 80014e0:	0c28      	lsrs	r0, r5, #16
 80014e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014e6:	fb01 f30e 	mul.w	r3, r1, lr
 80014ea:	4283      	cmp	r3, r0
 80014ec:	fa04 f402 	lsl.w	r4, r4, r2
 80014f0:	d908      	bls.n	8001504 <__udivmoddi4+0x260>
 80014f2:	eb1c 0000 	adds.w	r0, ip, r0
 80014f6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80014fa:	d22f      	bcs.n	800155c <__udivmoddi4+0x2b8>
 80014fc:	4283      	cmp	r3, r0
 80014fe:	d92d      	bls.n	800155c <__udivmoddi4+0x2b8>
 8001500:	3902      	subs	r1, #2
 8001502:	4460      	add	r0, ip
 8001504:	1ac0      	subs	r0, r0, r3
 8001506:	fbb0 f3f7 	udiv	r3, r0, r7
 800150a:	fb07 0013 	mls	r0, r7, r3, r0
 800150e:	b2ad      	uxth	r5, r5
 8001510:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001514:	fb03 f00e 	mul.w	r0, r3, lr
 8001518:	42a8      	cmp	r0, r5
 800151a:	d908      	bls.n	800152e <__udivmoddi4+0x28a>
 800151c:	eb1c 0505 	adds.w	r5, ip, r5
 8001520:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8001524:	d216      	bcs.n	8001554 <__udivmoddi4+0x2b0>
 8001526:	42a8      	cmp	r0, r5
 8001528:	d914      	bls.n	8001554 <__udivmoddi4+0x2b0>
 800152a:	3b02      	subs	r3, #2
 800152c:	4465      	add	r5, ip
 800152e:	1a28      	subs	r0, r5, r0
 8001530:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001534:	e738      	b.n	80013a8 <__udivmoddi4+0x104>
 8001536:	4631      	mov	r1, r6
 8001538:	4630      	mov	r0, r6
 800153a:	e707      	b.n	800134c <__udivmoddi4+0xa8>
 800153c:	462f      	mov	r7, r5
 800153e:	e6e4      	b.n	800130a <__udivmoddi4+0x66>
 8001540:	4618      	mov	r0, r3
 8001542:	e6f9      	b.n	8001338 <__udivmoddi4+0x94>
 8001544:	454b      	cmp	r3, r9
 8001546:	d2a9      	bcs.n	800149c <__udivmoddi4+0x1f8>
 8001548:	ebb9 0802 	subs.w	r8, r9, r2
 800154c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001550:	3801      	subs	r0, #1
 8001552:	e7a3      	b.n	800149c <__udivmoddi4+0x1f8>
 8001554:	4643      	mov	r3, r8
 8001556:	e7ea      	b.n	800152e <__udivmoddi4+0x28a>
 8001558:	4628      	mov	r0, r5
 800155a:	e794      	b.n	8001486 <__udivmoddi4+0x1e2>
 800155c:	4641      	mov	r1, r8
 800155e:	e7d1      	b.n	8001504 <__udivmoddi4+0x260>
 8001560:	46d0      	mov	r8, sl
 8001562:	e77b      	b.n	800145c <__udivmoddi4+0x1b8>
 8001564:	4464      	add	r4, ip
 8001566:	3802      	subs	r0, #2
 8001568:	e747      	b.n	80013fa <__udivmoddi4+0x156>
 800156a:	3b02      	subs	r3, #2
 800156c:	4465      	add	r5, ip
 800156e:	e72f      	b.n	80013d0 <__udivmoddi4+0x12c>
 8001570:	4608      	mov	r0, r1
 8001572:	e706      	b.n	8001382 <__udivmoddi4+0xde>
 8001574:	4631      	mov	r1, r6
 8001576:	e6e9      	b.n	800134c <__udivmoddi4+0xa8>

08001578 <__aeabi_idiv0>:
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop

0800157c <_ZN9UIElement17updateAllElementsEv>:
UIElement *UIElement::allElements[MAX_UI_ELEMENTS] = {};
uint8_t UIElement::elementNum = 0;

Screen* Screen::activeScreen = nullptr;
void UIElement::updateAllElements()
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
    static Screen* lastScreen = nullptr;
    if (Screen::activeScreen == nullptr){
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <_ZN9UIElement17updateAllElementsEv+0x58>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d022      	beq.n	80015ce <_ZN9UIElement17updateAllElementsEv+0x52>
        return;
    }
    
    static bool firstCall = true;
    if (firstCall || lastScreen != Screen::activeScreen)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_ZN9UIElement17updateAllElementsEv+0x5c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <_ZN9UIElement17updateAllElementsEv+0x20>
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <_ZN9UIElement17updateAllElementsEv+0x60>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <_ZN9UIElement17updateAllElementsEv+0x58>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d012      	beq.n	80015c2 <_ZN9UIElement17updateAllElementsEv+0x46>
    {
        LCD_Clear(0,0,240,320);
 800159c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015a0:	22f0      	movs	r2, #240	; 0xf0
 80015a2:	2100      	movs	r1, #0
 80015a4:	2000      	movs	r0, #0
 80015a6:	f004 ffa9 	bl	80064fc <LCD_Clear>
        Screen::activeScreen->renderAll();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <_ZN9UIElement17updateAllElementsEv+0x58>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f84e 	bl	8001650 <_ZN6Screen9renderAllEv>
        firstCall = false;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_ZN9UIElement17updateAllElementsEv+0x5c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
        lastScreen = Screen::activeScreen;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <_ZN9UIElement17updateAllElementsEv+0x58>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a07      	ldr	r2, [pc, #28]	; (80015dc <_ZN9UIElement17updateAllElementsEv+0x60>)
 80015c0:	6013      	str	r3, [r2, #0]
    }

    Screen::activeScreen->updateAll();
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <_ZN9UIElement17updateAllElementsEv+0x58>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f80a 	bl	80015e0 <_ZN6Screen9updateAllEv>
 80015cc:	e000      	b.n	80015d0 <_ZN9UIElement17updateAllElementsEv+0x54>
        return;
 80015ce:	bf00      	nop
    // Update all UI elements
}
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000168 	.word	0x20000168
 80015d8:	20000000 	.word	0x20000000
 80015dc:	2000016c 	.word	0x2000016c

080015e0 <_ZN6Screen9updateAllEv>:

void Screen::updateAll() // this replace the original updateAllElements function
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    strType_XPT2046_Coordinate touch;
    XPT2046_Get_TouchedPoint(&touch, &strXPT2046_TouchPara);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4917      	ldr	r1, [pc, #92]	; (800164c <_ZN6Screen9updateAllEv+0x6c>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f007 ffe8 	bl	80095c4 <XPT2046_Get_TouchedPoint>
    sprintf(str, "x=%d, y=%d", touch.x, touch.y);
    // printToLCD(str, 0);
    // }
    // }
#endif
    for (int i = 0; i < elementNum; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4293      	cmp	r3, r2
 8001604:	da11      	bge.n	800162a <_ZN6Screen9updateAllEv+0x4a>
    {
        elements[i]->update(touch.x, touch.y);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3304      	adds	r3, #4
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	8939      	ldrh	r1, [r7, #8]
 800161e:	897a      	ldrh	r2, [r7, #10]
 8001620:	4798      	blx	r3
    for (int i = 0; i < elementNum; i++)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3301      	adds	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e7e6      	b.n	80015f8 <_ZN6Screen9updateAllEv+0x18>
    }
    touch.x = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	813b      	strh	r3, [r7, #8]
    touch.y = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	817b      	strh	r3, [r7, #10]
    if (onUpdate != nullptr)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <_ZN6Screen9updateAllEv+0x64>
    {
        onUpdate();
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001642:	4798      	blx	r3
    }
    
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000028 	.word	0x20000028

08001650 <_ZN6Screen9renderAllEv>:

void Screen::renderAll()
    {
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
        for (int i = 0; i < elementNum; i++)
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4293      	cmp	r3, r2
 8001668:	da0f      	bge.n	800168a <_ZN6Screen9renderAllEv+0x3a>
        {
            elements[i]->render();
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4608      	mov	r0, r1
 8001680:	4798      	blx	r3
        for (int i = 0; i < elementNum; i++)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3301      	adds	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	e7e8      	b.n	800165c <_ZN6Screen9renderAllEv+0xc>
        }
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_ZN3RGBC1Ehhh>:
{
    uint8_t green;
    uint8_t red;
    uint8_t blue;

    RGB(uint8_t r, uint8_t g, uint8_t b) : red(r ), green(g ), blue(b ) {}
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	4608      	mov	r0, r1
 800169c:	4611      	mov	r1, r2
 800169e:	461a      	mov	r2, r3
 80016a0:	4603      	mov	r3, r0
 80016a2:	70fb      	strb	r3, [r7, #3]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70bb      	strb	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	78ba      	ldrb	r2, [r7, #2]
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	78fa      	ldrb	r2, [r7, #3]
 80016b6:	705a      	strb	r2, [r3, #1]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	787a      	ldrb	r2, [r7, #1]
 80016bc:	709a      	strb	r2, [r3, #2]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <_ZN3RGBC1Ehhhf>:
    RGB(uint8_t r, uint8_t g, uint8_t b, float luminance) : red(r * luminance), green(g * luminance), blue(b * luminance) {}
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	4608      	mov	r0, r1
 80016d4:	4611      	mov	r1, r2
 80016d6:	461a      	mov	r2, r3
 80016d8:	4603      	mov	r3, r0
 80016da:	70fb      	strb	r3, [r7, #3]
 80016dc:	460b      	mov	r3, r1
 80016de:	70bb      	strb	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
 80016e4:	78bb      	ldrb	r3, [r7, #2]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fb4e 	bl	8000d88 <__aeabi_i2f>
 80016ec:	4603      	mov	r3, r0
 80016ee:	6939      	ldr	r1, [r7, #16]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fb9d 	bl	8000e30 <__aeabi_fmul>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fd9b 	bl	8001234 <__aeabi_f2uiz>
 80016fe:	4603      	mov	r3, r0
 8001700:	b2da      	uxtb	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fb3d 	bl	8000d88 <__aeabi_i2f>
 800170e:	4603      	mov	r3, r0
 8001710:	6939      	ldr	r1, [r7, #16]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fb8c 	bl	8000e30 <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fd8a 	bl	8001234 <__aeabi_f2uiz>
 8001720:	4603      	mov	r3, r0
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	705a      	strb	r2, [r3, #1]
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fb2c 	bl	8000d88 <__aeabi_i2f>
 8001730:	4603      	mov	r3, r0
 8001732:	6939      	ldr	r1, [r7, #16]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fb7b 	bl	8000e30 <__aeabi_fmul>
 800173a:	4603      	mov	r3, r0
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fd79 	bl	8001234 <__aeabi_f2uiz>
 8001742:	4603      	mov	r3, r0
 8001744:	b2da      	uxtb	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	709a      	strb	r2, [r3, #2]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <_ZZ18playStartAnimationvENKUliiE_clEii>:
  int length = 10;

  RGB color = RGB(0, 255, 0);

  while (current < LED_NUM){
    auto max = [](int a, int b){return a > b ? a : b;};
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dd01      	ble.n	800176c <_ZZ18playStartAnimationvENKUliiE_clEii+0x18>
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	e000      	b.n	800176e <_ZZ18playStartAnimationvENKUliiE_clEii+0x1a>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <_ZZ18playStartAnimationvENKUliiE0_clEii>:
    auto min = [](int a, int b){return a < b ? a : b;};
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	da01      	bge.n	8001790 <_ZZ18playStartAnimationvENKUliiE0_clEii+0x18>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	e000      	b.n	8001792 <_ZZ18playStartAnimationvENKUliiE0_clEii+0x1a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <_Z18playStartAnimationv>:
void playStartAnimation(){
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
  int current = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  int length = 10;
 80017a6:	230a      	movs	r3, #10
 80017a8:	613b      	str	r3, [r7, #16]
  RGB color = RGB(0, 255, 0);
 80017aa:	f107 000c 	add.w	r0, r7, #12
 80017ae:	2300      	movs	r3, #0
 80017b0:	22ff      	movs	r2, #255	; 0xff
 80017b2:	2100      	movs	r1, #0
 80017b4:	f7ff ff6d 	bl	8001692 <_ZN3RGBC1Ehhh>
  while (current < LED_NUM){
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	2b53      	cmp	r3, #83	; 0x53
 80017bc:	dc56      	bgt.n	800186c <_Z18playStartAnimationv+0xd0>
    for (int i = current; i < min(current + length, LED_NUM); i++){
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	18d1      	adds	r1, r2, r3
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2254      	movs	r2, #84	; 0x54
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ffd3 	bl	8001778 <_ZZ18playStartAnimationvENKUliiE0_clEii>
 80017d2:	4602      	mov	r2, r0
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	bfb4      	ite	lt
 80017da:	2301      	movlt	r3, #1
 80017dc:	2300      	movge	r3, #0
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <_Z18playStartAnimationv+0x58>
      setColor(i, color);
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	69b8      	ldr	r0, [r7, #24]
 80017e8:	f001 f89c 	bl	8002924 <_Z8setColori3RGB>
    for (int i = current; i < min(current + length, LED_NUM); i++){
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	3301      	adds	r3, #1
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	e7e6      	b.n	80017c2 <_Z18playStartAnimationv+0x26>
    }
    if (current > 0){
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	dd06      	ble.n	8001808 <_Z18playStartAnimationv+0x6c>
      setColor(current - 1, 0, 0, 0);
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	1e58      	subs	r0, r3, #1
 80017fe:	2300      	movs	r3, #0
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	f001 f858 	bl	80028b8 <_Z8setColorihhh>
    }
    
    for (int i = LED_NUM - current - 1; i > max(LED_NUM - current - length, 0); i--){
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0353 	rsb	r3, r3, #83	; 0x53
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0254 	rsb	r2, r3, #84	; 0x54
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad1      	subs	r1, r2, r3
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	2200      	movs	r2, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff97 	bl	8001754 <_ZZ18playStartAnimationvENKUliiE_clEii>
 8001826:	4602      	mov	r2, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	4293      	cmp	r3, r2
 800182c:	bfcc      	ite	gt
 800182e:	2301      	movgt	r3, #1
 8001830:	2300      	movle	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <_Z18playStartAnimationv+0xac>
      setColor(i, color);
 8001838:	68f9      	ldr	r1, [r7, #12]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f001 f872 	bl	8002924 <_Z8setColori3RGB>
    for (int i = LED_NUM - current - 1; i > max(LED_NUM - current - length, 0); i--){
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3b01      	subs	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e7e3      	b.n	8001810 <_Z18playStartAnimationv+0x74>
    }
    if (current > 0){
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	2b00      	cmp	r3, #0
 800184c:	dd07      	ble.n	800185e <_Z18playStartAnimationv+0xc2>
      setColor(LED_NUM - current, 0, 0, 0);
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f1c3 0054 	rsb	r0, r3, #84	; 0x54
 8001854:	2300      	movs	r3, #0
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	f001 f82d 	bl	80028b8 <_Z8setColorihhh>
    }
    HAL_Delay(12);
 800185e:	200c      	movs	r0, #12
 8001860:	f007 ffc0 	bl	80097e4 <HAL_Delay>
    current++;
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	3301      	adds	r3, #1
 8001868:	61fb      	str	r3, [r7, #28]
  while (current < LED_NUM){
 800186a:	e7a5      	b.n	80017b8 <_Z18playStartAnimationv+0x1c>
  }
}
 800186c:	bf00      	nop
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	0000      	movs	r0, r0
	...

08001878 <_Z21updateBreathAnimationi3RGB>:
  bool enable = false;
  int count = 0;
};


void updateBreathAnimation(int period, RGB color){
 8001878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800187c:	b087      	sub	sp, #28
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
    // period = 3s
    static int startTick = 0;

    if (startTick == 0){
 8001884:	4b86      	ldr	r3, [pc, #536]	; (8001aa0 <_Z21updateBreathAnimationi3RGB+0x228>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <_Z21updateBreathAnimationi3RGB+0x20>
      startTick = HAL_GetTick();
 800188c:	f007 ffa0 	bl	80097d0 <HAL_GetTick>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	4b82      	ldr	r3, [pc, #520]	; (8001aa0 <_Z21updateBreathAnimationi3RGB+0x228>)
 8001896:	601a      	str	r2, [r3, #0]
    }
    int tick = HAL_GetTick();
 8001898:	f007 ff9a 	bl	80097d0 <HAL_GetTick>
 800189c:	4603      	mov	r3, r0
 800189e:	613b      	str	r3, [r7, #16]
    float progress = (tick - startTick)%period / (float)period;
 80018a0:	4b7f      	ldr	r3, [pc, #508]	; (8001aa0 <_Z21updateBreathAnimationi3RGB+0x228>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	fb93 f2f2 	sdiv	r2, r3, r2
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	fb01 f202 	mul.w	r2, r1, r2
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fa66 	bl	8000d88 <__aeabi_i2f>
 80018bc:	4604      	mov	r4, r0
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fa62 	bl	8000d88 <__aeabi_i2f>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7ff fb65 	bl	8000f98 <__aeabi_fdiv>
 80018ce:	4603      	mov	r3, r0
 80018d0:	60fb      	str	r3, [r7, #12]
    progress = progress < 0.01 ? 0.01 : progress;
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7fe fe14 	bl	8000500 <__aeabi_f2d>
 80018d8:	a36f      	add	r3, pc, #444	; (adr r3, 8001a98 <_Z21updateBreathAnimationi3RGB+0x220>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7ff f8d9 	bl	8000a94 <__aeabi_dcmplt>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <_Z21updateBreathAnimationi3RGB+0x74>
 80018e8:	4b6e      	ldr	r3, [pc, #440]	; (8001aa4 <_Z21updateBreathAnimationi3RGB+0x22c>)
 80018ea:	e000      	b.n	80018ee <_Z21updateBreathAnimationi3RGB+0x76>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < LED_NUM; i++){
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b53      	cmp	r3, #83	; 0x53
 80018f8:	f300 80c9 	bgt.w	8001a8e <_Z21updateBreathAnimationi3RGB+0x216>
      if (progress < 0.5){
 80018fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff fc33 	bl	800116c <__aeabi_fcmplt>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d032      	beq.n	8001972 <_Z21updateBreathAnimationi3RGB+0xfa>
        
        setColor(i, progress * color.red, progress * color.green, progress * color.blue);
 800190c:	787b      	ldrb	r3, [r7, #1]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fa3a 	bl	8000d88 <__aeabi_i2f>
 8001914:	4603      	mov	r3, r0
 8001916:	68f9      	ldr	r1, [r7, #12]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fa89 	bl	8000e30 <__aeabi_fmul>
 800191e:	4603      	mov	r3, r0
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fc87 	bl	8001234 <__aeabi_f2uiz>
 8001926:	4603      	mov	r3, r0
 8001928:	b2dc      	uxtb	r4, r3
 800192a:	783b      	ldrb	r3, [r7, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fa2b 	bl	8000d88 <__aeabi_i2f>
 8001932:	4603      	mov	r3, r0
 8001934:	68f9      	ldr	r1, [r7, #12]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fa7a 	bl	8000e30 <__aeabi_fmul>
 800193c:	4603      	mov	r3, r0
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fc78 	bl	8001234 <__aeabi_f2uiz>
 8001944:	4603      	mov	r3, r0
 8001946:	b2dd      	uxtb	r5, r3
 8001948:	78bb      	ldrb	r3, [r7, #2]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fa1c 	bl	8000d88 <__aeabi_i2f>
 8001950:	4603      	mov	r3, r0
 8001952:	68f9      	ldr	r1, [r7, #12]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fa6b 	bl	8000e30 <__aeabi_fmul>
 800195a:	4603      	mov	r3, r0
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fc69 	bl	8001234 <__aeabi_f2uiz>
 8001962:	4603      	mov	r3, r0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	462a      	mov	r2, r5
 8001968:	4621      	mov	r1, r4
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f000 ffa4 	bl	80028b8 <_Z8setColorihhh>
 8001970:	e089      	b.n	8001a86 <_Z21updateBreathAnimationi3RGB+0x20e>
      } else {
        
        setColor(i, color.red/2 - (progress-0.5)*color.red, color.green/2 - (progress-0.5)*color.green, color.blue/2 - (progress-0.5)*color.blue);
 8001972:	787b      	ldrb	r3, [r7, #1]
 8001974:	085b      	lsrs	r3, r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fdaf 	bl	80004dc <__aeabi_i2d>
 800197e:	4604      	mov	r4, r0
 8001980:	460d      	mov	r5, r1
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7fe fdbc 	bl	8000500 <__aeabi_f2d>
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <_Z21updateBreathAnimationi3RGB+0x230>)
 800198e:	f7fe fc57 	bl	8000240 <__aeabi_dsub>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4690      	mov	r8, r2
 8001998:	4699      	mov	r9, r3
 800199a:	787b      	ldrb	r3, [r7, #1]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fd9d 	bl	80004dc <__aeabi_i2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4640      	mov	r0, r8
 80019a8:	4649      	mov	r1, r9
 80019aa:	f7fe fe01 	bl	80005b0 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4620      	mov	r0, r4
 80019b4:	4629      	mov	r1, r5
 80019b6:	f7fe fc43 	bl	8000240 <__aeabi_dsub>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f8b7 	bl	8000b34 <__aeabi_d2uiz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b2de      	uxtb	r6, r3
 80019ca:	783b      	ldrb	r3, [r7, #0]
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fd83 	bl	80004dc <__aeabi_i2d>
 80019d6:	4604      	mov	r4, r0
 80019d8:	460d      	mov	r5, r1
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7fe fd90 	bl	8000500 <__aeabi_f2d>
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <_Z21updateBreathAnimationi3RGB+0x230>)
 80019e6:	f7fe fc2b 	bl	8000240 <__aeabi_dsub>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4690      	mov	r8, r2
 80019f0:	4699      	mov	r9, r3
 80019f2:	783b      	ldrb	r3, [r7, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fd71 	bl	80004dc <__aeabi_i2d>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4640      	mov	r0, r8
 8001a00:	4649      	mov	r1, r9
 8001a02:	f7fe fdd5 	bl	80005b0 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fc17 	bl	8000240 <__aeabi_dsub>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff f88b 	bl	8000b34 <__aeabi_d2uiz>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	fa5f f883 	uxtb.w	r8, r3
 8001a24:	78bb      	ldrb	r3, [r7, #2]
 8001a26:	085b      	lsrs	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fd56 	bl	80004dc <__aeabi_i2d>
 8001a30:	4604      	mov	r4, r0
 8001a32:	460d      	mov	r5, r1
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f7fe fd63 	bl	8000500 <__aeabi_f2d>
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <_Z21updateBreathAnimationi3RGB+0x230>)
 8001a40:	f7fe fbfe 	bl	8000240 <__aeabi_dsub>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4692      	mov	sl, r2
 8001a4a:	469b      	mov	fp, r3
 8001a4c:	78bb      	ldrb	r3, [r7, #2]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd44 	bl	80004dc <__aeabi_i2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4650      	mov	r0, sl
 8001a5a:	4659      	mov	r1, fp
 8001a5c:	f7fe fda8 	bl	80005b0 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4620      	mov	r0, r4
 8001a66:	4629      	mov	r1, r5
 8001a68:	f7fe fbea 	bl	8000240 <__aeabi_dsub>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff f85e 	bl	8000b34 <__aeabi_d2uiz>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	4631      	mov	r1, r6
 8001a80:	6978      	ldr	r0, [r7, #20]
 8001a82:	f000 ff19 	bl	80028b8 <_Z8setColorihhh>
    for (int i = 0; i < LED_NUM; i++){
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e732      	b.n	80018f4 <_Z21updateBreathAnimationi3RGB+0x7c>
      }
    }
}
 8001a8e:	bf00      	nop
 8001a90:	371c      	adds	r7, #28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a98:	47ae147b 	.word	0x47ae147b
 8001a9c:	3f847ae1 	.word	0x3f847ae1
 8001aa0:	20000170 	.word	0x20000170
 8001aa4:	3c23d70a 	.word	0x3c23d70a
 8001aa8:	3fe00000 	.word	0x3fe00000

08001aac <_ZZ17updateLightStreamiibRiENKUliiE_clEii>:
    // if (count < interval){
    //     count++;
    //     return;
    // }
    // count = 0;
    auto max = [](int a, int b){return a > b ? a : b;};
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dd01      	ble.n	8001ac4 <_ZZ17updateLightStreamiibRiENKUliiE_clEii+0x18>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	e000      	b.n	8001ac6 <_ZZ17updateLightStreamiibRiENKUliiE_clEii+0x1a>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <_ZZ17updateLightStreamiibRiENKUliiE0_clEii>:
    auto min = [](int a, int b){return a < b ? a : b;};
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	da01      	bge.n	8001ae8 <_ZZ17updateLightStreamiibRiENKUliiE0_clEii+0x18>
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	e000      	b.n	8001aea <_ZZ17updateLightStreamiibRiENKUliiE0_clEii+0x1a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <_Z17updateLightStreamiibRi>:
void updateLightStream(int start, int end, bool isDirIncresingIndex, int& current){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	71fb      	strb	r3, [r7, #7]
    if (isDirIncresingIndex){
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d056      	beq.n	8001bb8 <_Z17updateLightStreamiibRi+0xc4>
        for (int i = current; i < min(current + length, end); i++){
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b68      	ldr	r3, [pc, #416]	; (8001cb8 <_Z17updateLightStreamiibRi+0x1c4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	18d1      	adds	r1, r2, r3
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ffd5 	bl	8001ad0 <_ZZ17updateLightStreamiibRiENKUliiE0_clEii>
 8001b26:	4602      	mov	r2, r0
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	bfb4      	ite	lt
 8001b2e:	2301      	movlt	r3, #1
 8001b30:	2300      	movge	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d02a      	beq.n	8001b8e <_Z17updateLightStreamiibRi+0x9a>
            if (i>=0 && i < LED_NUM)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db23      	blt.n	8001b86 <_Z17updateLightStreamiibRi+0x92>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	2b53      	cmp	r3, #83	; 0x53
 8001b42:	dc20      	bgt.n	8001b86 <_Z17updateLightStreamiibRi+0x92>
            setColor(i, i==min(current + length, end)-1 ? headRGB : bodyRGB);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <_Z17updateLightStreamiibRi+0x1c4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	18d1      	adds	r1, r2, r3
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ffbb 	bl	8001ad0 <_ZZ17updateLightStreamiibRiENKUliiE0_clEii>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d101      	bne.n	8001b68 <_Z17updateLightStreamiibRi+0x74>
 8001b64:	4b55      	ldr	r3, [pc, #340]	; (8001cbc <_Z17updateLightStreamiibRi+0x1c8>)
 8001b66:	e000      	b.n	8001b6a <_Z17updateLightStreamiibRi+0x76>
 8001b68:	4b55      	ldr	r3, [pc, #340]	; (8001cc0 <_Z17updateLightStreamiibRi+0x1cc>)
 8001b6a:	781a      	ldrb	r2, [r3, #0]
 8001b6c:	7859      	ldrb	r1, [r3, #1]
 8001b6e:	0209      	lsls	r1, r1, #8
 8001b70:	430a      	orrs	r2, r1
 8001b72:	789b      	ldrb	r3, [r3, #2]
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	431a      	orrs	r2, r3
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f362 0317 	bfi	r3, r2, #0, #24
 8001b7e:	4619      	mov	r1, r3
 8001b80:	69f8      	ldr	r0, [r7, #28]
 8001b82:	f000 fecf 	bl	8002924 <_Z8setColori3RGB>
        for (int i = current; i < min(current + length, end); i++){
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	e7c0      	b.n	8001b10 <_Z17updateLightStreamiibRi+0x1c>
        }
        if (current > 0){
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	dd7e      	ble.n	8001c94 <_Z17updateLightStreamiibRi+0x1a0>
            if (current - 1 >= 0 && current - 1 < LED_NUM)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	dd7a      	ble.n	8001c94 <_Z17updateLightStreamiibRi+0x1a0>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b54      	cmp	r3, #84	; 0x54
 8001ba4:	dc76      	bgt.n	8001c94 <_Z17updateLightStreamiibRi+0x1a0>
                setColor(current - 1, 0, 0, 0);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	1e58      	subs	r0, r3, #1
 8001bac:	2300      	movs	r3, #0
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	f000 fe81 	bl	80028b8 <_Z8setColorihhh>
 8001bb6:	e06d      	b.n	8001c94 <_Z17updateLightStreamiibRi+0x1a0>
        }
    }else{
        for (int i = end - current - 1 + start; i > max(end - current - length + start, start); i--){
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	1ad2      	subs	r2, r2, r3
 8001bd0:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <_Z17updateLightStreamiibRi+0x1c4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	1ad2      	subs	r2, r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	18d1      	adds	r1, r2, r3
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff63 	bl	8001aac <_ZZ17updateLightStreamiibRiENKUliiE_clEii>
 8001be6:	4602      	mov	r2, r0
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	4293      	cmp	r3, r2
 8001bec:	bfcc      	ite	gt
 8001bee:	2301      	movgt	r3, #1
 8001bf0:	2300      	movle	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d02e      	beq.n	8001c56 <_Z17updateLightStreamiibRi+0x162>
            if (i>= 0 && i < LED_NUM)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db27      	blt.n	8001c4e <_Z17updateLightStreamiibRi+0x15a>
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b53      	cmp	r3, #83	; 0x53
 8001c02:	dc24      	bgt.n	8001c4e <_Z17updateLightStreamiibRi+0x15a>
                setColor(i, i == max(end - current - length + start, start) +1 ? headRGB : bodyRGB);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	1ad2      	subs	r2, r2, r3
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <_Z17updateLightStreamiibRi+0x1c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	1ad2      	subs	r2, r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	18d1      	adds	r1, r2, r3
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff45 	bl	8001aac <_ZZ17updateLightStreamiibRiENKUliiE_clEii>
 8001c22:	4603      	mov	r3, r0
 8001c24:	3301      	adds	r3, #1
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d101      	bne.n	8001c30 <_Z17updateLightStreamiibRi+0x13c>
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <_Z17updateLightStreamiibRi+0x1c8>)
 8001c2e:	e000      	b.n	8001c32 <_Z17updateLightStreamiibRi+0x13e>
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <_Z17updateLightStreamiibRi+0x1cc>)
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	7859      	ldrb	r1, [r3, #1]
 8001c36:	0209      	lsls	r1, r1, #8
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	789b      	ldrb	r3, [r3, #2]
 8001c3c:	041b      	lsls	r3, r3, #16
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	f362 0317 	bfi	r3, r2, #0, #24
 8001c46:	4619      	mov	r1, r3
 8001c48:	69b8      	ldr	r0, [r7, #24]
 8001c4a:	f000 fe6b 	bl	8002924 <_Z8setColori3RGB>
        for (int i = end - current - 1 + start; i > max(end - current - length + start, start); i--){
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	e7b8      	b.n	8001bc8 <_Z17updateLightStreamiibRi+0xd4>
        }
        if (current > 0){
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	dd1a      	ble.n	8001c94 <_Z17updateLightStreamiibRi+0x1a0>
            if (end - current + start >= 0 && end - current + start < LED_NUM)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	1ad2      	subs	r2, r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4413      	add	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db12      	blt.n	8001c94 <_Z17updateLightStreamiibRi+0x1a0>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	1ad2      	subs	r2, r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	2b53      	cmp	r3, #83	; 0x53
 8001c7c:	dc0a      	bgt.n	8001c94 <_Z17updateLightStreamiibRi+0x1a0>
                setColor(end - current + start, 0, 0, 0);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	1ad2      	subs	r2, r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	18d0      	adds	r0, r2, r3
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	f000 fe12 	bl	80028b8 <_Z8setColorihhh>
        }
    }
    
    current++;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	601a      	str	r2, [r3, #0]
    if (current > end){
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	da02      	bge.n	8001cae <_Z17updateLightStreamiibRi+0x1ba>
        current = start;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	601a      	str	r2, [r3, #0]
    }
}
 8001cae:	bf00      	nop
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	20000178 	.word	0x20000178
 8001cc0:	20000174 	.word	0x20000174

08001cc4 <_Z24updateResettingAnimationv>:
int current_mid_2 = 48;

int current_r = 54 + length ;
int current_r_2 = 72 + length;

void updateResettingAnimation(){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8001cca:	2032      	movs	r0, #50	; 0x32
 8001ccc:	f007 fd8a 	bl	80097e4 <HAL_Delay>
    if (isResetComplete_Y){
 8001cd0:	4b39      	ldr	r3, [pc, #228]	; (8001db8 <_Z24updateResettingAnimationv+0xf4>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d01d      	beq.n	8001d14 <_Z24updateResettingAnimationv+0x50>
      for (int i = 0; i < 30; i++){
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b1d      	cmp	r3, #29
 8001ce0:	dc09      	bgt.n	8001cf6 <_Z24updateResettingAnimationv+0x32>
        setColor(i, 0, 255, 0);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	22ff      	movs	r2, #255	; 0xff
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fde5 	bl	80028b8 <_Z8setColorihhh>
      for (int i = 0; i < 30; i++){
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	e7f2      	b.n	8001cdc <_Z24updateResettingAnimationv+0x18>
      }
      for (int i = 54; i < LED_NUM; i++){
 8001cf6:	2336      	movs	r3, #54	; 0x36
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b53      	cmp	r3, #83	; 0x53
 8001cfe:	dc2b      	bgt.n	8001d58 <_Z24updateResettingAnimationv+0x94>
        setColor(i, 0, 255, 0);
 8001d00:	2300      	movs	r3, #0
 8001d02:	22ff      	movs	r2, #255	; 0xff
 8001d04:	2100      	movs	r1, #0
 8001d06:	68b8      	ldr	r0, [r7, #8]
 8001d08:	f000 fdd6 	bl	80028b8 <_Z8setColorihhh>
      for (int i = 54; i < LED_NUM; i++){
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	e7f2      	b.n	8001cfa <_Z24updateResettingAnimationv+0x36>
      }
    }else{
      updateLightStream(0 - length, 30, 1, current_l);// 实现从0冒出来，而不是直接0～5生成一整条
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <_Z24updateResettingAnimationv+0xf8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4258      	negs	r0, r3
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <_Z24updateResettingAnimationv+0xfc>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	211e      	movs	r1, #30
 8001d20:	f7ff fee8 	bl	8001af4 <_Z17updateLightStreamiibRi>
      updateLightStream(0 - length, 30, 1, current_l_2);
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <_Z24updateResettingAnimationv+0xf8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4258      	negs	r0, r3
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <_Z24updateResettingAnimationv+0x100>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	211e      	movs	r1, #30
 8001d30:	f7ff fee0 	bl	8001af4 <_Z17updateLightStreamiibRi>
      updateLightStream(54-1, LED_NUM+length-1, 0, current_r);
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <_Z24updateResettingAnimationv+0xf8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f103 0153 	add.w	r1, r3, #83	; 0x53
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <_Z24updateResettingAnimationv+0x104>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2035      	movs	r0, #53	; 0x35
 8001d42:	f7ff fed7 	bl	8001af4 <_Z17updateLightStreamiibRi>
      updateLightStream(54-1, LED_NUM+length-1, 0, current_r_2);
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <_Z24updateResettingAnimationv+0xf8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f103 0153 	add.w	r1, r3, #83	; 0x53
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <_Z24updateResettingAnimationv+0x108>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	2035      	movs	r0, #53	; 0x35
 8001d54:	f7ff fece 	bl	8001af4 <_Z17updateLightStreamiibRi>
    }

    if (isResetComplete_X){
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <_Z24updateResettingAnimationv+0x10c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00e      	beq.n	8001d7e <_Z24updateResettingAnimationv+0xba>
      for (int i = 30; i < 54; i++){
 8001d60:	231e      	movs	r3, #30
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b35      	cmp	r3, #53	; 0x35
 8001d68:	dc21      	bgt.n	8001dae <_Z24updateResettingAnimationv+0xea>
        setColor(i, 0, 255, 0);
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	22ff      	movs	r2, #255	; 0xff
 8001d6e:	2100      	movs	r1, #0
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 fda1 	bl	80028b8 <_Z8setColorihhh>
      for (int i = 30; i < 54; i++){
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	e7f2      	b.n	8001d64 <_Z24updateResettingAnimationv+0xa0>
      }
      
    }else{
      updateLightStream(30 - length, 54 + length, 0, current_mid);
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <_Z24updateResettingAnimationv+0xf8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f1c3 001e 	rsb	r0, r3, #30
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <_Z24updateResettingAnimationv+0xf8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f103 0136 	add.w	r1, r3, #54	; 0x36
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <_Z24updateResettingAnimationv+0x110>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	f7ff feaf 	bl	8001af4 <_Z17updateLightStreamiibRi>
      updateLightStream(30- length, 54 + length, 0, current_mid_2);
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <_Z24updateResettingAnimationv+0xf8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f1c3 001e 	rsb	r0, r3, #30
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_Z24updateResettingAnimationv+0xf8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f103 0136 	add.w	r1, r3, #54	; 0x36
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <_Z24updateResettingAnimationv+0x114>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	f7ff fea3 	bl	8001af4 <_Z17updateLightStreamiibRi>
      
    }

}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000185 	.word	0x20000185
 8001dbc:	20000004 	.word	0x20000004
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	2000000c 	.word	0x2000000c
 8001dc8:	2000017c 	.word	0x2000017c
 8001dcc:	20000180 	.word	0x20000180
 8001dd0:	20000184 	.word	0x20000184
 8001dd4:	20000010 	.word	0x20000010
 8001dd8:	20000014 	.word	0x20000014

08001ddc <_Z17updateLightEffectv>:
bool isResetComplete_X = false;
bool isResetComplete_Y = false;


Counter completeCounter;
void updateLightEffect(){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
    switch (lightStatus){
 8001de2:	4b42      	ldr	r3, [pc, #264]	; (8001eec <_Z17updateLightEffectv+0x110>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d87b      	bhi.n	8001ee2 <_Z17updateLightEffectv+0x106>
 8001dea:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <_Z17updateLightEffectv+0x14>)
 8001dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df0:	08001e09 	.word	0x08001e09
 8001df4:	08001e21 	.word	0x08001e21
 8001df8:	08001edd 	.word	0x08001edd
 8001dfc:	08001e3b 	.word	0x08001e3b
 8001e00:	08001e55 	.word	0x08001e55
 8001e04:	08001e5b 	.word	0x08001e5b
        case STANDBY:
            updateBreathAnimation(3000, RGB(0, 255, 0));
 8001e08:	1d38      	adds	r0, r7, #4
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	22ff      	movs	r2, #255	; 0xff
 8001e0e:	2100      	movs	r1, #0
 8001e10:	f7ff fc3f 	bl	8001692 <_ZN3RGBC1Ehhh>
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e1a:	f7ff fd2d 	bl	8001878 <_Z21updateBreathAnimationi3RGB>
            break;
 8001e1e:	e060      	b.n	8001ee2 <_Z17updateLightEffectv+0x106>
        case OPERATING:
            updateBreathAnimation(1500, RGB(0, 80, 128));
 8001e20:	f107 0008 	add.w	r0, r7, #8
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	2250      	movs	r2, #80	; 0x50
 8001e28:	2100      	movs	r1, #0
 8001e2a:	f7ff fc32 	bl	8001692 <_ZN3RGBC1Ehhh>
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001e34:	f7ff fd20 	bl	8001878 <_Z21updateBreathAnimationi3RGB>
            break;
 8001e38:	e053      	b.n	8001ee2 <_Z17updateLightEffectv+0x106>
        case WARNING:
          break;
        case FATAL:
          updateBreathAnimation(500, RGB(255, 0, 0));
 8001e3a:	f107 000c 	add.w	r0, r7, #12
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2200      	movs	r2, #0
 8001e42:	21ff      	movs	r1, #255	; 0xff
 8001e44:	f7ff fc25 	bl	8001692 <_ZN3RGBC1Ehhh>
 8001e48:	68f9      	ldr	r1, [r7, #12]
 8001e4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e4e:	f7ff fd13 	bl	8001878 <_Z21updateBreathAnimationi3RGB>
          break;
 8001e52:	e046      	b.n	8001ee2 <_Z17updateLightEffectv+0x106>

        case RESETTING:
          // blankAll();
          updateResettingAnimation();
 8001e54:	f7ff ff36 	bl	8001cc4 <_Z24updateResettingAnimationv>
          break;
 8001e58:	e043      	b.n	8001ee2 <_Z17updateLightEffectv+0x106>
        case COMPLETE:
          const int blinkCount = 3;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	613b      	str	r3, [r7, #16]
          if (completeCounter.enable == false){
 8001e5e:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <_Z17updateLightEffectv+0x114>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d105      	bne.n	8001e72 <_Z17updateLightEffectv+0x96>
            completeCounter.enable = true;
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <_Z17updateLightEffectv+0x114>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
            completeCounter.count = 0;
 8001e6c:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <_Z17updateLightEffectv+0x114>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	605a      	str	r2, [r3, #4]
          }
          if (completeCounter.count < 100){
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <_Z17updateLightEffectv+0x114>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b63      	cmp	r3, #99	; 0x63
 8001e78:	dc05      	bgt.n	8001e86 <_Z17updateLightEffectv+0xaa>
            completeCounter.count++;
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <_Z17updateLightEffectv+0x114>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <_Z17updateLightEffectv+0x114>)
 8001e82:	6053      	str	r3, [r2, #4]
 8001e84:	e005      	b.n	8001e92 <_Z17updateLightEffectv+0xb6>
          }else{
            completeCounter.enable = false;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <_Z17updateLightEffectv+0x114>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
            lightStatus = STANDBY;
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <_Z17updateLightEffectv+0x110>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
          }
          for (int i = 0; i < LED_NUM; i++){
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b53      	cmp	r3, #83	; 0x53
 8001e9a:	dc21      	bgt.n	8001ee0 <_Z17updateLightEffectv+0x104>
            if (completeCounter.count % 20 < 10){
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <_Z17updateLightEffectv+0x114>)
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <_Z17updateLightEffectv+0x118>)
 8001ea2:	fb83 2301 	smull	r2, r3, r3, r1
 8001ea6:	10da      	asrs	r2, r3, #3
 8001ea8:	17cb      	asrs	r3, r1, #31
 8001eaa:	1ad2      	subs	r2, r2, r3
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	1aca      	subs	r2, r1, r3
 8001eb6:	2a09      	cmp	r2, #9
 8001eb8:	dc06      	bgt.n	8001ec8 <_Z17updateLightEffectv+0xec>
              setColor(i, 0, 80, 0);
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2250      	movs	r2, #80	; 0x50
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	6978      	ldr	r0, [r7, #20]
 8001ec2:	f000 fcf9 	bl	80028b8 <_Z8setColorihhh>
 8001ec6:	e005      	b.n	8001ed4 <_Z17updateLightEffectv+0xf8>
            }else{
              setColor(i, 0, 0, 0);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f000 fcf2 	bl	80028b8 <_Z8setColorihhh>
          for (int i = 0; i < LED_NUM; i++){
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e7dc      	b.n	8001e96 <_Z17updateLightEffectv+0xba>
          break;
 8001edc:	bf00      	nop
 8001ede:	e000      	b.n	8001ee2 <_Z17updateLightEffectv+0x106>
            }
          }
          break;
 8001ee0:	bf00      	nop
    }
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000018 	.word	0x20000018
 8001ef0:	20000188 	.word	0x20000188
 8001ef4:	66666667 	.word	0x66666667

08001ef8 <_Z41__static_initialization_and_destruction_0ii>:
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d11e      	bne.n	8001f46 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d119      	bne.n	8001f46 <_Z41__static_initialization_and_destruction_0ii+0x4e>
RGB bodyRGB = RGB(255, 0, 0, 0.3);
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	2200      	movs	r2, #0
 8001f1a:	21ff      	movs	r1, #255	; 0xff
 8001f1c:	480d      	ldr	r0, [pc, #52]	; (8001f54 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001f1e:	f7ff fbd4 	bl	80016ca <_ZN3RGBC1Ehhhf>
RGB headRGB = RGB(255, 140, 0, 0.3);
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2300      	movs	r3, #0
 8001f28:	228c      	movs	r2, #140	; 0x8c
 8001f2a:	21ff      	movs	r1, #255	; 0xff
 8001f2c:	480a      	ldr	r0, [pc, #40]	; (8001f58 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001f2e:	f7ff fbcc 	bl	80016ca <_ZN3RGBC1Ehhhf>
int current_r = 54 + length ;
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3336      	adds	r3, #54	; 0x36
 8001f38:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001f3a:	6013      	str	r3, [r2, #0]
int current_r_2 = 72 + length;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3348      	adds	r3, #72	; 0x48
 8001f42:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	3e99999a 	.word	0x3e99999a
 8001f54:	20000174 	.word	0x20000174
 8001f58:	20000178 	.word	0x20000178
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	2000017c 	.word	0x2000017c
 8001f64:	20000180 	.word	0x20000180

08001f68 <_GLOBAL__sub_I__Z18playStartAnimationv>:
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7ff ffc1 	bl	8001ef8 <_Z41__static_initialization_and_destruction_0ii>
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_ZN6StringC1EPKc>:
    char str[STRING_LEN];
    int len;
    String(){
        len = 0;
    }
    String(const char* s){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
        len = strlen(s);
 8001f82:	6838      	ldr	r0, [r7, #0]
 8001f84:	f7fe f950 	bl	8000228 <strlen>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
        strcpy(str, s);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f00b faa3 	bl	800d4e0 <strcpy>
    }
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_ZN10PulseMotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>:

protected:
    int32_t stepSum = 0;

public:
    PulseMotor(TIM_HandleTypeDef *pTim, uint32_t timChannel, GPIO_TypeDef *pGPIO, uint16_t GPIO_Pin)
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
    {
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fb8:	611a      	str	r2, [r3, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <_ZN10PulseMotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft+0x4c>)
 8001fbe:	615a      	str	r2, [r3, #20]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2247      	movs	r2, #71	; 0x47
 8001fc4:	831a      	strh	r2, [r3, #24]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	61da      	str	r2, [r3, #28]
        this->pTim = pTim;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	601a      	str	r2, [r3, #0]
        this->timChannel = timChannel;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	605a      	str	r2, [r3, #4]
        this->pGPIO = pGPIO;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	609a      	str	r2, [r3, #8]
        this->GPIO_Pin = GPIO_Pin;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8b3a      	ldrh	r2, [r7, #24]
 8001fe2:	819a      	strh	r2, [r3, #12]
    }
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	044aa200 	.word	0x044aa200

08001ff4 <_ZN10PulseMotor12getFrequencyEv>:

    uint16_t getFrequency()
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    {
        return inputFrequency / (prescaler + 1) / (CounterPeriod + 1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	3301      	adds	r3, #1
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	8b12      	ldrh	r2, [r2, #24]
 800200e:	3201      	adds	r2, #1
 8002010:	fbb3 f3f2 	udiv	r3, r3, r2
 8002014:	b29b      	uxth	r3, r3
    }
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <_ZN10PulseMotor12setFrequencyEt>:

    // pulse sending frequency
    void setFrequency(uint16_t frequency)
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
    {
        if (frequency == 0)
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d104      	bne.n	800203c <_ZN10PulseMotor12setFrequencyEt+0x1c>
        {
            prescaler = 500;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002038:	611a      	str	r2, [r3, #16]
            return;
 800203a:	e012      	b.n	8002062 <_ZN10PulseMotor12setFrequencyEt+0x42>
        }
        prescaler = inputFrequency / (CounterPeriod + 1) / frequency - 1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	8b12      	ldrh	r2, [r2, #24]
 8002044:	3201      	adds	r2, #1
 8002046:	fbb3 f2f2 	udiv	r2, r3, r2
 800204a:	887b      	ldrh	r3, [r7, #2]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	1e5a      	subs	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	611a      	str	r2, [r3, #16]
        __HAL_TIM_SET_PRESCALER(pTim, prescaler);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6912      	ldr	r2, [r2, #16]
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <_ZN10PulseMotor12setDirectionEh>:

    // direction: 0 or 1
    void setDirection(uint8_t direction)
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	70fb      	strb	r3, [r7, #3]
    {
        HAL_GPIO_WritePin(pGPIO, GPIO_Pin, direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6898      	ldr	r0, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	8999      	ldrh	r1, [r3, #12]
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <_ZN10PulseMotor12setDirectionEh+0x1e>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <_ZN10PulseMotor12setDirectionEh+0x20>
 8002088:	2300      	movs	r3, #0
 800208a:	461a      	mov	r2, r3
 800208c:	f008 fceb 	bl	800aa66 <HAL_GPIO_WritePin>
    }
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_ZN10PulseMotor5pulseEt>:

    void pulse(uint16_t pulseNum)
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
    {
        // PulseDMABuff[pulseNum] = 0;
        HAL_TIM_PWM_Start_DMA(pTim, timChannel, (uint32_t *)PulseDMABuff, pulseNum);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	887b      	ldrh	r3, [r7, #2]
 80020ae:	4a03      	ldr	r2, [pc, #12]	; (80020bc <_ZN10PulseMotor5pulseEt+0x24>)
 80020b0:	f009 fba2 	bl	800b7f8 <HAL_TIM_PWM_Start_DMA>
    }
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	0800d64c 	.word	0x0800d64c

080020c0 <_ZN10PulseMotor4stepEhm>:
    {
        pulse(pulseNum);
        HAL_Delay((float)pulseNum / getFrequency() * 1000 + 10);
    }

    void step(uint8_t direction, uint32_t stepNum)
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b096      	sub	sp, #88	; 0x58
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	460b      	mov	r3, r1
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	72fb      	strb	r3, [r7, #11]
    {   
        if (stepNum == 0)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d02b      	beq.n	800212c <_ZN10PulseMotor4stepEhm+0x6c>
        {
            return;
        }
        if (stepNum > DMA_BUFFER_SIZE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80020da:	4293      	cmp	r3, r2
 80020dc:	d90c      	bls.n	80020f8 <_ZN10PulseMotor4stepEhm+0x38>
        {
            printToLCD("StepNum too large", 18);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4914      	ldr	r1, [pc, #80]	; (8002134 <_ZN10PulseMotor4stepEhm+0x74>)
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff47 	bl	8001f78 <_ZN6StringC1EPKc>
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	2112      	movs	r1, #18
 80020f0:	4618      	mov	r0, r3
 80020f2:	f007 f851 	bl	8009198 <_Z10printToLCDRK6Stringt>
            return;
 80020f6:	e01a      	b.n	800212e <_ZN10PulseMotor4stepEhm+0x6e>
        }
        stepSum += direction ? stepNum : -stepNum;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	461a      	mov	r2, r3
 80020fe:	7afb      	ldrb	r3, [r7, #11]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <_ZN10PulseMotor4stepEhm+0x4a>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	425b      	negs	r3, r3
 8002108:	e000      	b.n	800210c <_ZN10PulseMotor4stepEhm+0x4c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	61da      	str	r2, [r3, #28]
        setDirection(direction);
 8002114:	7afb      	ldrb	r3, [r7, #11]
 8002116:	4619      	mov	r1, r3
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7ff ffa6 	bl	800206a <_ZN10PulseMotor12setDirectionEh>
        pulse(stepNum);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	b29b      	uxth	r3, r3
 8002122:	4619      	mov	r1, r3
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7ff ffb7 	bl	8002098 <_ZN10PulseMotor5pulseEt>
 800212a:	e000      	b.n	800212e <_ZN10PulseMotor4stepEhm+0x6e>
            return;
 800212c:	bf00      	nop
    }
 800212e:	3758      	adds	r7, #88	; 0x58
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	0800d508 	.word	0x0800d508

08002138 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh>:
    const int maxDistance = 0; // 264 for x, 146 for z, 适用于用电机驱动丝杆
    uint8_t stepDivision = 1;
    float stepAngle = 1.8; // degree, depends on motor type, the version we are using is 1.8
    float mmPerLap = 2;    // mm, depends on the mechanical structure of 丝杆

    uint32_t getStepCountFromTargetPosition(float targetPosition, uint8_t &direction)
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
    {
        float currentPosition = getPosition();
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f8e5 	bl	8002314 <_ZN14SERVO42C_Pulse11getPositionEv>
 800214a:	61f8      	str	r0, [r7, #28]
        float error = targetPosition - currentPosition;
 800214c:	69f9      	ldr	r1, [r7, #28]
 800214e:	68b8      	ldr	r0, [r7, #8]
 8002150:	f7fe fd64 	bl	8000c1c <__aeabi_fsub>
 8002154:	4603      	mov	r3, r0
 8002156:	61bb      	str	r3, [r7, #24]
        direction = error > 0 ? 1 : 0;
 8002158:	f04f 0100 	mov.w	r1, #0
 800215c:	69b8      	ldr	r0, [r7, #24]
 800215e:	f7ff f823 	bl	80011a8 <__aeabi_fcmpgt>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh+0x34>
 8002168:	2201      	movs	r2, #1
 800216a:	e000      	b.n	800216e <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh+0x36>
 800216c:	2200      	movs	r2, #0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	701a      	strb	r2, [r3, #0]
        error = error > 0 ? error : -error;
 8002172:	f04f 0100 	mov.w	r1, #0
 8002176:	69b8      	ldr	r0, [r7, #24]
 8002178:	f7ff f816 	bl	80011a8 <__aeabi_fcmpgt>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh+0x4e>
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	e002      	b.n	800218c <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh+0x54>
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800218c:	61bb      	str	r3, [r7, #24]
        uint32_t stepCount = error / (mmPerLap) * (360 / stepAngle) * stepDivision;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	4619      	mov	r1, r3
 8002194:	69b8      	ldr	r0, [r7, #24]
 8002196:	f7fe feff 	bl	8000f98 <__aeabi_fdiv>
 800219a:	4603      	mov	r3, r0
 800219c:	461c      	mov	r4, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	4619      	mov	r1, r3
 80021a4:	480f      	ldr	r0, [pc, #60]	; (80021e4 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh+0xac>)
 80021a6:	f7fe fef7 	bl	8000f98 <__aeabi_fdiv>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4619      	mov	r1, r3
 80021ae:	4620      	mov	r0, r4
 80021b0:	f7fe fe3e 	bl	8000e30 <__aeabi_fmul>
 80021b4:	4603      	mov	r3, r0
 80021b6:	461c      	mov	r4, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fde2 	bl	8000d88 <__aeabi_i2f>
 80021c4:	4603      	mov	r3, r0
 80021c6:	4619      	mov	r1, r3
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7fe fe31 	bl	8000e30 <__aeabi_fmul>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff f82f 	bl	8001234 <__aeabi_f2uiz>
 80021d6:	4603      	mov	r3, r0
 80021d8:	617b      	str	r3, [r7, #20]
        return stepCount;
 80021da:	697b      	ldr	r3, [r7, #20]
    }
 80021dc:	4618      	mov	r0, r3
 80021de:	3724      	adds	r7, #36	; 0x24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd90      	pop	{r4, r7, pc}
 80021e4:	43b40000 	.word	0x43b40000

080021e8 <_ZN14SERVO42C_Pulse16frequencyToSpeedEt>:
    {
        float rpm = linearSpeed * 60 / mmPerLap;
        return getSpeedParamOfRPM(rpm);
    }

    float frequencyToSpeed(uint16_t frequency)
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
    {
        // frequency是每秒脉冲数，speed是每秒毫米数
        // 所以需要返回一秒内走过的distance，一秒内的step数就是frequency
        return stepcountToDistance(frequency);
 80021f4:	887b      	ldrh	r3, [r7, #2]
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f833 	bl	8002264 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 80021fe:	4603      	mov	r3, r0
    }
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_ZN14SERVO42C_Pulse16speedToFrequencyEf>:

    float speedToFrequency(float speed)
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
    {
        float rps = speed / mmPerLap;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	4619      	mov	r1, r3
 8002218:	6838      	ldr	r0, [r7, #0]
 800221a:	f7fe febd 	bl	8000f98 <__aeabi_fdiv>
 800221e:	4603      	mov	r3, r0
 8002220:	60fb      	str	r3, [r7, #12]
        return rps * 360 / stepAngle * stepDivision;
 8002222:	490f      	ldr	r1, [pc, #60]	; (8002260 <_ZN14SERVO42C_Pulse16speedToFrequencyEf+0x58>)
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f7fe fe03 	bl	8000e30 <__aeabi_fmul>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	4619      	mov	r1, r3
 8002234:	4610      	mov	r0, r2
 8002236:	f7fe feaf 	bl	8000f98 <__aeabi_fdiv>
 800223a:	4603      	mov	r3, r0
 800223c:	461c      	mov	r4, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fd9f 	bl	8000d88 <__aeabi_i2f>
 800224a:	4603      	mov	r3, r0
 800224c:	4619      	mov	r1, r3
 800224e:	4620      	mov	r0, r4
 8002250:	f7fe fdee 	bl	8000e30 <__aeabi_fmul>
 8002254:	4603      	mov	r3, r0
    }
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}
 800225e:	bf00      	nop
 8002260:	43b40000 	.word	0x43b40000

08002264 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>:

public:
    bool stepCompleted = false;
    float stepcountToDistance(uint32_t stepCount)
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
    {
        return stepCount / (float)stepDivision * stepAngle / 360 * mmPerLap;
 800226e:	6838      	ldr	r0, [r7, #0]
 8002270:	f7fe fd86 	bl	8000d80 <__aeabi_ui2f>
 8002274:	4604      	mov	r4, r0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fd7f 	bl	8000d80 <__aeabi_ui2f>
 8002282:	4603      	mov	r3, r0
 8002284:	4619      	mov	r1, r3
 8002286:	4620      	mov	r0, r4
 8002288:	f7fe fe86 	bl	8000f98 <__aeabi_fdiv>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f7fe fdca 	bl	8000e30 <__aeabi_fmul>
 800229c:	4603      	mov	r3, r0
 800229e:	4908      	ldr	r1, [pc, #32]	; (80022c0 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm+0x5c>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fe79 	bl	8000f98 <__aeabi_fdiv>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	4619      	mov	r1, r3
 80022b0:	4610      	mov	r0, r2
 80022b2:	f7fe fdbd 	bl	8000e30 <__aeabi_fmul>
 80022b6:	4603      	mov	r3, r0
    }
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}
 80022c0:	43b40000 	.word	0x43b40000

080022c4 <_ZN14SERVO42C_PulseC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>:
    
    SERVO42C_Pulse(TIM_HandleTypeDef *pTim, uint32_t timChannel, GPIO_TypeDef *pGPIO, uint16_t GPIO_Pin) : PulseMotor(pTim, timChannel, pGPIO, GPIO_Pin) {}
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	8b3b      	ldrh	r3, [r7, #24]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	f7ff fe61 	bl	8001fa4 <_ZN10PulseMotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a07      	ldr	r2, [pc, #28]	; (8002310 <_ZN14SERVO42C_PulseC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft+0x4c>)
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	3fe66666 	.word	0x3fe66666

08002314 <_ZN14SERVO42C_Pulse11getPositionEv>:

    // position: distance in mm from zero position
    // zero position: where the motor is set
    float getPosition()
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    {
        return (float)stepSum / stepDivision * stepAngle / 360 * mmPerLap;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fd31 	bl	8000d88 <__aeabi_i2f>
 8002326:	4604      	mov	r4, r0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fd2a 	bl	8000d88 <__aeabi_i2f>
 8002334:	4603      	mov	r3, r0
 8002336:	4619      	mov	r1, r3
 8002338:	4620      	mov	r0, r4
 800233a:	f7fe fe2d 	bl	8000f98 <__aeabi_fdiv>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f7fe fd71 	bl	8000e30 <__aeabi_fmul>
 800234e:	4603      	mov	r3, r0
 8002350:	4908      	ldr	r1, [pc, #32]	; (8002374 <_ZN14SERVO42C_Pulse11getPositionEv+0x60>)
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fe20 	bl	8000f98 <__aeabi_fdiv>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f7fe fd64 	bl	8000e30 <__aeabi_fmul>
 8002368:	4603      	mov	r3, r0
    }
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	bf00      	nop
 8002374:	43b40000 	.word	0x43b40000

08002378 <_ZN14SERVO42C_Pulse8getSpeedEv>:
        uint8_t direction = 0;
        uint32_t stepCount = getStepCountFromTargetPosition(position, direction);
        step(direction, stepCount);
    }

    float getSpeed()
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    {
        return frequencyToSpeed(getFrequency());
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fe36 	bl	8001ff4 <_ZN10PulseMotor12getFrequencyEv>
 8002388:	4603      	mov	r3, r0
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff2b 	bl	80021e8 <_ZN14SERVO42C_Pulse16frequencyToSpeedEt>
 8002392:	4603      	mov	r3, r0
    }
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	0000      	movs	r0, r0
	...

080023a0 <_ZN14SERVO42C_Pulse8setSpeedEf>:
    void setSpeed(float speed)
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
    {
        if (speed > 0.001)
 80023aa:	6838      	ldr	r0, [r7, #0]
 80023ac:	f7fe f8a8 	bl	8000500 <__aeabi_f2d>
 80023b0:	a30d      	add	r3, pc, #52	; (adr r3, 80023e8 <_ZN14SERVO42C_Pulse8setSpeedEf+0x48>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe fb8b 	bl	8000ad0 <__aeabi_dcmpgt>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d100      	bne.n	80023c2 <_ZN14SERVO42C_Pulse8setSpeedEf+0x22>
            setFrequency(speedToFrequency(speed));
    }
 80023c0:	e00e      	b.n	80023e0 <_ZN14SERVO42C_Pulse8setSpeedEf+0x40>
            setFrequency(speedToFrequency(speed));
 80023c2:	687c      	ldr	r4, [r7, #4]
 80023c4:	6839      	ldr	r1, [r7, #0]
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff1e 	bl	8002208 <_ZN14SERVO42C_Pulse16speedToFrequencyEf>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe ff30 	bl	8001234 <__aeabi_f2uiz>
 80023d4:	4603      	mov	r3, r0
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	4619      	mov	r1, r3
 80023da:	4620      	mov	r0, r4
 80023dc:	f7ff fe20 	bl	8002020 <_ZN10PulseMotor12setFrequencyEt>
    }
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}
 80023e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80023ec:	3f50624d 	.word	0x3f50624d

080023f0 <_ZN13SERVO42C_UARTC1EhP18UART_HandleTypeDefRK14SERVO42C_Pulse>:
        }
        return data;
    }

public:
    SERVO42C_UART(uint8_t address, UART_HandleTypeDef* pUART, const SERVO42C_Pulse& pulse) : address(address), pUART(pUART), SERVO42C_Pulse(pulse){}
 80023f0:	b4b0      	push	{r4, r5, r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	460b      	mov	r3, r1
 80023fe:	72fb      	strb	r3, [r7, #11]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	4614      	mov	r4, r2
 8002406:	461d      	mov	r5, r3
 8002408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800240a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800240c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800240e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002414:	682b      	ldr	r3, [r5, #0]
 8002416:	7023      	strb	r3, [r4, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	635a      	str	r2, [r3, #52]	; 0x34
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	7afa      	ldrb	r2, [r7, #11]
 8002422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	641a      	str	r2, [r3, #64]	; 0x40
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	64da      	str	r2, [r3, #76]	; 0x4c
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2232      	movs	r2, #50	; 0x32
 800245a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bcb0      	pop	{r4, r5, r7}
 8002468:	4770      	bx	lr

0800246a <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f00a ff40 	bl	800d310 <sqrtf>
 8002490:	4603      	mov	r3, r0
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	0000      	movs	r0, r0
 800249c:	0000      	movs	r0, r0
	...

080024a0 <_Z6step3dmhmhmhf>:
SERVO42C_UART yServo(0xe1, &huart2, yPulseMotor);
SERVO42C_UART zServo(0xe2, &huart2, zPulseMotor);
// speed: mm/s
// WARNING: max stepCount = DMA_BUFFER_SIZE for each axis!!!!
void step3d(uint32_t xStepCount, uint8_t xDir, uint32_t yStepCount, uint8_t yDir, uint32_t zStepCount, uint8_t zDir, float speed)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b091      	sub	sp, #68	; 0x44
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	461a      	mov	r2, r3
 80024ac:	460b      	mov	r3, r1
 80024ae:	72fb      	strb	r3, [r7, #11]
 80024b0:	4613      	mov	r3, r2
 80024b2:	72bb      	strb	r3, [r7, #10]
    float xDistance = xPulseMotor.stepcountToDistance(xStepCount);
 80024b4:	68f9      	ldr	r1, [r7, #12]
 80024b6:	487c      	ldr	r0, [pc, #496]	; (80026a8 <_Z6step3dmhmhmhf+0x208>)
 80024b8:	f7ff fed4 	bl	8002264 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 80024bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    float yDistance = yPulseMotor.stepcountToDistance(yStepCount);
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	487a      	ldr	r0, [pc, #488]	; (80026ac <_Z6step3dmhmhmhf+0x20c>)
 80024c2:	f7ff fecf 	bl	8002264 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 80024c6:	63b8      	str	r0, [r7, #56]	; 0x38
    float zDistance = zPulseMotor.stepcountToDistance(zStepCount);
 80024c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80024ca:	4879      	ldr	r0, [pc, #484]	; (80026b0 <_Z6step3dmhmhmhf+0x210>)
 80024cc:	f7ff feca 	bl	8002264 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 80024d0:	6378      	str	r0, [r7, #52]	; 0x34
    float linearDistance = sqrt(xDistance * xDistance + yDistance * yDistance + zDistance * zDistance); // mm
 80024d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024d6:	f7fe fcab 	bl	8000e30 <__aeabi_fmul>
 80024da:	4603      	mov	r3, r0
 80024dc:	461c      	mov	r4, r3
 80024de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80024e2:	f7fe fca5 	bl	8000e30 <__aeabi_fmul>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4619      	mov	r1, r3
 80024ea:	4620      	mov	r0, r4
 80024ec:	f7fe fb98 	bl	8000c20 <__addsf3>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461c      	mov	r4, r3
 80024f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024f8:	f7fe fc9a 	bl	8000e30 <__aeabi_fmul>
 80024fc:	4603      	mov	r3, r0
 80024fe:	4619      	mov	r1, r3
 8002500:	4620      	mov	r0, r4
 8002502:	f7fe fb8d 	bl	8000c20 <__addsf3>
 8002506:	4603      	mov	r3, r0
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ffba 	bl	8002482 <_ZSt4sqrtf>
 800250e:	6338      	str	r0, [r7, #48]	; 0x30
    if (abs(linearDistance) < 0.0001)
 8002510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002512:	f7ff ffaa 	bl	800246a <_ZSt3absf>
 8002516:	4603      	mov	r3, r0
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd fff1 	bl	8000500 <__aeabi_f2d>
 800251e:	2301      	movs	r3, #1
 8002520:	461c      	mov	r4, r3
 8002522:	a35d      	add	r3, pc, #372	; (adr r3, 8002698 <_Z6step3dmhmhmhf+0x1f8>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	f7fe fab4 	bl	8000a94 <__aeabi_dcmplt>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <_Z6step3dmhmhmhf+0x96>
 8002532:	2300      	movs	r3, #0
 8002534:	461c      	mov	r4, r3
 8002536:	b2e3      	uxtb	r3, r4
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 80a9 	bne.w	8002690 <_Z6step3dmhmhmhf+0x1f0>
    {
        return;
    }
    float timeConsumed = linearDistance / speed;
 800253e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002542:	f7fe fd29 	bl	8000f98 <__aeabi_fdiv>
 8002546:	4603      	mov	r3, r0
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
    float speedX = xPulseMotor.stepcountToDistance(xStepCount) / timeConsumed;
 800254a:	68f9      	ldr	r1, [r7, #12]
 800254c:	4856      	ldr	r0, [pc, #344]	; (80026a8 <_Z6step3dmhmhmhf+0x208>)
 800254e:	f7ff fe89 	bl	8002264 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 8002552:	4603      	mov	r3, r0
 8002554:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fd1e 	bl	8000f98 <__aeabi_fdiv>
 800255c:	4603      	mov	r3, r0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
    float speedY = yPulseMotor.stepcountToDistance(yStepCount) / timeConsumed;
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4852      	ldr	r0, [pc, #328]	; (80026ac <_Z6step3dmhmhmhf+0x20c>)
 8002564:	f7ff fe7e 	bl	8002264 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 8002568:	4603      	mov	r3, r0
 800256a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fd13 	bl	8000f98 <__aeabi_fdiv>
 8002572:	4603      	mov	r3, r0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
    float speedZ = zPulseMotor.stepcountToDistance(zStepCount) / timeConsumed;
 8002576:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002578:	484d      	ldr	r0, [pc, #308]	; (80026b0 <_Z6step3dmhmhmhf+0x210>)
 800257a:	f7ff fe73 	bl	8002264 <_ZN14SERVO42C_Pulse19stepcountToDistanceEm>
 800257e:	4603      	mov	r3, r0
 8002580:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fd08 	bl	8000f98 <__aeabi_fdiv>
 8002588:	4603      	mov	r3, r0
 800258a:	623b      	str	r3, [r7, #32]
    
    float originalSpeedX = xPulseMotor.getSpeed();
 800258c:	4846      	ldr	r0, [pc, #280]	; (80026a8 <_Z6step3dmhmhmhf+0x208>)
 800258e:	f7ff fef3 	bl	8002378 <_ZN14SERVO42C_Pulse8getSpeedEv>
 8002592:	61f8      	str	r0, [r7, #28]
    float originalSpeedY = yPulseMotor.getSpeed();
 8002594:	4845      	ldr	r0, [pc, #276]	; (80026ac <_Z6step3dmhmhmhf+0x20c>)
 8002596:	f7ff feef 	bl	8002378 <_ZN14SERVO42C_Pulse8getSpeedEv>
 800259a:	61b8      	str	r0, [r7, #24]
    float originalSpeedZ = zPulseMotor.getSpeed();
 800259c:	4844      	ldr	r0, [pc, #272]	; (80026b0 <_Z6step3dmhmhmhf+0x210>)
 800259e:	f7ff feeb 	bl	8002378 <_ZN14SERVO42C_Pulse8getSpeedEv>
 80025a2:	6178      	str	r0, [r7, #20]

    xPulseMotor.setSpeed(speedX);
 80025a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025a6:	4840      	ldr	r0, [pc, #256]	; (80026a8 <_Z6step3dmhmhmhf+0x208>)
 80025a8:	f7ff fefa 	bl	80023a0 <_ZN14SERVO42C_Pulse8setSpeedEf>
    yPulseMotor.setSpeed(speedY);
 80025ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ae:	483f      	ldr	r0, [pc, #252]	; (80026ac <_Z6step3dmhmhmhf+0x20c>)
 80025b0:	f7ff fef6 	bl	80023a0 <_ZN14SERVO42C_Pulse8setSpeedEf>
    zPulseMotor.setSpeed(speedZ);
 80025b4:	6a39      	ldr	r1, [r7, #32]
 80025b6:	483e      	ldr	r0, [pc, #248]	; (80026b0 <_Z6step3dmhmhmhf+0x210>)
 80025b8:	f7ff fef2 	bl	80023a0 <_ZN14SERVO42C_Pulse8setSpeedEf>

    xStepCompleted = xStepCount > 0 ? 0: 1;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <_Z6step3dmhmhmhf+0x214>)
 80025cc:	701a      	strb	r2, [r3, #0]
    yStepCompleted = yStepCount > 0 ? 0: 1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <_Z6step3dmhmhmhf+0x218>)
 80025de:	701a      	strb	r2, [r3, #0]
    zStepCompleted = zStepCount > 0 ? 0: 1;
 80025e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <_Z6step3dmhmhmhf+0x21c>)
 80025f0:	701a      	strb	r2, [r3, #0]

    xPulseMotor.step(xDir, xStepCount);
 80025f2:	7afb      	ldrb	r3, [r7, #11]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4619      	mov	r1, r3
 80025f8:	482b      	ldr	r0, [pc, #172]	; (80026a8 <_Z6step3dmhmhmhf+0x208>)
 80025fa:	f7ff fd61 	bl	80020c0 <_ZN10PulseMotor4stepEhm>
    yPulseMotor.step(yDir, yStepCount);
 80025fe:	7abb      	ldrb	r3, [r7, #10]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4619      	mov	r1, r3
 8002604:	4829      	ldr	r0, [pc, #164]	; (80026ac <_Z6step3dmhmhmhf+0x20c>)
 8002606:	f7ff fd5b 	bl	80020c0 <_ZN10PulseMotor4stepEhm>
    zPulseMotor.step(zDir, zStepCount);
 800260a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800260e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002610:	4619      	mov	r1, r3
 8002612:	4827      	ldr	r0, [pc, #156]	; (80026b0 <_Z6step3dmhmhmhf+0x210>)
 8002614:	f7ff fd54 	bl	80020c0 <_ZN10PulseMotor4stepEhm>

    
    while (!xStepCompleted || !yStepCompleted || !zStepCompleted)
 8002618:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <_Z6step3dmhmhmhf+0x214>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <_Z6step3dmhmhmhf+0x190>
 8002620:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <_Z6step3dmhmhmhf+0x218>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <_Z6step3dmhmhmhf+0x190>
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <_Z6step3dmhmhmhf+0x21c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <_Z6step3dmhmhmhf+0x196>
    {
        updateLightEffect();
 8002630:	f7ff fbd4 	bl	8001ddc <_Z17updateLightEffectv>
    while (!xStepCompleted || !yStepCompleted || !zStepCompleted)
 8002634:	e7f0      	b.n	8002618 <_Z6step3dmhmhmhf+0x178>
    }

    HAL_Delay(5 + (xStepCount + yStepCount + zStepCount) * 0.02);
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	441a      	add	r2, r3
 800263c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263e:	4413      	add	r3, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd ff3b 	bl	80004bc <__aeabi_ui2d>
 8002646:	a316      	add	r3, pc, #88	; (adr r3, 80026a0 <_Z6step3dmhmhmhf+0x200>)
 8002648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264c:	f7fd ffb0 	bl	80005b0 <__aeabi_dmul>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <_Z6step3dmhmhmhf+0x220>)
 800265e:	f7fd fdf1 	bl	8000244 <__adddf3>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	f7fe fa63 	bl	8000b34 <__aeabi_d2uiz>
 800266e:	4603      	mov	r3, r0
 8002670:	4618      	mov	r0, r3
 8002672:	f007 f8b7 	bl	80097e4 <HAL_Delay>

    // HAL_Delay(timeConsumed * 1000 * 1.2 + 25);// 1.2 is a factor to make sure the motor has enough time to 
    xPulseMotor.setSpeed(originalSpeedX);
 8002676:	69f9      	ldr	r1, [r7, #28]
 8002678:	480b      	ldr	r0, [pc, #44]	; (80026a8 <_Z6step3dmhmhmhf+0x208>)
 800267a:	f7ff fe91 	bl	80023a0 <_ZN14SERVO42C_Pulse8setSpeedEf>
    yPulseMotor.setSpeed(originalSpeedY);
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	480a      	ldr	r0, [pc, #40]	; (80026ac <_Z6step3dmhmhmhf+0x20c>)
 8002682:	f7ff fe8d 	bl	80023a0 <_ZN14SERVO42C_Pulse8setSpeedEf>
    zPulseMotor.setSpeed(originalSpeedZ); 
 8002686:	6979      	ldr	r1, [r7, #20]
 8002688:	4809      	ldr	r0, [pc, #36]	; (80026b0 <_Z6step3dmhmhmhf+0x210>)
 800268a:	f7ff fe89 	bl	80023a0 <_ZN14SERVO42C_Pulse8setSpeedEf>
 800268e:	e000      	b.n	8002692 <_Z6step3dmhmhmhf+0x1f2>
        return;
 8002690:	bf00      	nop
}
 8002692:	3744      	adds	r7, #68	; 0x44
 8002694:	46bd      	mov	sp, r7
 8002696:	bd90      	pop	{r4, r7, pc}
 8002698:	eb1c432d 	.word	0xeb1c432d
 800269c:	3f1a36e2 	.word	0x3f1a36e2
 80026a0:	47ae147b 	.word	0x47ae147b
 80026a4:	3f947ae1 	.word	0x3f947ae1
 80026a8:	20000190 	.word	0x20000190
 80026ac:	200001c4 	.word	0x200001c4
 80026b0:	200001f8 	.word	0x200001f8
 80026b4:	20000328 	.word	0x20000328
 80026b8:	20000329 	.word	0x20000329
 80026bc:	2000032a 	.word	0x2000032a
 80026c0:	40140000 	.word	0x40140000

080026c4 <_Z13setPosition3dffff>:

    HAL_Delay(timeConsumed * 1000 * 1.2 + 10); ////1.2 is a factor to make sure the motor has enough time to finish the movement
}

void setPosition3d(float x, float y, float z, float speed)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af04      	add	r7, sp, #16
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
    uint8_t xDir = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	74fb      	strb	r3, [r7, #19]
    uint32_t xStepCount = xPulseMotor.getStepCountFromTargetPosition(x, xDir);
 80026d6:	f107 0313 	add.w	r3, r7, #19
 80026da:	461a      	mov	r2, r3
 80026dc:	68f9      	ldr	r1, [r7, #12]
 80026de:	4814      	ldr	r0, [pc, #80]	; (8002730 <_Z13setPosition3dffff+0x6c>)
 80026e0:	f7ff fd2a 	bl	8002138 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh>
 80026e4:	61f8      	str	r0, [r7, #28]
    uint8_t yDir = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	74bb      	strb	r3, [r7, #18]
    uint32_t yStepCount = yPulseMotor.getStepCountFromTargetPosition(y, yDir);
 80026ea:	f107 0312 	add.w	r3, r7, #18
 80026ee:	461a      	mov	r2, r3
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	4810      	ldr	r0, [pc, #64]	; (8002734 <_Z13setPosition3dffff+0x70>)
 80026f4:	f7ff fd20 	bl	8002138 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh>
 80026f8:	61b8      	str	r0, [r7, #24]
    uint8_t zDir = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	747b      	strb	r3, [r7, #17]
    uint32_t zStepCount = zPulseMotor.getStepCountFromTargetPosition(z, zDir);
 80026fe:	f107 0311 	add.w	r3, r7, #17
 8002702:	461a      	mov	r2, r3
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	480c      	ldr	r0, [pc, #48]	; (8002738 <_Z13setPosition3dffff+0x74>)
 8002708:	f7ff fd16 	bl	8002138 <_ZN14SERVO42C_Pulse30getStepCountFromTargetPositionEfRh>
 800270c:	6178      	str	r0, [r7, #20]
    step3d(xStepCount, xDir, yStepCount, yDir, zStepCount, zDir, speed);
 800270e:	7cf9      	ldrb	r1, [r7, #19]
 8002710:	7cb8      	ldrb	r0, [r7, #18]
 8002712:	7c7b      	ldrb	r3, [r7, #17]
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	9202      	str	r2, [sp, #8]
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4603      	mov	r3, r0
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	69f8      	ldr	r0, [r7, #28]
 8002724:	f7ff febc 	bl	80024a0 <_Z6step3dmhmhmhf>
 8002728:	bf00      	nop
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000190 	.word	0x20000190
 8002734:	200001c4 	.word	0x200001c4
 8002738:	200001f8 	.word	0x200001f8

0800273c <_Z41__static_initialization_and_destruction_0ii>:
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af02      	add	r7, sp, #8
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d12e      	bne.n	80027aa <_Z41__static_initialization_and_destruction_0ii+0x6e>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002752:	4293      	cmp	r3, r2
 8002754:	d129      	bne.n	80027aa <_Z41__static_initialization_and_destruction_0ii+0x6e>
SERVO42C_Pulse xPulseMotor(&htim3, TIM_CHANNEL_1, GPIOA, GPIO_PIN_4); // tim, tim channel, dir gpio, dir gpio pin
 8002756:	2310      	movs	r3, #16
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800275c:	2200      	movs	r2, #0
 800275e:	4916      	ldr	r1, [pc, #88]	; (80027b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002760:	4816      	ldr	r0, [pc, #88]	; (80027bc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002762:	f7ff fdaf 	bl	80022c4 <_ZN14SERVO42C_PulseC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>
SERVO42C_Pulse yPulseMotor(&htim4, TIM_CHANNEL_1, GPIOB, GPIO_PIN_7);
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800276c:	2200      	movs	r2, #0
 800276e:	4915      	ldr	r1, [pc, #84]	; (80027c4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002770:	4815      	ldr	r0, [pc, #84]	; (80027c8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002772:	f7ff fda7 	bl	80022c4 <_ZN14SERVO42C_PulseC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>
SERVO42C_Pulse zPulseMotor(&htim1, TIM_CHANNEL_1, GPIOA, GPIO_PIN_7);
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800277c:	2200      	movs	r2, #0
 800277e:	4913      	ldr	r1, [pc, #76]	; (80027cc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002780:	4813      	ldr	r0, [pc, #76]	; (80027d0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002782:	f7ff fd9f 	bl	80022c4 <_ZN14SERVO42C_PulseC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeft>
SERVO42C_UART xServo(0xe0, &huart2, xPulseMotor);
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002788:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800278a:	21e0      	movs	r1, #224	; 0xe0
 800278c:	4812      	ldr	r0, [pc, #72]	; (80027d8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800278e:	f7ff fe2f 	bl	80023f0 <_ZN13SERVO42C_UARTC1EhP18UART_HandleTypeDefRK14SERVO42C_Pulse>
SERVO42C_UART yServo(0xe1, &huart2, yPulseMotor);
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002794:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002796:	21e1      	movs	r1, #225	; 0xe1
 8002798:	4810      	ldr	r0, [pc, #64]	; (80027dc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800279a:	f7ff fe29 	bl	80023f0 <_ZN13SERVO42C_UARTC1EhP18UART_HandleTypeDefRK14SERVO42C_Pulse>
SERVO42C_UART zServo(0xe2, &huart2, zPulseMotor);
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80027a0:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80027a2:	21e2      	movs	r1, #226	; 0xe2
 80027a4:	480e      	ldr	r0, [pc, #56]	; (80027e0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80027a6:	f7ff fe23 	bl	80023f0 <_ZN13SERVO42C_UARTC1EhP18UART_HandleTypeDefRK14SERVO42C_Pulse>
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40010800 	.word	0x40010800
 80027b8:	2000db94 	.word	0x2000db94
 80027bc:	20000190 	.word	0x20000190
 80027c0:	40010c00 	.word	0x40010c00
 80027c4:	2000dbd4 	.word	0x2000dbd4
 80027c8:	200001c4 	.word	0x200001c4
 80027cc:	2000db14 	.word	0x2000db14
 80027d0:	200001f8 	.word	0x200001f8
 80027d4:	2000dde8 	.word	0x2000dde8
 80027d8:	2000022c 	.word	0x2000022c
 80027dc:	20000280 	.word	0x20000280
 80027e0:	200002d4 	.word	0x200002d4

080027e4 <_GLOBAL__sub_I_PulseDMABuff>:
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027ec:	2001      	movs	r0, #1
 80027ee:	f7ff ffa5 	bl	800273c <_Z41__static_initialization_and_destruction_0ii>
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <_ZNK3RGB13toBitSequenceEPm>:


bool isInited = false;

void RGB::toBitSequence(uint32_t *bitSequence) const
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 8; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b07      	cmp	r3, #7
 8002806:	dc41      	bgt.n	800288c <_ZNK3RGB13toBitSequenceEPm+0x98>
    {
        // Total counter for timer is 5 with period around 1us
        // hence 4/5 will be recognized as 1, 1/5 will be recognized as 0 (4/5 and 1/5 for duty cycle)
        // check manuals of ws2812 for more details
        bitSequence[i]      = (green & (1 << (7 - i))) ? 4 : 1;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f1c3 0307 	rsb	r3, r3, #7
 8002814:	fa42 f303 	asr.w	r3, r2, r3
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <_ZNK3RGB13toBitSequenceEPm+0x30>
 8002820:	2204      	movs	r2, #4
 8002822:	e000      	b.n	8002826 <_ZNK3RGB13toBitSequenceEPm+0x32>
 8002824:	2201      	movs	r2, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	6839      	ldr	r1, [r7, #0]
 800282c:	440b      	add	r3, r1
 800282e:	601a      	str	r2, [r3, #0]
        bitSequence[i + 8]  = (red & (1 << (7 - i))) ? 4 : 1;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	785b      	ldrb	r3, [r3, #1]
 8002834:	461a      	mov	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f1c3 0307 	rsb	r3, r3, #7
 800283c:	fa42 f303 	asr.w	r3, r2, r3
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <_ZNK3RGB13toBitSequenceEPm+0x58>
 8002848:	2204      	movs	r2, #4
 800284a:	e000      	b.n	800284e <_ZNK3RGB13toBitSequenceEPm+0x5a>
 800284c:	2201      	movs	r2, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3308      	adds	r3, #8
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	6839      	ldr	r1, [r7, #0]
 8002856:	440b      	add	r3, r1
 8002858:	601a      	str	r2, [r3, #0]
        bitSequence[i + 16] = (blue & (1 << (7 - i))) ? 4 : 1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	789b      	ldrb	r3, [r3, #2]
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	fa42 f303 	asr.w	r3, r2, r3
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <_ZNK3RGB13toBitSequenceEPm+0x82>
 8002872:	2204      	movs	r2, #4
 8002874:	e000      	b.n	8002878 <_ZNK3RGB13toBitSequenceEPm+0x84>
 8002876:	2201      	movs	r2, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3310      	adds	r3, #16
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	6839      	ldr	r1, [r7, #0]
 8002880:	440b      	add	r3, r1
 8002882:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	e7ba      	b.n	8002802 <_ZNK3RGB13toBitSequenceEPm+0xe>
    }
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
	...

08002898 <_Z4initv>:

void init() { HAL_TIM_PWM_Start_DMA(&WS2812_TIM, WS2812_TIM_CHANNEL, CCRDMABuff, LED_NUM * 24 + RESET_COUNT); }
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
 800289c:	f44f 6303 	mov.w	r3, #2096	; 0x830
 80028a0:	4a03      	ldr	r2, [pc, #12]	; (80028b0 <_Z4initv+0x18>)
 80028a2:	2100      	movs	r1, #0
 80028a4:	4803      	ldr	r0, [pc, #12]	; (80028b4 <_Z4initv+0x1c>)
 80028a6:	f008 ffa7 	bl	800b7f8 <HAL_TIM_PWM_Start_DMA>
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000032c 	.word	0x2000032c
 80028b4:	2000dc54 	.word	0x2000dc54

080028b8 <_Z8setColorihhh>:


void setColor(int index, unsigned char r, unsigned char g, unsigned char b)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	4608      	mov	r0, r1
 80028c2:	4611      	mov	r1, r2
 80028c4:	461a      	mov	r2, r3
 80028c6:	4603      	mov	r3, r0
 80028c8:	70fb      	strb	r3, [r7, #3]
 80028ca:	460b      	mov	r3, r1
 80028cc:	70bb      	strb	r3, [r7, #2]
 80028ce:	4613      	mov	r3, r2
 80028d0:	707b      	strb	r3, [r7, #1]
    if (!isInited)
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <_Z8setColorihhh+0x64>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	f083 0301 	eor.w	r3, r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <_Z8setColorihhh+0x32>
    {
        init();
 80028e0:	f7ff ffda 	bl	8002898 <_Z4initv>
        isInited = true;
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <_Z8setColorihhh+0x64>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
    }
    RGB rgb(r, g, b);
 80028ea:	787b      	ldrb	r3, [r7, #1]
 80028ec:	78ba      	ldrb	r2, [r7, #2]
 80028ee:	78f9      	ldrb	r1, [r7, #3]
 80028f0:	f107 000c 	add.w	r0, r7, #12
 80028f4:	f7fe fecd 	bl	8001692 <_ZN3RGBC1Ehhh>
    rgb.toBitSequence(CCRDMABuff + index * 24);
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	015b      	lsls	r3, r3, #5
 8002902:	461a      	mov	r2, r3
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <_Z8setColorihhh+0x68>)
 8002906:	441a      	add	r2, r3
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ff70 	bl	80027f4 <_ZNK3RGB13toBitSequenceEPm>
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	2000032b 	.word	0x2000032b
 8002920:	2000032c 	.word	0x2000032c

08002924 <_Z8setColori3RGB>:
void setColor(int index, RGB color)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
    if (!isInited)
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <_Z8setColori3RGB+0x44>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	f083 0301 	eor.w	r3, r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <_Z8setColori3RGB+0x22>
    {
        init();
 800293c:	f7ff ffac 	bl	8002898 <_Z4initv>
        isInited = true;
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <_Z8setColori3RGB+0x44>)
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
    }
    color.toBitSequence(CCRDMABuff + index * 24);
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	015b      	lsls	r3, r3, #5
 8002950:	461a      	mov	r2, r3
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <_Z8setColori3RGB+0x48>)
 8002954:	441a      	add	r2, r3
 8002956:	463b      	mov	r3, r7
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff4a 	bl	80027f4 <_ZNK3RGB13toBitSequenceEPm>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	2000032b 	.word	0x2000032b
 800296c:	2000032c 	.word	0x2000032c

08002970 <_Z5blanki>:

void blank(int index)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 24; i++)
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b17      	cmp	r3, #23
 8002980:	dc18      	bgt.n	80029b4 <_Z5blanki+0x44>
    {
        RGB rgb(0, 0, 0);
 8002982:	f107 0008 	add.w	r0, r7, #8
 8002986:	2300      	movs	r3, #0
 8002988:	2200      	movs	r2, #0
 800298a:	2100      	movs	r1, #0
 800298c:	f7fe fe81 	bl	8001692 <_ZN3RGBC1Ehhh>
        rgb.toBitSequence(CCRDMABuff + index * 24);
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4413      	add	r3, r2
 8002998:	015b      	lsls	r3, r3, #5
 800299a:	461a      	mov	r2, r3
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <_Z5blanki+0x4c>)
 800299e:	441a      	add	r2, r3
 80029a0:	f107 0308 	add.w	r3, r7, #8
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff24 	bl	80027f4 <_ZNK3RGB13toBitSequenceEPm>
    for (int i = 0; i < 24; i++)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3301      	adds	r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	e7e3      	b.n	800297c <_Z5blanki+0xc>
    }
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	2000032c 	.word	0x2000032c

080029c0 <_Z8blankAllv>:

void blankAll()
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
    if (!isInited)
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <_Z8blankAllv+0x40>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	f083 0301 	eor.w	r3, r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <_Z8blankAllv+0x1e>
    {
        init();
 80029d4:	f7ff ff60 	bl	8002898 <_Z4initv>
        isInited = true;
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <_Z8blankAllv+0x40>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
    }
    for (int i = 0; i < LED_NUM; i++)
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b53      	cmp	r3, #83	; 0x53
 80029e6:	dc06      	bgt.n	80029f6 <_Z8blankAllv+0x36>
    {
        blank(i);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ffc1 	bl	8002970 <_Z5blanki>
    for (int i = 0; i < LED_NUM; i++)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3301      	adds	r3, #1
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	e7f5      	b.n	80029e2 <_Z8blankAllv+0x22>
    }
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	2000032b 	.word	0x2000032b

08002a04 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002a14:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <MX_ADC1_Init+0x74>)
 8002a16:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <MX_ADC1_Init+0x78>)
 8002a18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <MX_ADC1_Init+0x74>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002a20:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <MX_ADC1_Init+0x74>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <MX_ADC1_Init+0x74>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <MX_ADC1_Init+0x74>)
 8002a2e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002a32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a34:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <MX_ADC1_Init+0x74>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <MX_ADC1_Init+0x74>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a40:	480d      	ldr	r0, [pc, #52]	; (8002a78 <MX_ADC1_Init+0x74>)
 8002a42:	f006 fef3 	bl	800982c <HAL_ADC_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002a4c:	f003 ffe0 	bl	8006a10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002a50:	230c      	movs	r3, #12
 8002a52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a54:	2301      	movs	r3, #1
 8002a56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002a58:	2305      	movs	r3, #5
 8002a5a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4805      	ldr	r0, [pc, #20]	; (8002a78 <MX_ADC1_Init+0x74>)
 8002a62:	f006 ffcd 	bl	8009a00 <HAL_ADC_ConfigChannel>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002a6c:	f003 ffd0 	bl	8006a10 <Error_Handler>
  }

}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	200023ec 	.word	0x200023ec
 8002a7c:	40012400 	.word	0x40012400

08002a80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a14      	ldr	r2, [pc, #80]	; (8002aec <HAL_ADC_MspInit+0x6c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d121      	bne.n	8002ae4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_ADC_MspInit+0x70>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <HAL_ADC_MspInit+0x70>)
 8002aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aaa:	6193      	str	r3, [r2, #24]
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_ADC_MspInit+0x70>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_ADC_MspInit+0x70>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <HAL_ADC_MspInit+0x70>)
 8002abe:	f043 0310 	orr.w	r3, r3, #16
 8002ac2:	6193      	str	r3, [r2, #24]
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_ADC_MspInit+0x70>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	4619      	mov	r1, r3
 8002ade:	4805      	ldr	r0, [pc, #20]	; (8002af4 <HAL_ADC_MspInit+0x74>)
 8002ae0:	f007 fe12 	bl	800a708 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40012400 	.word	0x40012400
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40011000 	.word	0x40011000

08002af8 <DEBUG_USART_Config>:
//WifiUart
UART_HandleTypeDef WifiUartHandle;

//配置与硬件底层无关内容：如串口协议，其中包括波特率，奇偶校验，停止位
void DEBUG_USART_Config()
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
    DebugUartHandle.Instance = DEBUG_USART;
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <DEBUG_USART_Config+0x4c>)
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <DEBUG_USART_Config+0x50>)
 8002b00:	601a      	str	r2, [r3, #0]

    //波特率，8位字长，1停止位，无奇偶校验，无硬件控制，收发模式
    DebugUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <DEBUG_USART_Config+0x4c>)
 8002b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b08:	605a      	str	r2, [r3, #4]
    DebugUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <DEBUG_USART_Config+0x4c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
    DebugUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <DEBUG_USART_Config+0x4c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
    DebugUartHandle.Init.Parity = UART_PARITY_NONE;
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <DEBUG_USART_Config+0x4c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
    DebugUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <DEBUG_USART_Config+0x4c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
    DebugUartHandle.Init.Mode = UART_MODE_TX_RX;
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <DEBUG_USART_Config+0x4c>)
 8002b24:	220c      	movs	r2, #12
 8002b26:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&DebugUartHandle);
 8002b28:	4806      	ldr	r0, [pc, #24]	; (8002b44 <DEBUG_USART_Config+0x4c>)
 8002b2a:	f009 fed6 	bl	800c8da <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&DebugUartHandle,UART_IT_RXNE);
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <DEBUG_USART_Config+0x4c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <DEBUG_USART_Config+0x4c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0220 	orr.w	r2, r2, #32
 8002b3c:	60da      	str	r2, [r3, #12]
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	2000241c 	.word	0x2000241c
 8002b48:	40013800 	.word	0x40013800

08002b4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b52:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <MX_DMA_Init+0x80>)
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <MX_DMA_Init+0x80>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6153      	str	r3, [r2, #20]
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <MX_DMA_Init+0x80>)
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <MX_DMA_Init+0x80>)
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <MX_DMA_Init+0x80>)
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	6153      	str	r3, [r2, #20]
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <MX_DMA_Init+0x80>)
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	200b      	movs	r0, #11
 8002b88:	f007 f93f 	bl	8009e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b8c:	200b      	movs	r0, #11
 8002b8e:	f007 f958 	bl	8009e42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	200c      	movs	r0, #12
 8002b98:	f007 f937 	bl	8009e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002b9c:	200c      	movs	r0, #12
 8002b9e:	f007 f950 	bl	8009e42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2010      	movs	r0, #16
 8002ba8:	f007 f92f 	bl	8009e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002bac:	2010      	movs	r0, #16
 8002bae:	f007 f948 	bl	8009e42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	203a      	movs	r0, #58	; 0x3a
 8002bb8:	f007 f927 	bl	8009e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002bbc:	203a      	movs	r0, #58	; 0x3a
 8002bbe:	f007 f940 	bl	8009e42 <HAL_NVIC_EnableIRQ>

}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000

08002bd0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
 8002be4:	615a      	str	r2, [r3, #20]
 8002be6:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002bea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002bee:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002bf0:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002bf2:	4a27      	ldr	r2, [pc, #156]	; (8002c90 <MX_FSMC_Init+0xc0>)
 8002bf4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002bf6:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002bfc:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002c02:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002c08:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002c28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002c3a:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002c4a:	230f      	movs	r3, #15
 8002c4c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 1;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002c56:	2310      	movs	r3, #16
 8002c58:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002c5a:	2311      	movs	r3, #17
 8002c5c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	2200      	movs	r2, #0
 8002c66:	4619      	mov	r1, r3
 8002c68:	4808      	ldr	r0, [pc, #32]	; (8002c8c <MX_FSMC_Init+0xbc>)
 8002c6a:	f008 fc0d 	bl	800b488 <HAL_SRAM_Init>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002c74:	f003 fecc 	bl	8006a10 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <MX_FSMC_Init+0xc4>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <MX_FSMC_Init+0xc4>)
 8002c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c82:	61d3      	str	r3, [r2, #28]

}
 8002c84:	bf00      	nop
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	2000249c 	.word	0x2000249c
 8002c90:	a0000104 	.word	0xa0000104
 8002c94:	40010000 	.word	0x40010000

08002c98 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002cac:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <HAL_FSMC_MspInit+0x78>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d129      	bne.n	8002d08 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8002cb4:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_FSMC_MspInit+0x78>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002cba:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <HAL_FSMC_MspInit+0x7c>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <HAL_FSMC_MspInit+0x7c>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc4:	6153      	str	r3, [r2, #20]
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <HAL_FSMC_MspInit+0x7c>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002cd2:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002cd6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ce0:	f107 0308 	add.w	r3, r7, #8
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	480c      	ldr	r0, [pc, #48]	; (8002d18 <HAL_FSMC_MspInit+0x80>)
 8002ce8:	f007 fd0e 	bl	800a708 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002cec:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002cf0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cfa:	f107 0308 	add.w	r3, r7, #8
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4806      	ldr	r0, [pc, #24]	; (8002d1c <HAL_FSMC_MspInit+0x84>)
 8002d02:	f007 fd01 	bl	800a708 <HAL_GPIO_Init>
 8002d06:	e000      	b.n	8002d0a <HAL_FSMC_MspInit+0x72>
    return;
 8002d08:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	200024e0 	.word	0x200024e0
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40011800 	.word	0x40011800
 8002d1c:	40011400 	.word	0x40011400

08002d20 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002d28:	f7ff ffb6 	bl	8002c98 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3a:	f107 0318 	add.w	r3, r7, #24
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d48:	4b7f      	ldr	r3, [pc, #508]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	4a7e      	ldr	r2, [pc, #504]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d52:	6193      	str	r3, [r2, #24]
 8002d54:	4b7c      	ldr	r3, [pc, #496]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d60:	4b79      	ldr	r3, [pc, #484]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	4a78      	ldr	r2, [pc, #480]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002d66:	f043 0310 	orr.w	r3, r3, #16
 8002d6a:	6193      	str	r3, [r2, #24]
 8002d6c:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d78:	4b73      	ldr	r3, [pc, #460]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	4a72      	ldr	r2, [pc, #456]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	6193      	str	r3, [r2, #24]
 8002d84:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d90:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	4a6c      	ldr	r2, [pc, #432]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002d96:	f043 0308 	orr.w	r3, r3, #8
 8002d9a:	6193      	str	r3, [r2, #24]
 8002d9c:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da8:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a66      	ldr	r2, [pc, #408]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002dae:	f043 0320 	orr.w	r3, r3, #32
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b64      	ldr	r3, [pc, #400]	; (8002f48 <MX_GPIO_Init+0x214>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2107      	movs	r1, #7
 8002dc4:	4861      	ldr	r0, [pc, #388]	; (8002f4c <MX_GPIO_Init+0x218>)
 8002dc6:	f007 fe4e 	bl	800aa66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8002dca:	2201      	movs	r2, #1
 8002dcc:	2140      	movs	r1, #64	; 0x40
 8002dce:	485f      	ldr	r0, [pc, #380]	; (8002f4c <MX_GPIO_Init+0x218>)
 8002dd0:	f007 fe49 	bl	800aa66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, XMOTOR_DIR_PIN_Pin|ZMOTOR_DIR_PIN_Pin, GPIO_PIN_RESET);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2190      	movs	r1, #144	; 0x90
 8002dd8:	485d      	ldr	r0, [pc, #372]	; (8002f50 <MX_GPIO_Init+0x21c>)
 8002dda:	f007 fe44 	bl	800aa66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8002dde:	2201      	movs	r2, #1
 8002de0:	2123      	movs	r1, #35	; 0x23
 8002de2:	485c      	ldr	r0, [pc, #368]	; (8002f54 <MX_GPIO_Init+0x220>)
 8002de4:	f007 fe3f 	bl	800aa66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002de8:	2200      	movs	r2, #0
 8002dea:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002dee:	485a      	ldr	r0, [pc, #360]	; (8002f58 <MX_GPIO_Init+0x224>)
 8002df0:	f007 fe39 	bl	800aa66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YMOTOR_DIR_PIN_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002df4:	2200      	movs	r2, #0
 8002df6:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002dfa:	4856      	ldr	r0, [pc, #344]	; (8002f54 <MX_GPIO_Init+0x220>)
 8002dfc:	f007 fe33 	bl	800aa66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PEPin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8002e00:	2347      	movs	r3, #71	; 0x47
 8002e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e04:	2301      	movs	r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e10:	f107 0318 	add.w	r3, r7, #24
 8002e14:	4619      	mov	r1, r3
 8002e16:	484d      	ldr	r0, [pc, #308]	; (8002f4c <MX_GPIO_Init+0x218>)
 8002e18:	f007 fc76 	bl	800a708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e24:	2301      	movs	r3, #1
 8002e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e28:	f107 0318 	add.w	r3, r7, #24
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4847      	ldr	r0, [pc, #284]	; (8002f4c <MX_GPIO_Init+0x218>)
 8002e30:	f007 fc6a 	bl	800a708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e34:	2310      	movs	r3, #16
 8002e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e38:	4b48      	ldr	r3, [pc, #288]	; (8002f5c <MX_GPIO_Init+0x228>)
 8002e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e40:	f107 0318 	add.w	r3, r7, #24
 8002e44:	4619      	mov	r1, r3
 8002e46:	4841      	ldr	r0, [pc, #260]	; (8002f4c <MX_GPIO_Init+0x218>)
 8002e48:	f007 fc5e 	bl	800a708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e52:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <MX_GPIO_Init+0x22c>)
 8002e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e5a:	f107 0318 	add.w	r3, r7, #24
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4840      	ldr	r0, [pc, #256]	; (8002f64 <MX_GPIO_Init+0x230>)
 8002e62:	f007 fc51 	bl	800a708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e6a:	4b3d      	ldr	r3, [pc, #244]	; (8002f60 <MX_GPIO_Init+0x22c>)
 8002e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e72:	f107 0318 	add.w	r3, r7, #24
 8002e76:	4619      	mov	r1, r3
 8002e78:	4835      	ldr	r0, [pc, #212]	; (8002f50 <MX_GPIO_Init+0x21c>)
 8002e7a:	f007 fc45 	bl	800a708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = XMOTOR_DIR_PIN_Pin|ZMOTOR_DIR_PIN_Pin;
 8002e7e:	2390      	movs	r3, #144	; 0x90
 8002e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	f107 0318 	add.w	r3, r7, #24
 8002e92:	4619      	mov	r1, r3
 8002e94:	482e      	ldr	r0, [pc, #184]	; (8002f50 <MX_GPIO_Init+0x21c>)
 8002e96:	f007 fc37 	bl	800a708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8;
 8002e9a:	f240 1323 	movw	r3, #291	; 0x123
 8002e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 0318 	add.w	r3, r7, #24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4828      	ldr	r0, [pc, #160]	; (8002f54 <MX_GPIO_Init+0x220>)
 8002eb4:	f007 fc28 	bl	800a708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002eb8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eca:	f107 0318 	add.w	r3, r7, #24
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4821      	ldr	r0, [pc, #132]	; (8002f58 <MX_GPIO_Init+0x224>)
 8002ed2:	f007 fc19 	bl	800a708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SWITCH_X_0_Pin|SWITCH_Y_0_Pin|SWITCH_Z_0_Pin;
 8002ed6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee4:	f107 0318 	add.w	r3, r7, #24
 8002ee8:	4619      	mov	r1, r3
 8002eea:	481e      	ldr	r0, [pc, #120]	; (8002f64 <MX_GPIO_Init+0x230>)
 8002eec:	f007 fc0c 	bl	800a708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB9 */
  GPIO_InitStruct.Pin = YMOTOR_DIR_PIN_Pin|GPIO_PIN_9;
 8002ef0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	2302      	movs	r3, #2
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f02:	f107 0318 	add.w	r3, r7, #24
 8002f06:	4619      	mov	r1, r3
 8002f08:	4812      	ldr	r0, [pc, #72]	; (8002f54 <MX_GPIO_Init+0x220>)
 8002f0a:	f007 fbfd 	bl	800a708 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	2006      	movs	r0, #6
 8002f14:	f006 ff79 	bl	8009e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f18:	2006      	movs	r0, #6
 8002f1a:	f006 ff92 	bl	8009e42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2100      	movs	r1, #0
 8002f22:	200a      	movs	r0, #10
 8002f24:	f006 ff71 	bl	8009e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002f28:	200a      	movs	r0, #10
 8002f2a:	f006 ff8a 	bl	8009e42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	2028      	movs	r0, #40	; 0x28
 8002f34:	f006 ff69 	bl	8009e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f38:	2028      	movs	r0, #40	; 0x28
 8002f3a:	f006 ff82 	bl	8009e42 <HAL_NVIC_EnableIRQ>

}
 8002f3e:	bf00      	nop
 8002f40:	3728      	adds	r7, #40	; 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40011800 	.word	0x40011800
 8002f50:	40010800 	.word	0x40010800
 8002f54:	40010c00 	.word	0x40010c00
 8002f58:	40011400 	.word	0x40011400
 8002f5c:	10210000 	.word	0x10210000
 8002f60:	10110000 	.word	0x10110000
 8002f64:	40011000 	.word	0x40011000

08002f68 <_ZN10PulseMotor9spinStartEv>:
    void spinStart()
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
        __HAL_TIM_SET_COMPARE(pTim, timChannel, 36);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	2224      	movs	r2, #36	; 0x24
 8002f86:	601a      	str	r2, [r3, #0]
        HAL_TIM_PWM_Start(pTim, timChannel);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f008 fba4 	bl	800b6e0 <HAL_TIM_PWM_Start>
    }
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <_ZN10PulseMotor8spinStopEv>:
    void spinStop()
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
        HAL_TIM_PWM_Stop(pTim, timChannel);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	f008 fbc8 	bl	800b748 <HAL_TIM_PWM_Stop>
    }
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_ZN10PulseMotor13emergencyStopEv>:
    void emergencyStop()
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
        HAL_TIM_PWM_Stop_DMA(pTim, timChannel);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f008 fcf2 	bl	800b9bc <HAL_TIM_PWM_Stop_DMA>
        HAL_TIM_PWM_Stop(pTim, timChannel);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f008 fbb0 	bl	800b748 <HAL_TIM_PWM_Stop>
        __HAL_TIM_SET_COMPARE(pTim, timChannel, 0);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
        HAL_TIM_PWM_Start(pTim, timChannel);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f008 fb68 	bl	800b6e0 <HAL_TIM_PWM_Start>
    }
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_ZN14SERVO42C_Pulse12resetStepSumEv>:
    void resetStepSum(){
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
        stepSum = 0;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	61da      	str	r2, [r3, #28]
    }
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <_ZN6ScreenC1EPFvvE>:
    uint8_t elementNum = 0;

    void (*onUpdate)() = nullptr;


    Screen(void (*onUpdate)() = nullptr) : onUpdate(onUpdate)
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    {
        allScreens[screenNum++] = this;
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <_ZN6ScreenC1EPFvvE+0x44>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	b2d1      	uxtb	r1, r2
 8003052:	4a08      	ldr	r2, [pc, #32]	; (8003074 <_ZN6ScreenC1EPFvvE+0x44>)
 8003054:	7011      	strb	r1, [r2, #0]
 8003056:	4619      	mov	r1, r3
 8003058:	4a07      	ldr	r2, [pc, #28]	; (8003078 <_ZN6ScreenC1EPFvvE+0x48>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        elementNum = 0;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	2000d554 	.word	0x2000d554
 8003078:	2000d4d4 	.word	0x2000d4d4

0800307c <_ZN6Screen9setActiveEv>:

    void renderAll(); // See the implementation below
    void updateAll(); // See the implementation in EasyUI.cpp
    void setActive(){
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
        // LCD_Clear(0,0,240,320);
        activeScreen = this;
 8003084:	4a03      	ldr	r2, [pc, #12]	; (8003094 <_ZN6Screen9setActiveEv+0x18>)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6013      	str	r3, [r2, #0]
        // this->renderAll();
    }
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	20000168 	.word	0x20000168

08003098 <_ZN9UIElement14isInvalidInputEtt>:
    virtual void update(uint16_t x, uint16_t y) = 0;

    static void updateAllElements(); 
    // DO NOT USE THIS FUNCTION WHEN USING MULTIPLE SCREENS

    bool isInvalidInput(uint16_t x, uint16_t y)
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	803b      	strh	r3, [r7, #0]
    {
        if (y > 500 || y <= 32)
 80030a8:	883b      	ldrh	r3, [r7, #0]
 80030aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030ae:	d802      	bhi.n	80030b6 <_ZN9UIElement14isInvalidInputEtt+0x1e>
 80030b0:	883b      	ldrh	r3, [r7, #0]
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d801      	bhi.n	80030ba <_ZN9UIElement14isInvalidInputEtt+0x22>
            return true;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <_ZN9UIElement14isInvalidInputEtt+0x24>
        else
            return false;
 80030ba:	2300      	movs	r3, #0
    }
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
	...

080030c8 <_ZN9UIElementC1EP6Screentttt>:

    uint16_t x, y;
    uint16_t width, height;

protected:
    UIElement(Screen *screen, uint16_t x, uint16_t y, uint16_t width, uint16_t height)
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	4611      	mov	r1, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	460b      	mov	r3, r1
 80030d8:	80fb      	strh	r3, [r7, #6]
 80030da:	4613      	mov	r3, r2
 80030dc:	80bb      	strh	r3, [r7, #4]
    {
 80030de:	4a16      	ldr	r2, [pc, #88]	; (8003138 <_ZN9UIElementC1EP6Screentttt+0x70>)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	601a      	str	r2, [r3, #0]
        this->x = x;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	88fa      	ldrh	r2, [r7, #6]
 80030e8:	809a      	strh	r2, [r3, #4]
        this->y = y;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	88ba      	ldrh	r2, [r7, #4]
 80030ee:	80da      	strh	r2, [r3, #6]
        this->width = width;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8b3a      	ldrh	r2, [r7, #24]
 80030f4:	811a      	strh	r2, [r3, #8]
        this->height = height;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8bba      	ldrh	r2, [r7, #28]
 80030fa:	815a      	strh	r2, [r3, #10]
        allElements[elementNum++] = this;
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <_ZN9UIElementC1EP6Screentttt+0x74>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	b2d1      	uxtb	r1, r2
 8003104:	4a0d      	ldr	r2, [pc, #52]	; (800313c <_ZN9UIElementC1EP6Screentttt+0x74>)
 8003106:	7011      	strb	r1, [r2, #0]
 8003108:	4619      	mov	r1, r3
 800310a:	4a0d      	ldr	r2, [pc, #52]	; (8003140 <_ZN9UIElementC1EP6Screentttt+0x78>)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        screen->elements[screen->elementNum++] = this;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	b2d1      	uxtb	r1, r2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
 8003122:	4619      	mov	r1, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    }
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	0802eed8 	.word	0x0802eed8
 800313c:	20000164 	.word	0x20000164
 8003140:	200000e4 	.word	0x200000e4

08003144 <_ZN9UIElement10checkTouchEtt>:
    bool checkTouch(uint16_t x, uint16_t y)
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
 8003150:	4613      	mov	r3, r2
 8003152:	803b      	strh	r3, [r7, #0]
    {
        return x >= this->x && x <= this->x + width && y >= this->y && y <= this->y + height;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	889b      	ldrh	r3, [r3, #4]
 8003158:	887a      	ldrh	r2, [r7, #2]
 800315a:	429a      	cmp	r2, r3
 800315c:	d318      	bcc.n	8003190 <_ZN9UIElement10checkTouchEtt+0x4c>
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	889b      	ldrh	r3, [r3, #4]
 8003164:	4619      	mov	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	891b      	ldrh	r3, [r3, #8]
 800316a:	440b      	add	r3, r1
 800316c:	429a      	cmp	r2, r3
 800316e:	dc0f      	bgt.n	8003190 <_ZN9UIElement10checkTouchEtt+0x4c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	88db      	ldrh	r3, [r3, #6]
 8003174:	883a      	ldrh	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d30a      	bcc.n	8003190 <_ZN9UIElement10checkTouchEtt+0x4c>
 800317a:	883a      	ldrh	r2, [r7, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	88db      	ldrh	r3, [r3, #6]
 8003180:	4619      	mov	r1, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	895b      	ldrh	r3, [r3, #10]
 8003186:	440b      	add	r3, r1
 8003188:	429a      	cmp	r2, r3
 800318a:	dc01      	bgt.n	8003190 <_ZN9UIElement10checkTouchEtt+0x4c>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <_ZN9UIElement10checkTouchEtt+0x4e>
 8003190:	2300      	movs	r3, #0
    }
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <_ZN6ButtonC1EP6ScreenttPctttt>:
    bool isPressed = false;
    void (*onPressed)() = nullptr;
    void (*whilePressing)() = nullptr;
    void (*onReleased)() = nullptr;

    Button(Screen *screen, uint16_t x, uint16_t y, char text[TEXT_CHAR_NUM], uint16_t width = 85, uint16_t height = 50, uint16_t color = CYAN, uint16_t textColor = BLACK)
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	4611      	mov	r1, r2
 80031a8:	461a      	mov	r2, r3
 80031aa:	460b      	mov	r3, r1
 80031ac:	80fb      	strh	r3, [r7, #6]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80bb      	strh	r3, [r7, #4]
        : UIElement(screen, x, y, width, height)
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	88b9      	ldrh	r1, [r7, #4]
 80031b6:	88fa      	ldrh	r2, [r7, #6]
 80031b8:	8c3b      	ldrh	r3, [r7, #32]
 80031ba:	9301      	str	r3, [sp, #4]
 80031bc:	8bbb      	ldrh	r3, [r7, #28]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	460b      	mov	r3, r1
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	f7ff ff80 	bl	80030c8 <_ZN9UIElementC1EP6Screentttt>
 80031c8:	4a13      	ldr	r2, [pc, #76]	; (8003218 <_ZN6ButtonC1EP6ScreenttPctttt+0x7c>)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	819a      	strh	r2, [r3, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
    {
        this->initialColor = color;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031f2:	81da      	strh	r2, [r3, #14]
        this->color = color;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031f8:	821a      	strh	r2, [r3, #16]
        this->textColor = textColor;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031fe:	825a      	strh	r2, [r3, #18]
        strcpy(this->text, text);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3314      	adds	r3, #20
 8003204:	69b9      	ldr	r1, [r7, #24]
 8003206:	4618      	mov	r0, r3
 8003208:	f00a f96a 	bl	800d4e0 <strcpy>
    }
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	0802eec8 	.word	0x0802eec8

0800321c <_ZN6Button7setTextEPKc>:
    void setOnReleased(void (*onReleased)())
    {
        this->onReleased = onReleased;
    }

    void setText(const char* text){
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
        strcpy(this->text, text);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3314      	adds	r3, #20
 800322a:	6839      	ldr	r1, [r7, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f00a f957 	bl	800d4e0 <strcpy>
    }
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <_ZN6Button6renderEv>:

    void render() override
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b085      	sub	sp, #20
 8003240:	af02      	add	r7, sp, #8
 8003242:	6078      	str	r0, [r7, #4]
        // render background
        // for (int i=y; height<y?i<y+height:i>y-height; height<y?i++:i--)
        // {
        //     LCD_DrawLine(x, i, x+width, i, color);
        // }
        LCD_OpenWindow(x, y, width, height);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8898      	ldrh	r0, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	88d9      	ldrh	r1, [r3, #6]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	891a      	ldrh	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	895b      	ldrh	r3, [r3, #10]
 8003254:	f003 f8da 	bl	800640c <LCD_OpenWindow>
        LCD_FillColor(width * height, color);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	891b      	ldrh	r3, [r3, #8]
 800325c:	461a      	mov	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	895b      	ldrh	r3, [r3, #10]
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	461a      	mov	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8a1b      	ldrh	r3, [r3, #16]
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f003 f925 	bl	80064be <LCD_FillColor>

        // render text
        LCD_DrawString_Color(x + width / 7, y + height / 3, text, color, textColor);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8899      	ldrh	r1, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	891a      	ldrh	r2, [r3, #8]
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <_ZN6Button6renderEv+0x88>)
 800327e:	fba3 0302 	umull	r0, r3, r3, r2
 8003282:	1ad2      	subs	r2, r2, r3
 8003284:	0852      	lsrs	r2, r2, #1
 8003286:	4413      	add	r3, r2
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	b29b      	uxth	r3, r3
 800328c:	440b      	add	r3, r1
 800328e:	b298      	uxth	r0, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	88da      	ldrh	r2, [r3, #6]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	895b      	ldrh	r3, [r3, #10]
 8003298:	490b      	ldr	r1, [pc, #44]	; (80032c8 <_ZN6Button6renderEv+0x8c>)
 800329a:	fba1 1303 	umull	r1, r3, r1, r3
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	b299      	uxth	r1, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f103 0214 	add.w	r2, r3, #20
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8a1c      	ldrh	r4, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8a5b      	ldrh	r3, [r3, #18]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	4623      	mov	r3, r4
 80032b8:	f003 facc 	bl	8006854 <LCD_DrawString_Color>
    }
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	24924925 	.word	0x24924925
 80032c8:	aaaaaaab 	.word	0xaaaaaaab

080032cc <_ZN6Button6updateEtt>:

    void update(u_int16_t x, u_int16_t y) override
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
 80032d8:	4613      	mov	r3, r2
 80032da:	803b      	strh	r3, [r7, #0]
    {
        if (checkTouch(x, y))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	883a      	ldrh	r2, [r7, #0]
 80032e0:	8879      	ldrh	r1, [r7, #2]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff2e 	bl	8003144 <_ZN9UIElement10checkTouchEtt>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00f      	beq.n	800330e <_ZN6Button6updateEtt+0x42>
        {
            color = YELLOW;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80032f4:	821a      	strh	r2, [r3, #16]
            // if (!isPressed)
            //{ // only trigger once
            isPressed = true;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if (whilePressing)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <_ZN6Button6updateEtt+0x52>
                whilePressing();
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	4798      	blx	r3
 800330c:	e007      	b.n	800331e <_ZN6Button6updateEtt+0x52>
            //}
        }
        else
        {
            color = initialColor;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	89da      	ldrh	r2, [r3, #14]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	821a      	strh	r2, [r3, #16]
            isPressed = false;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
        if (last_color != color)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	899a      	ldrh	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	8a1b      	ldrh	r3, [r3, #16]
 8003326:	429a      	cmp	r2, r3
 8003328:	d023      	beq.n	8003372 <_ZN6Button6updateEtt+0xa6>
        {
            if (isPressed && onPressed)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003330:	2b00      	cmp	r3, #0
 8003332:	d006      	beq.n	8003342 <_ZN6Button6updateEtt+0x76>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <_ZN6Button6updateEtt+0x76>
            {
                onPressed();
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	4798      	blx	r3
            }
            if (!isPressed && onReleased)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003348:	f083 0301 	eor.w	r3, r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d006      	beq.n	8003360 <_ZN6Button6updateEtt+0x94>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <_ZN6Button6updateEtt+0x94>
                onReleased();
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4798      	blx	r3
            render();
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
            last_color = color;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8a1a      	ldrh	r2, [r3, #16]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	819a      	strh	r2, [r3, #12]
        }
    }
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <_ZN6SliderC1EP6Screentttttt>:

    uint16_t draggerX;
    uint16_t draggerY;

public:
    Slider(
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	4611      	mov	r1, r2
 8003388:	461a      	mov	r2, r3
 800338a:	460b      	mov	r3, r1
 800338c:	80fb      	strh	r3, [r7, #6]
 800338e:	4613      	mov	r3, r2
 8003390:	80bb      	strh	r3, [r7, #4]
        uint16_t x,
        uint16_t y,
        uint16_t maxValue = 0,
        uint16_t width = 10,
        uint16_t height = 130,
        uint16_t barColor = CYAN) : UIElement(screen, x, y, width, height)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	88b9      	ldrh	r1, [r7, #4]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	8c3b      	ldrh	r3, [r7, #32]
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	8bbb      	ldrh	r3, [r7, #28]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	460b      	mov	r3, r1
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	f7ff fe90 	bl	80030c8 <_ZN9UIElementC1EP6Screentttt>
 80033a8:	4a11      	ldr	r2, [pc, #68]	; (80033f0 <_ZN6SliderC1EP6Screentttttt+0x74>)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2214      	movs	r2, #20
 80033b2:	82da      	strh	r2, [r3, #22]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	761a      	strb	r2, [r3, #24]
    {
        this->maxValue = maxValue;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8b3a      	ldrh	r2, [r7, #24]
 80033be:	829a      	strh	r2, [r3, #20]
        this->barColor = barColor;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033c4:	819a      	strh	r2, [r3, #12]
        draggerX = x + width / 2;
 80033c6:	8bbb      	ldrh	r3, [r7, #28]
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	4413      	add	r3, r2
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	835a      	strh	r2, [r3, #26]
        draggerY = y + height / 2;
 80033d6:	8c3b      	ldrh	r3, [r7, #32]
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	88bb      	ldrh	r3, [r7, #4]
 80033de:	4413      	add	r3, r2
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	839a      	strh	r2, [r3, #28]
    }
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	0802eeb8 	.word	0x0802eeb8

080033f4 <_ZN6Slider6renderEv>:

    void render() override
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
    {
        // render bar
        LCD_OpenWindow(x, y, width, height);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8898      	ldrh	r0, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	88d9      	ldrh	r1, [r3, #6]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	891a      	ldrh	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	895b      	ldrh	r3, [r3, #10]
 800340c:	f002 fffe 	bl	800640c <LCD_OpenWindow>
        LCD_FillColor(width * height, barColor);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	891b      	ldrh	r3, [r3, #8]
 8003414:	461a      	mov	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	895b      	ldrh	r3, [r3, #10]
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	461a      	mov	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	899b      	ldrh	r3, [r3, #12]
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f003 f849 	bl	80064be <LCD_FillColor>

        // render dragger
        LCD_OpenWindow(x, draggerY, width, draggerRadius);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8898      	ldrh	r0, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8b99      	ldrh	r1, [r3, #28]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	891a      	ldrh	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8adb      	ldrh	r3, [r3, #22]
 800343c:	f002 ffe6 	bl	800640c <LCD_OpenWindow>
        LCD_FillColor(width * draggerRadius, RED);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	891b      	ldrh	r3, [r3, #8]
 8003444:	461a      	mov	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8adb      	ldrh	r3, [r3, #22]
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8003452:	4618      	mov	r0, r3
 8003454:	f003 f833 	bl	80064be <LCD_FillColor>
    }
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <_ZN6Slider5wrapYEt>:

    uint16_t wrapY(u_int16_t y)
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
    {
        if (y > 500 || y <= 32)
 800346c:	887b      	ldrh	r3, [r7, #2]
 800346e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003472:	d802      	bhi.n	800347a <_ZN6Slider5wrapYEt+0x1a>
 8003474:	887b      	ldrh	r3, [r7, #2]
 8003476:	2b20      	cmp	r3, #32
 8003478:	d802      	bhi.n	8003480 <_ZN6Slider5wrapYEt+0x20>
            return draggerY; // y=2048 if not touched
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8b9b      	ldrh	r3, [r3, #28]
 800347e:	e01f      	b.n	80034c0 <_ZN6Slider5wrapYEt+0x60>
        if (y < this->y)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	88db      	ldrh	r3, [r3, #6]
 8003484:	887a      	ldrh	r2, [r7, #2]
 8003486:	429a      	cmp	r2, r3
 8003488:	d202      	bcs.n	8003490 <_ZN6Slider5wrapYEt+0x30>
            return this->y;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	88db      	ldrh	r3, [r3, #6]
 800348e:	e017      	b.n	80034c0 <_ZN6Slider5wrapYEt+0x60>
        if (y > this->y + height - draggerRadius)
 8003490:	887a      	ldrh	r2, [r7, #2]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	88db      	ldrh	r3, [r3, #6]
 8003496:	4619      	mov	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	895b      	ldrh	r3, [r3, #10]
 800349c:	440b      	add	r3, r1
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	8ac9      	ldrh	r1, [r1, #22]
 80034a2:	1a5b      	subs	r3, r3, r1
 80034a4:	429a      	cmp	r2, r3
 80034a6:	dd0a      	ble.n	80034be <_ZN6Slider5wrapYEt+0x5e>
            return this->y + height - draggerRadius;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	88da      	ldrh	r2, [r3, #6]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	895b      	ldrh	r3, [r3, #10]
 80034b0:	4413      	add	r3, r2
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8adb      	ldrh	r3, [r3, #22]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	e000      	b.n	80034c0 <_ZN6Slider5wrapYEt+0x60>
        return y;
 80034be:	887b      	ldrh	r3, [r7, #2]
    }
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr

080034ca <_ZN6Slider6updateEtt>:

    void update(u_int16_t x, u_int16_t y) override
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	807b      	strh	r3, [r7, #2]
 80034d6:	4613      	mov	r3, r2
 80034d8:	803b      	strh	r3, [r7, #0]
    {
        bool isDraggerTouched;
        if (isDragging)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	7e1b      	ldrb	r3, [r3, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d071      	beq.n	80035c6 <_ZN6Slider6updateEtt+0xfc>
        {
            LCD_OpenWindow(this->x, draggerY, width, draggerRadius);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	8898      	ldrh	r0, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8b99      	ldrh	r1, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	891a      	ldrh	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8adb      	ldrh	r3, [r3, #22]
 80034f2:	f002 ff8b 	bl	800640c <LCD_OpenWindow>
            LCD_FillColor(width * draggerRadius, CYAN);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	891b      	ldrh	r3, [r3, #8]
 80034fa:	461a      	mov	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8adb      	ldrh	r3, [r3, #22]
 8003500:	fb02 f303 	mul.w	r3, r2, r3
 8003504:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003508:	4618      	mov	r0, r3
 800350a:	f002 ffd8 	bl	80064be <LCD_FillColor>
            draggerY = wrapY(y);
 800350e:	883b      	ldrh	r3, [r7, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ffa4 	bl	8003460 <_ZN6Slider5wrapYEt>
 8003518:	4603      	mov	r3, r0
 800351a:	461a      	mov	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	839a      	strh	r2, [r3, #28]
            LCD_OpenWindow(this->x, draggerY, width, draggerRadius);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8898      	ldrh	r0, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8b99      	ldrh	r1, [r3, #28]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	891a      	ldrh	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8adb      	ldrh	r3, [r3, #22]
 8003530:	f002 ff6c 	bl	800640c <LCD_OpenWindow>
            LCD_FillColor(width * draggerRadius, RED);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	891b      	ldrh	r3, [r3, #8]
 8003538:	461a      	mov	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8adb      	ldrh	r3, [r3, #22]
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8003546:	4618      	mov	r0, r3
 8003548:	f002 ffb9 	bl	80064be <LCD_FillColor>
            isDraggerTouched = x >= draggerX - 6 * draggerRadius && x <= draggerX + 6 * draggerRadius && y >= draggerY - 6 * draggerRadius && y <= draggerY + 6 * draggerRadius;
 800354c:	887a      	ldrh	r2, [r7, #2]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8b5b      	ldrh	r3, [r3, #26]
 8003552:	4618      	mov	r0, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8adb      	ldrh	r3, [r3, #22]
 8003558:	4619      	mov	r1, r3
 800355a:	460b      	mov	r3, r1
 800355c:	0089      	lsls	r1, r1, #2
 800355e:	1a5b      	subs	r3, r3, r1
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4403      	add	r3, r0
 8003564:	429a      	cmp	r2, r3
 8003566:	db2b      	blt.n	80035c0 <_ZN6Slider6updateEtt+0xf6>
 8003568:	887a      	ldrh	r2, [r7, #2]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8b5b      	ldrh	r3, [r3, #26]
 800356e:	4618      	mov	r0, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8adb      	ldrh	r3, [r3, #22]
 8003574:	4619      	mov	r1, r3
 8003576:	460b      	mov	r3, r1
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	440b      	add	r3, r1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4403      	add	r3, r0
 8003580:	429a      	cmp	r2, r3
 8003582:	dc1d      	bgt.n	80035c0 <_ZN6Slider6updateEtt+0xf6>
 8003584:	883a      	ldrh	r2, [r7, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8b9b      	ldrh	r3, [r3, #28]
 800358a:	4618      	mov	r0, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8adb      	ldrh	r3, [r3, #22]
 8003590:	4619      	mov	r1, r3
 8003592:	460b      	mov	r3, r1
 8003594:	0089      	lsls	r1, r1, #2
 8003596:	1a5b      	subs	r3, r3, r1
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4403      	add	r3, r0
 800359c:	429a      	cmp	r2, r3
 800359e:	db0f      	blt.n	80035c0 <_ZN6Slider6updateEtt+0xf6>
 80035a0:	883a      	ldrh	r2, [r7, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8b9b      	ldrh	r3, [r3, #28]
 80035a6:	4618      	mov	r0, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8adb      	ldrh	r3, [r3, #22]
 80035ac:	4619      	mov	r1, r3
 80035ae:	460b      	mov	r3, r1
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	440b      	add	r3, r1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4403      	add	r3, r0
 80035b8:	429a      	cmp	r2, r3
 80035ba:	dc01      	bgt.n	80035c0 <_ZN6Slider6updateEtt+0xf6>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <_ZN6Slider6updateEtt+0xf8>
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	e027      	b.n	8003616 <_ZN6Slider6updateEtt+0x14c>
        }
        else
        {
            isDraggerTouched = x >= draggerX - draggerRadius && x <= draggerX + draggerRadius && y >= draggerY - draggerRadius && y <= draggerY + draggerRadius;
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8b5b      	ldrh	r3, [r3, #26]
 80035cc:	4619      	mov	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8adb      	ldrh	r3, [r3, #22]
 80035d2:	1acb      	subs	r3, r1, r3
 80035d4:	429a      	cmp	r2, r3
 80035d6:	db1c      	blt.n	8003612 <_ZN6Slider6updateEtt+0x148>
 80035d8:	887a      	ldrh	r2, [r7, #2]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8b5b      	ldrh	r3, [r3, #26]
 80035de:	4619      	mov	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8adb      	ldrh	r3, [r3, #22]
 80035e4:	440b      	add	r3, r1
 80035e6:	429a      	cmp	r2, r3
 80035e8:	dc13      	bgt.n	8003612 <_ZN6Slider6updateEtt+0x148>
 80035ea:	883a      	ldrh	r2, [r7, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8b9b      	ldrh	r3, [r3, #28]
 80035f0:	4619      	mov	r1, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	8adb      	ldrh	r3, [r3, #22]
 80035f6:	1acb      	subs	r3, r1, r3
 80035f8:	429a      	cmp	r2, r3
 80035fa:	db0a      	blt.n	8003612 <_ZN6Slider6updateEtt+0x148>
 80035fc:	883a      	ldrh	r2, [r7, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8b9b      	ldrh	r3, [r3, #28]
 8003602:	4619      	mov	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8adb      	ldrh	r3, [r3, #22]
 8003608:	440b      	add	r3, r1
 800360a:	429a      	cmp	r2, r3
 800360c:	dc01      	bgt.n	8003612 <_ZN6Slider6updateEtt+0x148>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <_ZN6Slider6updateEtt+0x14a>
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]
        }
        isDragging = isDraggerTouched;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	761a      	strb	r2, [r3, #24]
        value = (draggerY - this->y) * maxValue / height;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8b9b      	ldrh	r3, [r3, #28]
 8003620:	461a      	mov	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	88db      	ldrh	r3, [r3, #6]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	8a92      	ldrh	r2, [r2, #20]
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	8952      	ldrh	r2, [r2, #10]
 8003634:	fb93 f3f2 	sdiv	r3, r3, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f7fd fba5 	bl	8000d88 <__aeabi_i2f>
 800363e:	4602      	mov	r2, r0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	611a      	str	r2, [r3, #16]
    }
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <_ZN6Slider8getValueEv>:
    float getValue()
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
    {
        return value / maxValue;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691c      	ldr	r4, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8a9b      	ldrh	r3, [r3, #20]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fd fb93 	bl	8000d88 <__aeabi_i2f>
 8003662:	4603      	mov	r3, r0
 8003664:	4619      	mov	r1, r3
 8003666:	4620      	mov	r0, r4
 8003668:	f7fd fc96 	bl	8000f98 <__aeabi_fdiv>
 800366c:	4603      	mov	r3, r0
    }
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	bd90      	pop	{r4, r7, pc}
	...

08003678 <_ZN8JoystickC1EP6ScreentttttPFvvE>:
    void (*whilePressing)() = nullptr;
    void (*onPressed)() = nullptr;

    uint32_t lastTick = 0;

    Joystick(Screen *screen,uint16_t x, uint16_t y, uint16_t width = 150, uint16_t height = 150, uint16_t color = CYAN, void (*whilePressing)() = nullptr)
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	4611      	mov	r1, r2
 8003684:	461a      	mov	r2, r3
 8003686:	460b      	mov	r3, r1
 8003688:	80fb      	strh	r3, [r7, #6]
 800368a:	4613      	mov	r3, r2
 800368c:	80bb      	strh	r3, [r7, #4]
        : UIElement(screen, x, y, width, height)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	88b9      	ldrh	r1, [r7, #4]
 8003692:	88fa      	ldrh	r2, [r7, #6]
 8003694:	8bbb      	ldrh	r3, [r7, #28]
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	8b3b      	ldrh	r3, [r7, #24]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	460b      	mov	r3, r1
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	f7ff fd12 	bl	80030c8 <_ZN9UIElementC1EP6Screentttt>
 80036a4:	4a21      	ldr	r2, [pc, #132]	; (800372c <_ZN8JoystickC1EP6ScreentttttPFvvE+0xb4>)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	739a      	strb	r2, [r3, #14]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2214      	movs	r2, #20
 80036b4:	821a      	strh	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2228      	movs	r2, #40	; 0x28
 80036ba:	615a      	str	r2, [r3, #20]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	761a      	strb	r2, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	83da      	strh	r2, [r3, #30]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	841a      	strh	r2, [r3, #32]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	62da      	str	r2, [r3, #44]	; 0x2c
    {
        this->x = x;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	88fa      	ldrh	r2, [r7, #6]
 80036e4:	809a      	strh	r2, [r3, #4]
        this->y = y;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	88ba      	ldrh	r2, [r7, #4]
 80036ea:	80da      	strh	r2, [r3, #6]
        this->width = width;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8b3a      	ldrh	r2, [r7, #24]
 80036f0:	811a      	strh	r2, [r3, #8]
        this->height = height;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8bba      	ldrh	r2, [r7, #28]
 80036f6:	815a      	strh	r2, [r3, #10]
        this->color = color;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8c3a      	ldrh	r2, [r7, #32]
 80036fc:	819a      	strh	r2, [r3, #12]
        dotX = getInitialDotX();
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fa68 	bl	8003bd4 <_ZN8Joystick14getInitialDotXEv>
 8003704:	4603      	mov	r3, r0
 8003706:	461a      	mov	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	835a      	strh	r2, [r3, #26]
        dotY = getInitialDotY();
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fa74 	bl	8003bfa <_ZN8Joystick14getInitialDotYEv>
 8003712:	4603      	mov	r3, r0
 8003714:	461a      	mov	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	839a      	strh	r2, [r3, #28]
        this->whilePressing = whilePressing;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371e:	625a      	str	r2, [r3, #36]	; 0x24
    }
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	0802eea8 	.word	0x0802eea8

08003730 <_ZN8Joystick6renderEv>:

    void render() override
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
    {
        // render background
        LCD_OpenWindow(x, y, width, height);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8898      	ldrh	r0, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	88d9      	ldrh	r1, [r3, #6]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	891a      	ldrh	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	895b      	ldrh	r3, [r3, #10]
 8003748:	f002 fe60 	bl	800640c <LCD_OpenWindow>
        LCD_FillColor(width * height, color);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	891b      	ldrh	r3, [r3, #8]
 8003750:	461a      	mov	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	895b      	ldrh	r3, [r3, #10]
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	461a      	mov	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	899b      	ldrh	r3, [r3, #12]
 8003760:	4619      	mov	r1, r3
 8003762:	4610      	mov	r0, r2
 8003764:	f002 feab 	bl	80064be <LCD_FillColor>

        // render dot
        renderDot();
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f82f 	bl	80037cc <_ZN8Joystick9renderDotEv>

        renderDeadZone();
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f852 	bl	8003818 <_ZN8Joystick14renderDeadZoneEv>
    }
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <_ZN8Joystick8clearDotEv>:

    void clearDot()
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
    {
        LCD_OpenWindow(x + dotX, y + dotY, dotRadius, dotRadius);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	889a      	ldrh	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8b5b      	ldrh	r3, [r3, #26]
 800378c:	4413      	add	r3, r2
 800378e:	b298      	uxth	r0, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	88da      	ldrh	r2, [r3, #6]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8b9b      	ldrh	r3, [r3, #28]
 8003798:	4413      	add	r3, r2
 800379a:	b299      	uxth	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8a1a      	ldrh	r2, [r3, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8a1b      	ldrh	r3, [r3, #16]
 80037a4:	f002 fe32 	bl	800640c <LCD_OpenWindow>
        LCD_FillColor(dotRadius * dotRadius, color);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8a1b      	ldrh	r3, [r3, #16]
 80037ac:	461a      	mov	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8a1b      	ldrh	r3, [r3, #16]
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	899b      	ldrh	r3, [r3, #12]
 80037bc:	4619      	mov	r1, r3
 80037be:	4610      	mov	r0, r2
 80037c0:	f002 fe7d 	bl	80064be <LCD_FillColor>
    }
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <_ZN8Joystick9renderDotEv>:

    void renderDot()
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
    {
        LCD_OpenWindow(x + dotX, y + dotY, dotRadius, dotRadius);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	889a      	ldrh	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8b5b      	ldrh	r3, [r3, #26]
 80037dc:	4413      	add	r3, r2
 80037de:	b298      	uxth	r0, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	88da      	ldrh	r2, [r3, #6]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8b9b      	ldrh	r3, [r3, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	b299      	uxth	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8a1a      	ldrh	r2, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	8a1b      	ldrh	r3, [r3, #16]
 80037f4:	f002 fe0a 	bl	800640c <LCD_OpenWindow>
        LCD_FillColor(dotRadius * dotRadius, RED);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8a1b      	ldrh	r3, [r3, #16]
 80037fc:	461a      	mov	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8a1b      	ldrh	r3, [r3, #16]
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800380a:	4618      	mov	r0, r3
 800380c:	f002 fe57 	bl	80064be <LCD_FillColor>
    }
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <_ZN8Joystick14renderDeadZoneEv>:
    void renderDeadZone()
 8003818:	b5b0      	push	{r4, r5, r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af02      	add	r7, sp, #8
 800381e:	6078      	str	r0, [r7, #4]
    {
        int centerX = getInitialDotX() + dotRadius/2;
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f9d7 	bl	8003bd4 <_ZN8Joystick14getInitialDotXEv>
 8003826:	4603      	mov	r3, r0
 8003828:	461a      	mov	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8a1b      	ldrh	r3, [r3, #16]
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	b29b      	uxth	r3, r3
 8003832:	4413      	add	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
        int centerY = getInitialDotY() + dotRadius/2;
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f9df 	bl	8003bfa <_ZN8Joystick14getInitialDotYEv>
 800383c:	4603      	mov	r3, r0
 800383e:	461a      	mov	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8a1b      	ldrh	r3, [r3, #16]
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	b29b      	uxth	r3, r3
 8003848:	4413      	add	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
        LCD_DrawLine(x + centerX - deadzoneSideLength/2, y + centerY - deadzoneSideLength/2, x + centerX + deadzoneSideLength/2, y + centerY - deadzoneSideLength/2, RED);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	889a      	ldrh	r2, [r3, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	b29b      	uxth	r3, r3
 8003854:	4413      	add	r3, r2
 8003856:	b29a      	uxth	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	0fd9      	lsrs	r1, r3, #31
 800385e:	440b      	add	r3, r1
 8003860:	105b      	asrs	r3, r3, #1
 8003862:	425b      	negs	r3, r3
 8003864:	b29b      	uxth	r3, r3
 8003866:	4413      	add	r3, r2
 8003868:	b298      	uxth	r0, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	88da      	ldrh	r2, [r3, #6]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	b29b      	uxth	r3, r3
 8003872:	4413      	add	r3, r2
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	0fd9      	lsrs	r1, r3, #31
 800387c:	440b      	add	r3, r1
 800387e:	105b      	asrs	r3, r3, #1
 8003880:	425b      	negs	r3, r3
 8003882:	b29b      	uxth	r3, r3
 8003884:	4413      	add	r3, r2
 8003886:	b29c      	uxth	r4, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	889a      	ldrh	r2, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	b29b      	uxth	r3, r3
 8003890:	4413      	add	r3, r2
 8003892:	b29a      	uxth	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	0fd9      	lsrs	r1, r3, #31
 800389a:	440b      	add	r3, r1
 800389c:	105b      	asrs	r3, r3, #1
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	b29d      	uxth	r5, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	88da      	ldrh	r2, [r3, #6]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	0fd9      	lsrs	r1, r3, #31
 80038b6:	440b      	add	r3, r1
 80038b8:	105b      	asrs	r3, r3, #1
 80038ba:	425b      	negs	r3, r3
 80038bc:	b29b      	uxth	r3, r3
 80038be:	4413      	add	r3, r2
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80038c6:	9200      	str	r2, [sp, #0]
 80038c8:	462a      	mov	r2, r5
 80038ca:	4621      	mov	r1, r4
 80038cc:	f002 fe44 	bl	8006558 <LCD_DrawLine>
        LCD_DrawLine(x + centerX - deadzoneSideLength/2, y + centerY - deadzoneSideLength/2, x + centerX - deadzoneSideLength/2, y + centerY + deadzoneSideLength/2, RED);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	889a      	ldrh	r2, [r3, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	4413      	add	r3, r2
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	0fd9      	lsrs	r1, r3, #31
 80038e2:	440b      	add	r3, r1
 80038e4:	105b      	asrs	r3, r3, #1
 80038e6:	425b      	negs	r3, r3
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	b298      	uxth	r0, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	88da      	ldrh	r2, [r3, #6]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	0fd9      	lsrs	r1, r3, #31
 8003900:	440b      	add	r3, r1
 8003902:	105b      	asrs	r3, r3, #1
 8003904:	425b      	negs	r3, r3
 8003906:	b29b      	uxth	r3, r3
 8003908:	4413      	add	r3, r2
 800390a:	b29c      	uxth	r4, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	889a      	ldrh	r2, [r3, #4]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	b29b      	uxth	r3, r3
 8003914:	4413      	add	r3, r2
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	0fd9      	lsrs	r1, r3, #31
 800391e:	440b      	add	r3, r1
 8003920:	105b      	asrs	r3, r3, #1
 8003922:	425b      	negs	r3, r3
 8003924:	b29b      	uxth	r3, r3
 8003926:	4413      	add	r3, r2
 8003928:	b29d      	uxth	r5, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	88da      	ldrh	r2, [r3, #6]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	b29b      	uxth	r3, r3
 8003932:	4413      	add	r3, r2
 8003934:	b29a      	uxth	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	0fd9      	lsrs	r1, r3, #31
 800393c:	440b      	add	r3, r1
 800393e:	105b      	asrs	r3, r3, #1
 8003940:	b29b      	uxth	r3, r3
 8003942:	4413      	add	r3, r2
 8003944:	b29b      	uxth	r3, r3
 8003946:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800394a:	9200      	str	r2, [sp, #0]
 800394c:	462a      	mov	r2, r5
 800394e:	4621      	mov	r1, r4
 8003950:	f002 fe02 	bl	8006558 <LCD_DrawLine>
        LCD_DrawLine(x + centerX + deadzoneSideLength/2, y + centerY + deadzoneSideLength/2, x + centerX - deadzoneSideLength/2, y + centerY + deadzoneSideLength/2, RED);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	889a      	ldrh	r2, [r3, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	b29b      	uxth	r3, r3
 800395c:	4413      	add	r3, r2
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	0fd9      	lsrs	r1, r3, #31
 8003966:	440b      	add	r3, r1
 8003968:	105b      	asrs	r3, r3, #1
 800396a:	b29b      	uxth	r3, r3
 800396c:	4413      	add	r3, r2
 800396e:	b298      	uxth	r0, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	88da      	ldrh	r2, [r3, #6]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	b29b      	uxth	r3, r3
 8003978:	4413      	add	r3, r2
 800397a:	b29a      	uxth	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	0fd9      	lsrs	r1, r3, #31
 8003982:	440b      	add	r3, r1
 8003984:	105b      	asrs	r3, r3, #1
 8003986:	b29b      	uxth	r3, r3
 8003988:	4413      	add	r3, r2
 800398a:	b29c      	uxth	r4, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	889a      	ldrh	r2, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	b29b      	uxth	r3, r3
 8003994:	4413      	add	r3, r2
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	0fd9      	lsrs	r1, r3, #31
 800399e:	440b      	add	r3, r1
 80039a0:	105b      	asrs	r3, r3, #1
 80039a2:	425b      	negs	r3, r3
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	b29d      	uxth	r5, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	88da      	ldrh	r2, [r3, #6]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	0fd9      	lsrs	r1, r3, #31
 80039bc:	440b      	add	r3, r1
 80039be:	105b      	asrs	r3, r3, #1
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	4413      	add	r3, r2
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80039ca:	9200      	str	r2, [sp, #0]
 80039cc:	462a      	mov	r2, r5
 80039ce:	4621      	mov	r1, r4
 80039d0:	f002 fdc2 	bl	8006558 <LCD_DrawLine>
        LCD_DrawLine(x + centerX + deadzoneSideLength/2, y + centerY + deadzoneSideLength/2, x + centerX + deadzoneSideLength/2, y + centerY - deadzoneSideLength/2, RED);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	889a      	ldrh	r2, [r3, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4413      	add	r3, r2
 80039de:	b29a      	uxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	0fd9      	lsrs	r1, r3, #31
 80039e6:	440b      	add	r3, r1
 80039e8:	105b      	asrs	r3, r3, #1
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	b298      	uxth	r0, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	88da      	ldrh	r2, [r3, #6]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	0fd9      	lsrs	r1, r3, #31
 8003a02:	440b      	add	r3, r1
 8003a04:	105b      	asrs	r3, r3, #1
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	b29c      	uxth	r4, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	889a      	ldrh	r2, [r3, #4]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	0fd9      	lsrs	r1, r3, #31
 8003a1e:	440b      	add	r3, r1
 8003a20:	105b      	asrs	r3, r3, #1
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	b29d      	uxth	r5, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	88da      	ldrh	r2, [r3, #6]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	0fd9      	lsrs	r1, r3, #31
 8003a3a:	440b      	add	r3, r1
 8003a3c:	105b      	asrs	r3, r3, #1
 8003a3e:	425b      	negs	r3, r3
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003a4a:	9200      	str	r2, [sp, #0]
 8003a4c:	462a      	mov	r2, r5
 8003a4e:	4621      	mov	r1, r4
 8003a50:	f002 fd82 	bl	8006558 <LCD_DrawLine>
    }
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bdb0      	pop	{r4, r5, r7, pc}

08003a5c <_ZN8Joystick16insideDeadZone_XEv>:
    bool insideDeadZone_X(){
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
        return dotX > getInitialDotX() - deadzoneSideLength/2 && dotX < getInitialDotX() + deadzoneSideLength/2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8b5b      	ldrh	r3, [r3, #26]
 8003a68:	461c      	mov	r4, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f8b2 	bl	8003bd4 <_ZN8Joystick14getInitialDotXEv>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4619      	mov	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	0fda      	lsrs	r2, r3, #31
 8003a7a:	4413      	add	r3, r2
 8003a7c:	105b      	asrs	r3, r3, #1
 8003a7e:	425b      	negs	r3, r3
 8003a80:	440b      	add	r3, r1
 8003a82:	429c      	cmp	r4, r3
 8003a84:	dd11      	ble.n	8003aaa <_ZN8Joystick16insideDeadZone_XEv+0x4e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8b5b      	ldrh	r3, [r3, #26]
 8003a8a:	461c      	mov	r4, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f8a1 	bl	8003bd4 <_ZN8Joystick14getInitialDotXEv>
 8003a92:	4603      	mov	r3, r0
 8003a94:	4619      	mov	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	0fda      	lsrs	r2, r3, #31
 8003a9c:	4413      	add	r3, r2
 8003a9e:	105b      	asrs	r3, r3, #1
 8003aa0:	440b      	add	r3, r1
 8003aa2:	429c      	cmp	r4, r3
 8003aa4:	da01      	bge.n	8003aaa <_ZN8Joystick16insideDeadZone_XEv+0x4e>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <_ZN8Joystick16insideDeadZone_XEv+0x50>
 8003aaa:	2300      	movs	r3, #0
    }
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd90      	pop	{r4, r7, pc}

08003ab4 <_ZN8Joystick16insideDeadZone_YEv>:
    bool insideDeadZone_Y(){
 8003ab4:	b590      	push	{r4, r7, lr}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
        return dotY > getInitialDotY() - deadzoneSideLength/2 && dotY < getInitialDotY() + deadzoneSideLength/2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8b9b      	ldrh	r3, [r3, #28]
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f899 	bl	8003bfa <_ZN8Joystick14getInitialDotYEv>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4619      	mov	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	0fda      	lsrs	r2, r3, #31
 8003ad2:	4413      	add	r3, r2
 8003ad4:	105b      	asrs	r3, r3, #1
 8003ad6:	425b      	negs	r3, r3
 8003ad8:	440b      	add	r3, r1
 8003ada:	429c      	cmp	r4, r3
 8003adc:	dd11      	ble.n	8003b02 <_ZN8Joystick16insideDeadZone_YEv+0x4e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8b9b      	ldrh	r3, [r3, #28]
 8003ae2:	461c      	mov	r4, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f888 	bl	8003bfa <_ZN8Joystick14getInitialDotYEv>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4619      	mov	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	0fda      	lsrs	r2, r3, #31
 8003af4:	4413      	add	r3, r2
 8003af6:	105b      	asrs	r3, r3, #1
 8003af8:	440b      	add	r3, r1
 8003afa:	429c      	cmp	r4, r3
 8003afc:	da01      	bge.n	8003b02 <_ZN8Joystick16insideDeadZone_YEv+0x4e>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <_ZN8Joystick16insideDeadZone_YEv+0x50>
 8003b02:	2300      	movs	r3, #0
    }
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd90      	pop	{r4, r7, pc}

08003b0c <_ZN8Joystick5wrapXEt>:

    uint16_t wrapX(u_int16_t x)
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
    {
        if (x > 500)
 8003b18:	887b      	ldrh	r3, [r7, #2]
 8003b1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b1e:	d902      	bls.n	8003b26 <_ZN8Joystick5wrapXEt+0x1a>
            return dotX; // x=2048 if not touched
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8b5b      	ldrh	r3, [r3, #26]
 8003b24:	e01f      	b.n	8003b66 <_ZN8Joystick5wrapXEt+0x5a>
        if (x < this->x)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	889b      	ldrh	r3, [r3, #4]
 8003b2a:	887a      	ldrh	r2, [r7, #2]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d202      	bcs.n	8003b36 <_ZN8Joystick5wrapXEt+0x2a>
            return this->x;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	889b      	ldrh	r3, [r3, #4]
 8003b34:	e017      	b.n	8003b66 <_ZN8Joystick5wrapXEt+0x5a>
        if (x > this->x + width - dotRadius)
 8003b36:	887a      	ldrh	r2, [r7, #2]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	889b      	ldrh	r3, [r3, #4]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	891b      	ldrh	r3, [r3, #8]
 8003b42:	440b      	add	r3, r1
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	8a09      	ldrh	r1, [r1, #16]
 8003b48:	1a5b      	subs	r3, r3, r1
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	dd0a      	ble.n	8003b64 <_ZN8Joystick5wrapXEt+0x58>
            return this->x + width - dotRadius;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	889a      	ldrh	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	891b      	ldrh	r3, [r3, #8]
 8003b56:	4413      	add	r3, r2
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8a1b      	ldrh	r3, [r3, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	e000      	b.n	8003b66 <_ZN8Joystick5wrapXEt+0x5a>
        return x;
 8003b64:	887b      	ldrh	r3, [r7, #2]
    }
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <_ZN8Joystick5wrapYEt>:

    u_int16_t wrapY(u_int16_t y)
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
    {
        if (y > 500)
 8003b7c:	887b      	ldrh	r3, [r7, #2]
 8003b7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b82:	d902      	bls.n	8003b8a <_ZN8Joystick5wrapYEt+0x1a>
            return dotY; // y=2048 if not touched
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8b9b      	ldrh	r3, [r3, #28]
 8003b88:	e01f      	b.n	8003bca <_ZN8Joystick5wrapYEt+0x5a>
        if (y < this->y)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	88db      	ldrh	r3, [r3, #6]
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d202      	bcs.n	8003b9a <_ZN8Joystick5wrapYEt+0x2a>
            return this->y;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	88db      	ldrh	r3, [r3, #6]
 8003b98:	e017      	b.n	8003bca <_ZN8Joystick5wrapYEt+0x5a>
        if (y > this->y + height - dotRadius)
 8003b9a:	887a      	ldrh	r2, [r7, #2]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	88db      	ldrh	r3, [r3, #6]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	895b      	ldrh	r3, [r3, #10]
 8003ba6:	440b      	add	r3, r1
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	8a09      	ldrh	r1, [r1, #16]
 8003bac:	1a5b      	subs	r3, r3, r1
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	dd0a      	ble.n	8003bc8 <_ZN8Joystick5wrapYEt+0x58>
            return this->y + height - dotRadius;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	88da      	ldrh	r2, [r3, #6]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	895b      	ldrh	r3, [r3, #10]
 8003bba:	4413      	add	r3, r2
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8a1b      	ldrh	r3, [r3, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	e000      	b.n	8003bca <_ZN8Joystick5wrapYEt+0x5a>
        return y;
 8003bc8:	887b      	ldrh	r3, [r7, #2]
    }
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <_ZN8Joystick14getInitialDotXEv>:

    uint16_t getInitialDotX()
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
    {
        return width / 2 - dotRadius/2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	891b      	ldrh	r3, [r3, #8]
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8a1b      	ldrh	r3, [r3, #16]
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	b29b      	uxth	r3, r3
    }
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <_ZN8Joystick14getInitialDotYEv>:

    uint16_t getInitialDotY()
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
    {
        return height / 2 - dotRadius/2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	895b      	ldrh	r3, [r3, #10]
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8a1b      	ldrh	r3, [r3, #16]
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	b29b      	uxth	r3, r3
    }
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <_ZN8Joystick6updateEtt>:


    void update(u_int16_t x, u_int16_t y) override
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	803b      	strh	r3, [r7, #0]
    {
        // if the touchpad is not touched, do nothing
        if (isDragging && isInvalidInput(x, y)){
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7b9b      	ldrb	r3, [r3, #14]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <_ZN8Joystick6updateEtt+0x2e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	883a      	ldrh	r2, [r7, #0]
 8003c3c:	8879      	ldrh	r1, [r7, #2]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fa2a 	bl	8003098 <_ZN9UIElement14isInvalidInputEtt>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <_ZN8Joystick6updateEtt+0x2e>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <_ZN8Joystick6updateEtt+0x30>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01f      	beq.n	8003c94 <_ZN8Joystick6updateEtt+0x74>
            clearDot();
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff fd91 	bl	800377c <_ZN8Joystick8clearDotEv>
            dotX = getInitialDotX();
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ffba 	bl	8003bd4 <_ZN8Joystick14getInitialDotXEv>
 8003c60:	4603      	mov	r3, r0
 8003c62:	461a      	mov	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	835a      	strh	r2, [r3, #26]
            dotY = getInitialDotY();
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ffc6 	bl	8003bfa <_ZN8Joystick14getInitialDotYEv>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	839a      	strh	r2, [r3, #28]
            renderDot();
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff fda8 	bl	80037cc <_ZN8Joystick9renderDotEv>
            renderDeadZone();
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff fdcb 	bl	8003818 <_ZN8Joystick14renderDeadZoneEv>
            isDragging = false;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	739a      	strb	r2, [r3, #14]
            lastTick = HAL_GetTick();
 8003c88:	f005 fda2 	bl	80097d0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	62da      	str	r2, [r3, #44]	; 0x2c
            return;
 8003c92:	e09c      	b.n	8003dce <_ZN8Joystick6updateEtt+0x1ae>
        }
        if (x < this->x || x > this->x + width || y < this->y || y > this->y + height){
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	889b      	ldrh	r3, [r3, #4]
 8003c98:	887a      	ldrh	r2, [r7, #2]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d316      	bcc.n	8003ccc <_ZN8Joystick6updateEtt+0xac>
 8003c9e:	887a      	ldrh	r2, [r7, #2]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	889b      	ldrh	r3, [r3, #4]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	891b      	ldrh	r3, [r3, #8]
 8003caa:	440b      	add	r3, r1
 8003cac:	429a      	cmp	r2, r3
 8003cae:	dc0d      	bgt.n	8003ccc <_ZN8Joystick6updateEtt+0xac>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	88db      	ldrh	r3, [r3, #6]
 8003cb4:	883a      	ldrh	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d308      	bcc.n	8003ccc <_ZN8Joystick6updateEtt+0xac>
 8003cba:	883a      	ldrh	r2, [r7, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	88db      	ldrh	r3, [r3, #6]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	895b      	ldrh	r3, [r3, #10]
 8003cc6:	440b      	add	r3, r1
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	dd05      	ble.n	8003cd8 <_ZN8Joystick6updateEtt+0xb8>
            lastTick = HAL_GetTick();
 8003ccc:	f005 fd80 	bl	80097d0 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	62da      	str	r2, [r3, #44]	; 0x2c
            return;
 8003cd6:	e07a      	b.n	8003dce <_ZN8Joystick6updateEtt+0x1ae>
        }

        if (!isDragging){
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	7b9b      	ldrb	r3, [r3, #14]
 8003cdc:	f083 0301 	eor.w	r3, r3, #1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <_ZN8Joystick6updateEtt+0xe2>
            if (onPressed) onPressed();
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <_ZN8Joystick6updateEtt+0xd4>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	4798      	blx	r3
            if (performanceMode){
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7e1b      	ldrb	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <_ZN8Joystick6updateEtt+0xe2>
                clearDot();
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff fd3d 	bl	800377c <_ZN8Joystick8clearDotEv>
            }
        }
        
        isDragging = true;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	739a      	strb	r2, [r3, #14]

        if (performanceMode){
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7e1b      	ldrb	r3, [r3, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01a      	beq.n	8003d46 <_ZN8Joystick6updateEtt+0x126>
            dotX = wrapX(x) - this->x;
 8003d10:	887b      	ldrh	r3, [r7, #2]
 8003d12:	4619      	mov	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff fef9 	bl	8003b0c <_ZN8Joystick5wrapXEt>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	889b      	ldrh	r3, [r3, #4]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	835a      	strh	r2, [r3, #26]
            dotY = wrapY(y) - this->y;
 8003d2a:	883b      	ldrh	r3, [r7, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff ff1e 	bl	8003b70 <_ZN8Joystick5wrapYEt>
 8003d34:	4603      	mov	r3, r0
 8003d36:	461a      	mov	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	88db      	ldrh	r3, [r3, #6]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	839a      	strh	r2, [r3, #28]
 8003d44:	e037      	b.n	8003db6 <_ZN8Joystick6updateEtt+0x196>
        }else{
            int _dotX = wrapX(x) - this->x;
 8003d46:	887b      	ldrh	r3, [r7, #2]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fede 	bl	8003b0c <_ZN8Joystick5wrapXEt>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461a      	mov	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	889b      	ldrh	r3, [r3, #4]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	60fb      	str	r3, [r7, #12]
            int _dotY = wrapY(y) - this->y;
 8003d5c:	883b      	ldrh	r3, [r7, #0]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff05 	bl	8003b70 <_ZN8Joystick5wrapYEt>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	88db      	ldrh	r3, [r3, #6]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	60bb      	str	r3, [r7, #8]

            if (lastDotX != _dotX || lastDotY != _dotY)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8bdb      	ldrh	r3, [r3, #30]
 8003d76:	461a      	mov	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d105      	bne.n	8003d8a <_ZN8Joystick6updateEtt+0x16a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8c1b      	ldrh	r3, [r3, #32]
 8003d82:	461a      	mov	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d015      	beq.n	8003db6 <_ZN8Joystick6updateEtt+0x196>
            {
                clearDot();
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff fcf6 	bl	800377c <_ZN8Joystick8clearDotEv>
                dotX = _dotX;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	835a      	strh	r2, [r3, #26]
                dotY = _dotY;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	839a      	strh	r2, [r3, #28]
                renderDot();
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fd13 	bl	80037cc <_ZN8Joystick9renderDotEv>
                lastDotX = dotX;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8b5a      	ldrh	r2, [r3, #26]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	83da      	strh	r2, [r3, #30]
                lastDotY = dotY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8b9a      	ldrh	r2, [r3, #28]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	841a      	strh	r2, [r3, #32]
            } // render only when the coordinate changes
        }
        // execute the function
        if (whilePressing)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <_ZN8Joystick6updateEtt+0x1a4>
            whilePressing();
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	4798      	blx	r3
        lastTick = HAL_GetTick();
 8003dc4:	f005 fd04 	bl	80097d0 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <_ZN8Joystick6get_dXEv>:

    float get_dX()
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    {
        if (insideDeadZone_X())
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff fe3d 	bl	8003a5c <_ZN8Joystick16insideDeadZone_XEv>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <_ZN8Joystick6get_dXEv+0x1a>
            return 0;
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e016      	b.n	8003e1c <_ZN8Joystick6get_dXEv+0x48>
        return (float)dotX / width - 0.5;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8b5b      	ldrh	r3, [r3, #26]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fc ffc4 	bl	8000d80 <__aeabi_ui2f>
 8003df8:	4604      	mov	r4, r0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	891b      	ldrh	r3, [r3, #8]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc ffc2 	bl	8000d88 <__aeabi_i2f>
 8003e04:	4603      	mov	r3, r0
 8003e06:	4619      	mov	r1, r3
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f7fd f8c5 	bl	8000f98 <__aeabi_fdiv>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fc ff01 	bl	8000c1c <__aeabi_fsub>
 8003e1a:	4603      	mov	r3, r0
    }
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd90      	pop	{r4, r7, pc}

08003e24 <_ZN8Joystick9get_dX_dtEv>:

    float get_dX_dt()
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
    {
        float dTime = (HAL_GetTick() - lastTick) / 1000.0;
 8003e2c:	f005 fcd0 	bl	80097d0 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fc fb3f 	bl	80004bc <__aeabi_ui2d>
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <_ZN8Joystick9get_dX_dtEv+0x50>)
 8003e44:	f7fc fcde 	bl	8000804 <__aeabi_ddiv>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f7fc fe90 	bl	8000b74 <__aeabi_d2f>
 8003e54:	4603      	mov	r3, r0
 8003e56:	60fb      	str	r3, [r7, #12]
        return get_dX() * dTime;
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff ffbb 	bl	8003dd4 <_ZN8Joystick6get_dXEv>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	68f9      	ldr	r1, [r7, #12]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc ffe4 	bl	8000e30 <__aeabi_fmul>
 8003e68:	4603      	mov	r3, r0
    }
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	408f4000 	.word	0x408f4000

08003e78 <_ZN8Joystick6get_dYEv>:

    float get_dY()
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
    {
        if (insideDeadZone_Y())
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fe17 	bl	8003ab4 <_ZN8Joystick16insideDeadZone_YEv>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <_ZN8Joystick6get_dYEv+0x1a>
            return 0;
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e016      	b.n	8003ec0 <_ZN8Joystick6get_dYEv+0x48>
        return (float)dotY / height - 0.5;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8b9b      	ldrh	r3, [r3, #28]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fc ff72 	bl	8000d80 <__aeabi_ui2f>
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	895b      	ldrh	r3, [r3, #10]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc ff70 	bl	8000d88 <__aeabi_i2f>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4620      	mov	r0, r4
 8003eae:	f7fd f873 	bl	8000f98 <__aeabi_fdiv>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fc feaf 	bl	8000c1c <__aeabi_fsub>
 8003ebe:	4603      	mov	r3, r0
    }
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd90      	pop	{r4, r7, pc}

08003ec8 <_ZN8Joystick9get_dY_dtEv>:

    float get_dY_dt()
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
    {
        float dTime = (HAL_GetTick() - lastTick) / 1000.0;
 8003ed0:	f005 fc7e 	bl	80097d0 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fc faed 	bl	80004bc <__aeabi_ui2d>
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <_ZN8Joystick9get_dY_dtEv+0x50>)
 8003ee8:	f7fc fc8c 	bl	8000804 <__aeabi_ddiv>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f7fc fe3e 	bl	8000b74 <__aeabi_d2f>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	60fb      	str	r3, [r7, #12]
        return get_dY() * dTime;
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff ffbb 	bl	8003e78 <_ZN8Joystick6get_dYEv>
 8003f02:	4603      	mov	r3, r0
 8003f04:	68f9      	ldr	r1, [r7, #12]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fc ff92 	bl	8000e30 <__aeabi_fmul>
 8003f0c:	4603      	mov	r3, r0
    }
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	408f4000 	.word	0x408f4000

08003f1c <_Z7fastsini>:
#include <cmath>



// 实现 sin 函数，考虑周期性和符号
float fastsin(int degree){
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
    degree = (degree % 360 + 360) % 360; // 首先将角度规约到 0-359 度
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a23      	ldr	r2, [pc, #140]	; (8003fb4 <_Z7fastsini+0x98>)
 8003f28:	fb82 1203 	smull	r1, r2, r2, r3
 8003f2c:	441a      	add	r2, r3
 8003f2e:	1211      	asrs	r1, r2, #8
 8003f30:	17da      	asrs	r2, r3, #31
 8003f32:	1a8a      	subs	r2, r1, r2
 8003f34:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003f38:	fb01 f202 	mul.w	r2, r1, r2
 8003f3c:	1a9a      	subs	r2, r3, r2
 8003f3e:	f502 73b4 	add.w	r3, r2, #360	; 0x168
 8003f42:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <_Z7fastsini+0x98>)
 8003f44:	fb82 1203 	smull	r1, r2, r2, r3
 8003f48:	441a      	add	r2, r3
 8003f4a:	1211      	asrs	r1, r2, #8
 8003f4c:	17da      	asrs	r2, r3, #31
 8003f4e:	1a8a      	subs	r2, r1, r2
 8003f50:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003f54:	fb01 f202 	mul.w	r2, r1, r2
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	607b      	str	r3, [r7, #4]
    if (degree < 90) {
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b59      	cmp	r3, #89	; 0x59
 8003f60:	dc04      	bgt.n	8003f6c <_Z7fastsini+0x50>
        return sinTable[degree];
 8003f62:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <_Z7fastsini+0x9c>)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f6a:	e01e      	b.n	8003faa <_Z7fastsini+0x8e>
    } else if (degree < 180) {
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2bb3      	cmp	r3, #179	; 0xb3
 8003f70:	dc06      	bgt.n	8003f80 <_Z7fastsini+0x64>
        return sinTable[179 - degree];  // 90到179度
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1c3 03b3 	rsb	r3, r3, #179	; 0xb3
 8003f78:	4a0f      	ldr	r2, [pc, #60]	; (8003fb8 <_Z7fastsini+0x9c>)
 8003f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7e:	e014      	b.n	8003faa <_Z7fastsini+0x8e>
    } else if (degree < 270) {
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8003f86:	da07      	bge.n	8003f98 <_Z7fastsini+0x7c>
        return -sinTable[degree - 180];  // 180到269度
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3bb4      	subs	r3, #180	; 0xb4
 8003f8c:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <_Z7fastsini+0x9c>)
 8003f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f92:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f96:	e008      	b.n	8003faa <_Z7fastsini+0x8e>
    } else {
        return -sinTable[359 - degree];  // 270到359度
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f5c3 73b3 	rsb	r3, r3, #358	; 0x166
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	4a05      	ldr	r2, [pc, #20]	; (8003fb8 <_Z7fastsini+0x9c>)
 8003fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    }
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	b60b60b7 	.word	0xb60b60b7
 8003fb8:	08020ecc 	.word	0x08020ecc

08003fbc <_Z7fastcosi>:

// 实现 cos 函数，使用 sin 函数
float fastcos(int degree){
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
    return fastsin(degree + 90);  // 直接利用 sin 函数实现
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	335a      	adds	r3, #90	; 0x5a
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ffa7 	bl	8003f1c <_Z7fastsini>
 8003fce:	4603      	mov	r3, r0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <_Z11rotatePointRK7Point3D4Axis>:
float sinUnderCurrentAngleY = 0;
float cosUnderCurrentAngleY = 0;
float sinUnderCurrentAngleZ = 0;
float cosUnderCurrentAngleZ = 0;

Point3D rotatePoint(const Point3D &point, Axis axis) {
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	71fb      	strb	r3, [r7, #7]
    Point3D newPoint;
    switch (axis) {
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d07f      	beq.n	80040ec <_Z11rotatePointRK7Point3D4Axis+0x114>
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	f300 80b8 	bgt.w	8004162 <_Z11rotatePointRK7Point3D4Axis+0x18a>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <_Z11rotatePointRK7Point3D4Axis+0x24>
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d03b      	beq.n	8004072 <_Z11rotatePointRK7Point3D4Axis+0x9a>
            newPoint.x = point.x * cosUnderCurrentAngleZ - point.y * sinUnderCurrentAngleZ;
            newPoint.y = point.x * sinUnderCurrentAngleZ + point.y * cosUnderCurrentAngleZ;
            newPoint.z = point.z;
            break;
    }
    return newPoint;
 8003ffa:	e0b2      	b.n	8004162 <_Z11rotatePointRK7Point3D4Axis+0x18a>
            newPoint.x = point.x;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	601a      	str	r2, [r3, #0]
            newPoint.y = point.y * cosUnderCurrentAngleX - point.z * sinUnderCurrentAngleX;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4a58      	ldr	r2, [pc, #352]	; (800416c <_Z11rotatePointRK7Point3D4Axis+0x194>)
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc ff0e 	bl	8000e30 <__aeabi_fmul>
 8004014:	4603      	mov	r3, r0
 8004016:	461c      	mov	r4, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a54      	ldr	r2, [pc, #336]	; (8004170 <_Z11rotatePointRK7Point3D4Axis+0x198>)
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f7fc ff04 	bl	8000e30 <__aeabi_fmul>
 8004028:	4603      	mov	r3, r0
 800402a:	4619      	mov	r1, r3
 800402c:	4620      	mov	r0, r4
 800402e:	f7fc fdf5 	bl	8000c1c <__aeabi_fsub>
 8004032:	4603      	mov	r3, r0
 8004034:	461a      	mov	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	605a      	str	r2, [r3, #4]
            newPoint.z = point.y * sinUnderCurrentAngleX + point.z * cosUnderCurrentAngleX;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4a4c      	ldr	r2, [pc, #304]	; (8004170 <_Z11rotatePointRK7Point3D4Axis+0x198>)
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f7fc fef3 	bl	8000e30 <__aeabi_fmul>
 800404a:	4603      	mov	r3, r0
 800404c:	461c      	mov	r4, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	4a46      	ldr	r2, [pc, #280]	; (800416c <_Z11rotatePointRK7Point3D4Axis+0x194>)
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7fc fee9 	bl	8000e30 <__aeabi_fmul>
 800405e:	4603      	mov	r3, r0
 8004060:	4619      	mov	r1, r3
 8004062:	4620      	mov	r0, r4
 8004064:	f7fc fddc 	bl	8000c20 <__addsf3>
 8004068:	4603      	mov	r3, r0
 800406a:	461a      	mov	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	609a      	str	r2, [r3, #8]
            break;
 8004070:	e077      	b.n	8004162 <_Z11rotatePointRK7Point3D4Axis+0x18a>
            newPoint.x = point.x * cosUnderCurrentAngleY + point.z * sinUnderCurrentAngleY;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a3f      	ldr	r2, [pc, #252]	; (8004174 <_Z11rotatePointRK7Point3D4Axis+0x19c>)
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7fc fed7 	bl	8000e30 <__aeabi_fmul>
 8004082:	4603      	mov	r3, r0
 8004084:	461c      	mov	r4, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	4a3b      	ldr	r2, [pc, #236]	; (8004178 <_Z11rotatePointRK7Point3D4Axis+0x1a0>)
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f7fc fecd 	bl	8000e30 <__aeabi_fmul>
 8004096:	4603      	mov	r3, r0
 8004098:	4619      	mov	r1, r3
 800409a:	4620      	mov	r0, r4
 800409c:	f7fc fdc0 	bl	8000c20 <__addsf3>
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	601a      	str	r2, [r3, #0]
            newPoint.y = point.y;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	605a      	str	r2, [r3, #4]
            newPoint.z = -point.x * sinUnderCurrentAngleY + point.z * cosUnderCurrentAngleY;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80040b8:	4a2f      	ldr	r2, [pc, #188]	; (8004178 <_Z11rotatePointRK7Point3D4Axis+0x1a0>)
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc feb6 	bl	8000e30 <__aeabi_fmul>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461c      	mov	r4, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a29      	ldr	r2, [pc, #164]	; (8004174 <_Z11rotatePointRK7Point3D4Axis+0x19c>)
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fc feac 	bl	8000e30 <__aeabi_fmul>
 80040d8:	4603      	mov	r3, r0
 80040da:	4619      	mov	r1, r3
 80040dc:	4620      	mov	r0, r4
 80040de:	f7fc fd9f 	bl	8000c20 <__addsf3>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461a      	mov	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	609a      	str	r2, [r3, #8]
            break;
 80040ea:	e03a      	b.n	8004162 <_Z11rotatePointRK7Point3D4Axis+0x18a>
            newPoint.x = point.x * cosUnderCurrentAngleZ - point.y * sinUnderCurrentAngleZ;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a22      	ldr	r2, [pc, #136]	; (800417c <_Z11rotatePointRK7Point3D4Axis+0x1a4>)
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc fe9a 	bl	8000e30 <__aeabi_fmul>
 80040fc:	4603      	mov	r3, r0
 80040fe:	461c      	mov	r4, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <_Z11rotatePointRK7Point3D4Axis+0x1a8>)
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc fe90 	bl	8000e30 <__aeabi_fmul>
 8004110:	4603      	mov	r3, r0
 8004112:	4619      	mov	r1, r3
 8004114:	4620      	mov	r0, r4
 8004116:	f7fc fd81 	bl	8000c1c <__aeabi_fsub>
 800411a:	4603      	mov	r3, r0
 800411c:	461a      	mov	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	601a      	str	r2, [r3, #0]
            newPoint.y = point.x * sinUnderCurrentAngleZ + point.y * cosUnderCurrentAngleZ;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a16      	ldr	r2, [pc, #88]	; (8004180 <_Z11rotatePointRK7Point3D4Axis+0x1a8>)
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f7fc fe7f 	bl	8000e30 <__aeabi_fmul>
 8004132:	4603      	mov	r3, r0
 8004134:	461c      	mov	r4, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4a10      	ldr	r2, [pc, #64]	; (800417c <_Z11rotatePointRK7Point3D4Axis+0x1a4>)
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	4611      	mov	r1, r2
 8004140:	4618      	mov	r0, r3
 8004142:	f7fc fe75 	bl	8000e30 <__aeabi_fmul>
 8004146:	4603      	mov	r3, r0
 8004148:	4619      	mov	r1, r3
 800414a:	4620      	mov	r0, r4
 800414c:	f7fc fd68 	bl	8000c20 <__addsf3>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	605a      	str	r2, [r3, #4]
            newPoint.z = point.z;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	609a      	str	r2, [r3, #8]
            break;
 8004160:	bf00      	nop
    return newPoint;
 8004162:	bf00      	nop
}
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bd90      	pop	{r4, r7, pc}
 800416c:	200024e8 	.word	0x200024e8
 8004170:	200024e4 	.word	0x200024e4
 8004174:	200024f0 	.word	0x200024f0
 8004178:	200024ec 	.word	0x200024ec
 800417c:	200024f8 	.word	0x200024f8
 8004180:	200024f4 	.word	0x200024f4

08004184 <_Z8setPixeliitf>:
float rotateAngleY = 0;
float rotateAngleZ = 0;

const int r = 150;
uint8_t vRAM[r*r*2] = {};
void setPixel(int x, int y, uint16_t color, float alpha) {
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b089      	sub	sp, #36	; 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	4613      	mov	r3, r2
 8004192:	80fb      	strh	r3, [r7, #6]
    if (x < 0 || x >= r || y < 0 || y >= r) return;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f2c0 80be 	blt.w	8004318 <_Z8setPixeliitf+0x194>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b95      	cmp	r3, #149	; 0x95
 80041a0:	f300 80ba 	bgt.w	8004318 <_Z8setPixeliitf+0x194>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f2c0 80b6 	blt.w	8004318 <_Z8setPixeliitf+0x194>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b95      	cmp	r3, #149	; 0x95
 80041b0:	f300 80b2 	bgt.w	8004318 <_Z8setPixeliitf+0x194>
    
    uint16_t bg_color = ((uint16_t*)vRAM)[x+y*r];
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2296      	movs	r2, #150	; 0x96
 80041b8:	fb03 f202 	mul.w	r2, r3, r2
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4a57      	ldr	r2, [pc, #348]	; (8004320 <_Z8setPixeliitf+0x19c>)
 80041c4:	4413      	add	r3, r2
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	83fb      	strh	r3, [r7, #30]
    uint8_t bg_red   = (bg_color >> 11) & 0x1F;
 80041ca:	8bfb      	ldrh	r3, [r7, #30]
 80041cc:	0adb      	lsrs	r3, r3, #11
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	777b      	strb	r3, [r7, #29]
    uint8_t bg_green = (bg_color >> 5) & 0x3F;
 80041d2:	8bfb      	ldrh	r3, [r7, #30]
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041de:	773b      	strb	r3, [r7, #28]
    uint8_t bg_blue  = bg_color & 0x1F;
 80041e0:	8bfb      	ldrh	r3, [r7, #30]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	76fb      	strb	r3, [r7, #27]

    uint8_t fg_red   = (color >> 11) & 0x1F;
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	0adb      	lsrs	r3, r3, #11
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	76bb      	strb	r3, [r7, #26]
    uint8_t fg_green = (color >> 5) & 0x3F;
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041fe:	767b      	strb	r3, [r7, #25]
    uint8_t fg_blue  = color & 0x1F;
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	763b      	strb	r3, [r7, #24]

    uint8_t red   = (uint8_t)(bg_red * (1 - alpha) + fg_red * alpha);
 800420a:	7f7b      	ldrb	r3, [r7, #29]
 800420c:	4618      	mov	r0, r3
 800420e:	f7fc fdbb 	bl	8000d88 <__aeabi_i2f>
 8004212:	4604      	mov	r4, r0
 8004214:	6839      	ldr	r1, [r7, #0]
 8004216:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800421a:	f7fc fcff 	bl	8000c1c <__aeabi_fsub>
 800421e:	4603      	mov	r3, r0
 8004220:	4619      	mov	r1, r3
 8004222:	4620      	mov	r0, r4
 8004224:	f7fc fe04 	bl	8000e30 <__aeabi_fmul>
 8004228:	4603      	mov	r3, r0
 800422a:	461c      	mov	r4, r3
 800422c:	7ebb      	ldrb	r3, [r7, #26]
 800422e:	4618      	mov	r0, r3
 8004230:	f7fc fdaa 	bl	8000d88 <__aeabi_i2f>
 8004234:	4603      	mov	r3, r0
 8004236:	6839      	ldr	r1, [r7, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7fc fdf9 	bl	8000e30 <__aeabi_fmul>
 800423e:	4603      	mov	r3, r0
 8004240:	4619      	mov	r1, r3
 8004242:	4620      	mov	r0, r4
 8004244:	f7fc fcec 	bl	8000c20 <__addsf3>
 8004248:	4603      	mov	r3, r0
 800424a:	4618      	mov	r0, r3
 800424c:	f7fc fff2 	bl	8001234 <__aeabi_f2uiz>
 8004250:	4603      	mov	r3, r0
 8004252:	75fb      	strb	r3, [r7, #23]
    uint8_t green = (uint8_t)(bg_green * (1 - alpha) + fg_green * alpha);
 8004254:	7f3b      	ldrb	r3, [r7, #28]
 8004256:	4618      	mov	r0, r3
 8004258:	f7fc fd96 	bl	8000d88 <__aeabi_i2f>
 800425c:	4604      	mov	r4, r0
 800425e:	6839      	ldr	r1, [r7, #0]
 8004260:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004264:	f7fc fcda 	bl	8000c1c <__aeabi_fsub>
 8004268:	4603      	mov	r3, r0
 800426a:	4619      	mov	r1, r3
 800426c:	4620      	mov	r0, r4
 800426e:	f7fc fddf 	bl	8000e30 <__aeabi_fmul>
 8004272:	4603      	mov	r3, r0
 8004274:	461c      	mov	r4, r3
 8004276:	7e7b      	ldrb	r3, [r7, #25]
 8004278:	4618      	mov	r0, r3
 800427a:	f7fc fd85 	bl	8000d88 <__aeabi_i2f>
 800427e:	4603      	mov	r3, r0
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fc fdd4 	bl	8000e30 <__aeabi_fmul>
 8004288:	4603      	mov	r3, r0
 800428a:	4619      	mov	r1, r3
 800428c:	4620      	mov	r0, r4
 800428e:	f7fc fcc7 	bl	8000c20 <__addsf3>
 8004292:	4603      	mov	r3, r0
 8004294:	4618      	mov	r0, r3
 8004296:	f7fc ffcd 	bl	8001234 <__aeabi_f2uiz>
 800429a:	4603      	mov	r3, r0
 800429c:	75bb      	strb	r3, [r7, #22]
    uint8_t blue  = (uint8_t)(bg_blue * (1 - alpha) + fg_blue * alpha);
 800429e:	7efb      	ldrb	r3, [r7, #27]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fc fd71 	bl	8000d88 <__aeabi_i2f>
 80042a6:	4604      	mov	r4, r0
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80042ae:	f7fc fcb5 	bl	8000c1c <__aeabi_fsub>
 80042b2:	4603      	mov	r3, r0
 80042b4:	4619      	mov	r1, r3
 80042b6:	4620      	mov	r0, r4
 80042b8:	f7fc fdba 	bl	8000e30 <__aeabi_fmul>
 80042bc:	4603      	mov	r3, r0
 80042be:	461c      	mov	r4, r3
 80042c0:	7e3b      	ldrb	r3, [r7, #24]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fc fd60 	bl	8000d88 <__aeabi_i2f>
 80042c8:	4603      	mov	r3, r0
 80042ca:	6839      	ldr	r1, [r7, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fc fdaf 	bl	8000e30 <__aeabi_fmul>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4619      	mov	r1, r3
 80042d6:	4620      	mov	r0, r4
 80042d8:	f7fc fca2 	bl	8000c20 <__addsf3>
 80042dc:	4603      	mov	r3, r0
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fc ffa8 	bl	8001234 <__aeabi_f2uiz>
 80042e4:	4603      	mov	r3, r0
 80042e6:	757b      	strb	r3, [r7, #21]

    ((uint16_t*)vRAM)[x+y*r] = (red << 11) | (green << 5) | blue;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	02db      	lsls	r3, r3, #11
 80042ec:	b21a      	sxth	r2, r3
 80042ee:	7dbb      	ldrb	r3, [r7, #22]
 80042f0:	015b      	lsls	r3, r3, #5
 80042f2:	b21b      	sxth	r3, r3
 80042f4:	4313      	orrs	r3, r2
 80042f6:	b21a      	sxth	r2, r3
 80042f8:	7d7b      	ldrb	r3, [r7, #21]
 80042fa:	b21b      	sxth	r3, r3
 80042fc:	4313      	orrs	r3, r2
 80042fe:	b219      	sxth	r1, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2296      	movs	r2, #150	; 0x96
 8004304:	fb03 f202 	mul.w	r2, r3, r2
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	4a04      	ldr	r2, [pc, #16]	; (8004320 <_Z8setPixeliitf+0x19c>)
 8004310:	4413      	add	r3, r2
 8004312:	b28a      	uxth	r2, r1
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	e000      	b.n	800431a <_Z8setPixeliitf+0x196>
    if (x < 0 || x >= r || y < 0 || y >= r) return;
 8004318:	bf00      	nop
}
 800431a:	3724      	adds	r7, #36	; 0x24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd90      	pop	{r4, r7, pc}
 8004320:	20002508 	.word	0x20002508

08004324 <_Z14drawLineToVRAMttttt>:


void drawLineToVRAM(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8004324:	b590      	push	{r4, r7, lr}
 8004326:	b089      	sub	sp, #36	; 0x24
 8004328:	af00      	add	r7, sp, #0
 800432a:	4604      	mov	r4, r0
 800432c:	4608      	mov	r0, r1
 800432e:	4611      	mov	r1, r2
 8004330:	461a      	mov	r2, r3
 8004332:	4623      	mov	r3, r4
 8004334:	80fb      	strh	r3, [r7, #6]
 8004336:	4603      	mov	r3, r0
 8004338:	80bb      	strh	r3, [r7, #4]
 800433a:	460b      	mov	r3, r1
 800433c:	807b      	strh	r3, [r7, #2]
 800433e:	4613      	mov	r3, r2
 8004340:	803b      	strh	r3, [r7, #0]
    int dx = abs(x1 - x0);
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	bfb8      	it	lt
 800434c:	425b      	neglt	r3, r3
 800434e:	61bb      	str	r3, [r7, #24]
    int dy = -abs(y1 - y0);
 8004350:	883a      	ldrh	r2, [r7, #0]
 8004352:	88bb      	ldrh	r3, [r7, #4]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	bfb8      	it	lt
 800435a:	425b      	neglt	r3, r3
 800435c:	425b      	negs	r3, r3
 800435e:	617b      	str	r3, [r7, #20]
    int sx = x0 < x1 ? 1 : -1;
 8004360:	88fa      	ldrh	r2, [r7, #6]
 8004362:	887b      	ldrh	r3, [r7, #2]
 8004364:	429a      	cmp	r2, r3
 8004366:	d201      	bcs.n	800436c <_Z14drawLineToVRAMttttt+0x48>
 8004368:	2301      	movs	r3, #1
 800436a:	e001      	b.n	8004370 <_Z14drawLineToVRAMttttt+0x4c>
 800436c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004370:	613b      	str	r3, [r7, #16]
    int sy = y0 < y1 ? 1 : -1;
 8004372:	88ba      	ldrh	r2, [r7, #4]
 8004374:	883b      	ldrh	r3, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d201      	bcs.n	800437e <_Z14drawLineToVRAMttttt+0x5a>
 800437a:	2301      	movs	r3, #1
 800437c:	e001      	b.n	8004382 <_Z14drawLineToVRAMttttt+0x5e>
 800437e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004382:	60fb      	str	r3, [r7, #12]
    int err = dx + dy;  // error value e_xy
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	4413      	add	r3, r2
 800438a:	61fb      	str	r3, [r7, #28]

    while (true) {
        setPixel(x0, y0, color, 1.0);  // Set the pixel with full color intensity
 800438c:	88f8      	ldrh	r0, [r7, #6]
 800438e:	88b9      	ldrh	r1, [r7, #4]
 8004390:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004392:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004396:	f7ff fef5 	bl	8004184 <_Z8setPixeliitf>
        if (x0 == x1 && y0 == y1) break;
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	887b      	ldrh	r3, [r7, #2]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d103      	bne.n	80043aa <_Z14drawLineToVRAMttttt+0x86>
 80043a2:	88ba      	ldrh	r2, [r7, #4]
 80043a4:	883b      	ldrh	r3, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d01d      	beq.n	80043e6 <_Z14drawLineToVRAMttttt+0xc2>
        int e2 = 2 * err;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) {  // e_xy + e_x > 0
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	db08      	blt.n	80043ca <_Z14drawLineToVRAMttttt+0xa6>
            err += dy;
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	4413      	add	r3, r2
 80043be:	61fb      	str	r3, [r7, #28]
            x0 += sx;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	4413      	add	r3, r2
 80043c8:	80fb      	strh	r3, [r7, #6]
        }
        if (e2 <= dx) {  // e_xy + e_y < 0
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	dcdc      	bgt.n	800438c <_Z14drawLineToVRAMttttt+0x68>
            err += dx;
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	4413      	add	r3, r2
 80043d8:	61fb      	str	r3, [r7, #28]
            y0 += sy;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	b29a      	uxth	r2, r3
 80043de:	88bb      	ldrh	r3, [r7, #4]
 80043e0:	4413      	add	r3, r2
 80043e2:	80bb      	strh	r3, [r7, #4]
        }
    }
 80043e4:	e7d2      	b.n	800438c <_Z14drawLineToVRAMttttt+0x68>
        if (x0 == x1 && y0 == y1) break;
 80043e6:	bf00      	nop
}
 80043e8:	bf00      	nop
 80043ea:	3724      	adds	r7, #36	; 0x24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd90      	pop	{r4, r7, pc}

080043f0 <_Z17drawLineToVRAM_AAttttt>:


// anti-aliased
void drawLineToVRAM_AA(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80043f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043f4:	b08b      	sub	sp, #44	; 0x2c
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4606      	mov	r6, r0
 80043fa:	4608      	mov	r0, r1
 80043fc:	4611      	mov	r1, r2
 80043fe:	461a      	mov	r2, r3
 8004400:	4633      	mov	r3, r6
 8004402:	80fb      	strh	r3, [r7, #6]
 8004404:	4603      	mov	r3, r0
 8004406:	80bb      	strh	r3, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]
 800440c:	4613      	mov	r3, r2
 800440e:	803b      	strh	r3, [r7, #0]
    bool steep = fabs(y1 - y0) > fabs(x1 - x0);
 8004410:	883a      	ldrh	r2, [r7, #0]
 8004412:	88bb      	ldrh	r3, [r7, #4]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	4618      	mov	r0, r3
 8004418:	f7fc f860 	bl	80004dc <__aeabi_i2d>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4614      	mov	r4, r2
 8004422:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004426:	887a      	ldrh	r2, [r7, #2]
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	4618      	mov	r0, r3
 800442e:	f7fc f855 	bl	80004dc <__aeabi_i2d>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4690      	mov	r8, r2
 8004438:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800443c:	2301      	movs	r3, #1
 800443e:	461e      	mov	r6, r3
 8004440:	4642      	mov	r2, r8
 8004442:	464b      	mov	r3, r9
 8004444:	4620      	mov	r0, r4
 8004446:	4629      	mov	r1, r5
 8004448:	f7fc fb42 	bl	8000ad0 <__aeabi_dcmpgt>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <_Z17drawLineToVRAM_AAttttt+0x66>
 8004452:	2300      	movs	r3, #0
 8004454:	461e      	mov	r6, r3
 8004456:	76fe      	strb	r6, [r7, #27]
    if (steep) {
 8004458:	7efb      	ldrb	r3, [r7, #27]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <_Z17drawLineToVRAM_AAttttt+0x86>
        uint16_t temp = x0;
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	833b      	strh	r3, [r7, #24]
        x0 = y0;
 8004462:	88bb      	ldrh	r3, [r7, #4]
 8004464:	80fb      	strh	r3, [r7, #6]
        y0 = temp;
 8004466:	8b3b      	ldrh	r3, [r7, #24]
 8004468:	80bb      	strh	r3, [r7, #4]

        temp = x1;
 800446a:	887b      	ldrh	r3, [r7, #2]
 800446c:	833b      	strh	r3, [r7, #24]
        x1 = y1;
 800446e:	883b      	ldrh	r3, [r7, #0]
 8004470:	807b      	strh	r3, [r7, #2]
        y1 = temp;
 8004472:	8b3b      	ldrh	r3, [r7, #24]
 8004474:	803b      	strh	r3, [r7, #0]
    }
    if (x0 > x1) {
 8004476:	88fa      	ldrh	r2, [r7, #6]
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	429a      	cmp	r2, r3
 800447c:	d90b      	bls.n	8004496 <_Z17drawLineToVRAM_AAttttt+0xa6>
        uint16_t temp = x0;
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	82fb      	strh	r3, [r7, #22]
        x0 = x1;
 8004482:	887b      	ldrh	r3, [r7, #2]
 8004484:	80fb      	strh	r3, [r7, #6]
        x1 = temp;
 8004486:	8afb      	ldrh	r3, [r7, #22]
 8004488:	807b      	strh	r3, [r7, #2]

        temp = y0;
 800448a:	88bb      	ldrh	r3, [r7, #4]
 800448c:	82fb      	strh	r3, [r7, #22]
        y0 = y1;
 800448e:	883b      	ldrh	r3, [r7, #0]
 8004490:	80bb      	strh	r3, [r7, #4]
        y1 = temp;
 8004492:	8afb      	ldrh	r3, [r7, #22]
 8004494:	803b      	strh	r3, [r7, #0]
    }

    float dx = x1 - x0;
 8004496:	887a      	ldrh	r2, [r7, #2]
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	4618      	mov	r0, r3
 800449e:	f7fc fc73 	bl	8000d88 <__aeabi_i2f>
 80044a2:	4603      	mov	r3, r0
 80044a4:	613b      	str	r3, [r7, #16]
    float dy = y1 - y0;
 80044a6:	883a      	ldrh	r2, [r7, #0]
 80044a8:	88bb      	ldrh	r3, [r7, #4]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fc fc6b 	bl	8000d88 <__aeabi_i2f>
 80044b2:	4603      	mov	r3, r0
 80044b4:	60fb      	str	r3, [r7, #12]
    float gradient = dy / dx;
 80044b6:	6939      	ldr	r1, [r7, #16]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7fc fd6d 	bl	8000f98 <__aeabi_fdiv>
 80044be:	4603      	mov	r3, r0
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (dx == 0.0) {
 80044c2:	f04f 0100 	mov.w	r1, #0
 80044c6:	6938      	ldr	r0, [r7, #16]
 80044c8:	f7fc fe46 	bl	8001158 <__aeabi_fcmpeq>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <_Z17drawLineToVRAM_AAttttt+0xe8>
        gradient = 1;
 80044d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    float intery = y0 + gradient; // 初始交点的y坐标
 80044d8:	88bb      	ldrh	r3, [r7, #4]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fc fc54 	bl	8000d88 <__aeabi_i2f>
 80044e0:	4603      	mov	r3, r0
 80044e2:	4619      	mov	r1, r3
 80044e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044e6:	f7fc fb9b 	bl	8000c20 <__addsf3>
 80044ea:	4603      	mov	r3, r0
 80044ec:	623b      	str	r3, [r7, #32]

    for (int x = x0 + 1; x <= x1; x++) {
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	3301      	adds	r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	887b      	ldrh	r3, [r7, #2]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	f300 80b2 	bgt.w	8004662 <_Z17drawLineToVRAM_AAttttt+0x272>
        if (steep) {
 80044fe:	7efb      	ldrb	r3, [r7, #27]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d052      	beq.n	80045aa <_Z17drawLineToVRAM_AAttttt+0x1ba>
            setPixel((int)intery, x, color, 1 - (intery - floor(intery)));
 8004504:	6a38      	ldr	r0, [r7, #32]
 8004506:	f7fc fe6f 	bl	80011e8 <__aeabi_f2iz>
 800450a:	4606      	mov	r6, r0
 800450c:	6a38      	ldr	r0, [r7, #32]
 800450e:	f7fb fff7 	bl	8000500 <__aeabi_f2d>
 8004512:	4604      	mov	r4, r0
 8004514:	460d      	mov	r5, r1
 8004516:	6a38      	ldr	r0, [r7, #32]
 8004518:	f7fb fff2 	bl	8000500 <__aeabi_f2d>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	f008 fe74 	bl	800d210 <floor>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4620      	mov	r0, r4
 800452e:	4629      	mov	r1, r5
 8004530:	f7fb fe86 	bl	8000240 <__aeabi_dsub>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	f04f 0000 	mov.w	r0, #0
 800453c:	494b      	ldr	r1, [pc, #300]	; (800466c <_Z17drawLineToVRAM_AAttttt+0x27c>)
 800453e:	f7fb fe7f 	bl	8000240 <__aeabi_dsub>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
 800454a:	f7fc fb13 	bl	8000b74 <__aeabi_d2f>
 800454e:	4603      	mov	r3, r0
 8004550:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004554:	69f9      	ldr	r1, [r7, #28]
 8004556:	4630      	mov	r0, r6
 8004558:	f7ff fe14 	bl	8004184 <_Z8setPixeliitf>
            setPixel((int)intery + 1, x, color, intery - floor(intery));
 800455c:	6a38      	ldr	r0, [r7, #32]
 800455e:	f7fc fe43 	bl	80011e8 <__aeabi_f2iz>
 8004562:	4603      	mov	r3, r0
 8004564:	1c5e      	adds	r6, r3, #1
 8004566:	6a38      	ldr	r0, [r7, #32]
 8004568:	f7fb ffca 	bl	8000500 <__aeabi_f2d>
 800456c:	4604      	mov	r4, r0
 800456e:	460d      	mov	r5, r1
 8004570:	6a38      	ldr	r0, [r7, #32]
 8004572:	f7fb ffc5 	bl	8000500 <__aeabi_f2d>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4610      	mov	r0, r2
 800457c:	4619      	mov	r1, r3
 800457e:	f008 fe47 	bl	800d210 <floor>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4620      	mov	r0, r4
 8004588:	4629      	mov	r1, r5
 800458a:	f7fb fe59 	bl	8000240 <__aeabi_dsub>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	f7fc faed 	bl	8000b74 <__aeabi_d2f>
 800459a:	4603      	mov	r3, r0
 800459c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80045a0:	69f9      	ldr	r1, [r7, #28]
 80045a2:	4630      	mov	r0, r6
 80045a4:	f7ff fdee 	bl	8004184 <_Z8setPixeliitf>
 80045a8:	e051      	b.n	800464e <_Z17drawLineToVRAM_AAttttt+0x25e>
        } else {
            setPixel(x, (int)intery, color, 1 - (intery - floor(intery)));
 80045aa:	6a38      	ldr	r0, [r7, #32]
 80045ac:	f7fc fe1c 	bl	80011e8 <__aeabi_f2iz>
 80045b0:	4606      	mov	r6, r0
 80045b2:	6a38      	ldr	r0, [r7, #32]
 80045b4:	f7fb ffa4 	bl	8000500 <__aeabi_f2d>
 80045b8:	4604      	mov	r4, r0
 80045ba:	460d      	mov	r5, r1
 80045bc:	6a38      	ldr	r0, [r7, #32]
 80045be:	f7fb ff9f 	bl	8000500 <__aeabi_f2d>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4610      	mov	r0, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	f008 fe21 	bl	800d210 <floor>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4620      	mov	r0, r4
 80045d4:	4629      	mov	r1, r5
 80045d6:	f7fb fe33 	bl	8000240 <__aeabi_dsub>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	f04f 0000 	mov.w	r0, #0
 80045e2:	4922      	ldr	r1, [pc, #136]	; (800466c <_Z17drawLineToVRAM_AAttttt+0x27c>)
 80045e4:	f7fb fe2c 	bl	8000240 <__aeabi_dsub>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	f7fc fac0 	bl	8000b74 <__aeabi_d2f>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80045fa:	4631      	mov	r1, r6
 80045fc:	69f8      	ldr	r0, [r7, #28]
 80045fe:	f7ff fdc1 	bl	8004184 <_Z8setPixeliitf>
            setPixel(x, (int)intery + 1, color, intery - floor(intery));
 8004602:	6a38      	ldr	r0, [r7, #32]
 8004604:	f7fc fdf0 	bl	80011e8 <__aeabi_f2iz>
 8004608:	4603      	mov	r3, r0
 800460a:	1c5e      	adds	r6, r3, #1
 800460c:	6a38      	ldr	r0, [r7, #32]
 800460e:	f7fb ff77 	bl	8000500 <__aeabi_f2d>
 8004612:	4604      	mov	r4, r0
 8004614:	460d      	mov	r5, r1
 8004616:	6a38      	ldr	r0, [r7, #32]
 8004618:	f7fb ff72 	bl	8000500 <__aeabi_f2d>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	f008 fdf4 	bl	800d210 <floor>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4620      	mov	r0, r4
 800462e:	4629      	mov	r1, r5
 8004630:	f7fb fe06 	bl	8000240 <__aeabi_dsub>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	f7fc fa9a 	bl	8000b74 <__aeabi_d2f>
 8004640:	4603      	mov	r3, r0
 8004642:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004646:	4631      	mov	r1, r6
 8004648:	69f8      	ldr	r0, [r7, #28]
 800464a:	f7ff fd9b 	bl	8004184 <_Z8setPixeliitf>
        }
        intery += gradient;
 800464e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004650:	6a38      	ldr	r0, [r7, #32]
 8004652:	f7fc fae5 	bl	8000c20 <__addsf3>
 8004656:	4603      	mov	r3, r0
 8004658:	623b      	str	r3, [r7, #32]
    for (int x = x0 + 1; x <= x1; x++) {
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3301      	adds	r3, #1
 800465e:	61fb      	str	r3, [r7, #28]
 8004660:	e748      	b.n	80044f4 <_Z17drawLineToVRAM_AAttttt+0x104>
    }
}
 8004662:	bf00      	nop
 8004664:	372c      	adds	r7, #44	; 0x2c
 8004666:	46bd      	mov	sp, r7
 8004668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800466c:	3ff00000 	.word	0x3ff00000

08004670 <_Z9resetVRAMv>:

void resetVRAM(){
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
    //memset(vRAM, 0, sizeof(vRAM));
    uint32_t color_32 = (CYAN << 16) | CYAN;
 8004676:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 800467a:	603b      	str	r3, [r7, #0]
    for(int i = 0; i < r*r/2; i++)
 800467c:	2300      	movs	r3, #0
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f642 32f1 	movw	r2, #11249	; 0x2bf1
 8004686:	4293      	cmp	r3, r2
 8004688:	dc2d      	bgt.n	80046e6 <_Z9resetVRAMv+0x76>
    {
        ((uint32_t*)vRAM)[i] = color_32;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <_Z9resetVRAMv+0x80>)
 8004690:	4413      	add	r3, r2
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	601a      	str	r2, [r3, #0]
        i++;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3301      	adds	r3, #1
 800469a:	607b      	str	r3, [r7, #4]
        ((uint32_t*)vRAM)[i] = color_32;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4a13      	ldr	r2, [pc, #76]	; (80046f0 <_Z9resetVRAMv+0x80>)
 80046a2:	4413      	add	r3, r2
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	601a      	str	r2, [r3, #0]
        i++;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3301      	adds	r3, #1
 80046ac:	607b      	str	r3, [r7, #4]
        ((uint32_t*)vRAM)[i] = color_32;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4a0f      	ldr	r2, [pc, #60]	; (80046f0 <_Z9resetVRAMv+0x80>)
 80046b4:	4413      	add	r3, r2
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	601a      	str	r2, [r3, #0]
        i++;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3301      	adds	r3, #1
 80046be:	607b      	str	r3, [r7, #4]
        ((uint32_t*)vRAM)[i] = color_32;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <_Z9resetVRAMv+0x80>)
 80046c6:	4413      	add	r3, r2
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	601a      	str	r2, [r3, #0]
        i++;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3301      	adds	r3, #1
 80046d0:	607b      	str	r3, [r7, #4]
        ((uint32_t*)vRAM)[i] = color_32;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4a06      	ldr	r2, [pc, #24]	; (80046f0 <_Z9resetVRAMv+0x80>)
 80046d8:	4413      	add	r3, r2
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < r*r/2; i++)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3301      	adds	r3, #1
 80046e2:	607b      	str	r3, [r7, #4]
 80046e4:	e7cc      	b.n	8004680 <_Z9resetVRAMv+0x10>
    }
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	20002508 	.word	0x20002508

080046f4 <_Z10renderVRAMii>:

void renderVRAM(int posX, int posY){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
    LCD_OpenWindow(posX, posY, r, r);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	b298      	uxth	r0, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	b299      	uxth	r1, r3
 8004706:	2396      	movs	r3, #150	; 0x96
 8004708:	2296      	movs	r2, #150	; 0x96
 800470a:	f001 fe7f 	bl	800640c <LCD_OpenWindow>
    LCD_Write_Cmd ( CMD_SetPixel );	
 800470e:	202c      	movs	r0, #44	; 0x2c
 8004710:	f001 fd44 	bl	800619c <LCD_Write_Cmd>
    for(int i = 0; i < r*r; i++)
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f245 72e3 	movw	r2, #22499	; 0x57e3
 800471e:	4293      	cmp	r3, r2
 8004720:	dc32      	bgt.n	8004788 <_Z10renderVRAMii+0x94>
    {
        * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = ((uint16_t*)vRAM)[i];
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	4a1a      	ldr	r2, [pc, #104]	; (8004790 <_Z10renderVRAMii+0x9c>)
 8004728:	4413      	add	r3, r2
 800472a:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <_Z10renderVRAMii+0xa0>)
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	8013      	strh	r3, [r2, #0]
        i++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
        * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = ((uint16_t*)vRAM)[i];
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	4a15      	ldr	r2, [pc, #84]	; (8004790 <_Z10renderVRAMii+0x9c>)
 800473c:	4413      	add	r3, r2
 800473e:	4a15      	ldr	r2, [pc, #84]	; (8004794 <_Z10renderVRAMii+0xa0>)
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	8013      	strh	r3, [r2, #0]
        i++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3301      	adds	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
        * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = ((uint16_t*)vRAM)[i];
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4a10      	ldr	r2, [pc, #64]	; (8004790 <_Z10renderVRAMii+0x9c>)
 8004750:	4413      	add	r3, r2
 8004752:	4a10      	ldr	r2, [pc, #64]	; (8004794 <_Z10renderVRAMii+0xa0>)
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	8013      	strh	r3, [r2, #0]
        i++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3301      	adds	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]
        * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = ((uint16_t*)vRAM)[i];
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4a0b      	ldr	r2, [pc, #44]	; (8004790 <_Z10renderVRAMii+0x9c>)
 8004764:	4413      	add	r3, r2
 8004766:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <_Z10renderVRAMii+0xa0>)
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	8013      	strh	r3, [r2, #0]
        i++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
        * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = ((uint16_t*)vRAM)[i];
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	4a06      	ldr	r2, [pc, #24]	; (8004790 <_Z10renderVRAMii+0x9c>)
 8004778:	4413      	add	r3, r2
 800477a:	4a06      	ldr	r2, [pc, #24]	; (8004794 <_Z10renderVRAMii+0xa0>)
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	8013      	strh	r3, [r2, #0]
    for(int i = 0; i < r*r; i++)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3301      	adds	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e7c7      	b.n	8004718 <_Z10renderVRAMii+0x24>
    }
}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20002508 	.word	0x20002508
 8004794:	60020000 	.word	0x60020000

08004798 <_ZN14PreviewDisplayC1EP6Screenttt>:
    float yOffset = 0;
    
    bool use3d = false;
    bool useAA = true; // anti-aliasing

    PreviewDisplay(Screen *screen, uint16_t x, uint16_t y, uint16_t color = CYAN)
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b087      	sub	sp, #28
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	4611      	mov	r1, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	460b      	mov	r3, r1
 80047a8:	80fb      	strh	r3, [r7, #6]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80bb      	strh	r3, [r7, #4]
        : UIElement(screen, x, y, width = r, height = r)
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2296      	movs	r2, #150	; 0x96
 80047b4:	811a      	strh	r2, [r3, #8]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	891b      	ldrh	r3, [r3, #8]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	2196      	movs	r1, #150	; 0x96
 80047be:	8151      	strh	r1, [r2, #10]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	8952      	ldrh	r2, [r2, #10]
 80047c4:	88bc      	ldrh	r4, [r7, #4]
 80047c6:	88f9      	ldrh	r1, [r7, #6]
 80047c8:	9201      	str	r2, [sp, #4]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	4623      	mov	r3, r4
 80047ce:	460a      	mov	r2, r1
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	f7fe fc79 	bl	80030c8 <_ZN9UIElementC1EP6Screentttt>
 80047d6:	4a15      	ldr	r2, [pc, #84]	; (800482c <_ZN14PreviewDisplayC1EP6Screenttt+0x94>)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047e2:	611a      	str	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	615a      	str	r2, [r3, #20]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	619a      	str	r2, [r3, #24]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	771a      	strb	r2, [r3, #28]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	775a      	strb	r2, [r3, #29]
    {
        this->x = x;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	809a      	strh	r2, [r3, #4]
        this->y = y;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	88ba      	ldrh	r2, [r7, #4]
 800480a:	80da      	strh	r2, [r3, #6]
        this->width = width;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	891a      	ldrh	r2, [r3, #8]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	811a      	strh	r2, [r3, #8]
        this->height = height;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	895a      	ldrh	r2, [r3, #10]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	815a      	strh	r2, [r3, #10]
        this->color = color;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8c3a      	ldrh	r2, [r7, #32]
 8004820:	819a      	strh	r2, [r3, #12]
    }
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	bd90      	pop	{r4, r7, pc}
 800482c:	0802ee98 	.word	0x0802ee98

08004830 <_ZN14PreviewDisplay5map2dEfff>:

    void map2d(float posX, float posY, float speedInterval = -1)
 8004830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004832:	b093      	sub	sp, #76	; 0x4c
 8004834:	af02      	add	r7, sp, #8
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
    {
        bool enableDrawing = false;
 800483e:	2300      	movs	r3, #0
 8004840:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        float lastPos[4] = {0, 0, 0};
 8004844:	f107 0320 	add.w	r3, r7, #32
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	60da      	str	r2, [r3, #12]
        resetVRAM();
 8004852:	f7ff ff0d 	bl	8004670 <_Z9resetVRAMv>

        for (float* cmd = (float*)targetGcode; cmd < (float*)targetGcode+targetGcodeLength*4; cmd+=4){
 8004856:	4b70      	ldr	r3, [pc, #448]	; (8004a18 <_ZN14PreviewDisplay5map2dEfff+0x1e8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800485c:	4b6e      	ldr	r3, [pc, #440]	; (8004a18 <_ZN14PreviewDisplay5map2dEfff+0x1e8>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b6e      	ldr	r3, [pc, #440]	; (8004a1c <_ZN14PreviewDisplay5map2dEfff+0x1ec>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	4413      	add	r3, r2
 8004868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800486a:	429a      	cmp	r2, r3
 800486c:	f080 80bf 	bcs.w	80049ee <_ZN14PreviewDisplay5map2dEfff+0x1be>
            float pos[3] = {cmd[0], cmd[1], cmd[2]};
 8004870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	61bb      	str	r3, [r7, #24]
 800487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	61fb      	str	r3, [r7, #28]
            for (int i = 0; i < 3; i++){
 8004882:	2300      	movs	r3, #0
 8004884:	63bb      	str	r3, [r7, #56]	; 0x38
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	2b02      	cmp	r3, #2
 800488a:	dc17      	bgt.n	80048bc <_ZN14PreviewDisplay5map2dEfff+0x8c>
                pos[i] *= previewScale;
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	3340      	adds	r3, #64	; 0x40
 8004892:	443b      	add	r3, r7
 8004894:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f7fc fac6 	bl	8000e30 <__aeabi_fmul>
 80048a4:	4603      	mov	r3, r0
 80048a6:	461a      	mov	r2, r3
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	3340      	adds	r3, #64	; 0x40
 80048ae:	443b      	add	r3, r7
 80048b0:	f843 2c2c 	str.w	r2, [r3, #-44]
            for (int i = 0; i < 3; i++){
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	3301      	adds	r3, #1
 80048b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ba:	e7e4      	b.n	8004886 <_ZN14PreviewDisplay5map2dEfff+0x56>
            }
            pos[1] *= -1;
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80048c2:	61bb      	str	r3, [r7, #24]
            pos[0] += xOffset;
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f7fc f9a7 	bl	8000c20 <__addsf3>
 80048d2:	4603      	mov	r3, r0
 80048d4:	617b      	str	r3, [r7, #20]
            pos[1] += yOffset;
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f7fc f99e 	bl	8000c20 <__addsf3>
 80048e4:	4603      	mov	r3, r0
 80048e6:	61bb      	str	r3, [r7, #24]
            enableDrawing = pos[2] <= 0.001;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fb fe08 	bl	8000500 <__aeabi_f2d>
 80048f0:	2301      	movs	r3, #1
 80048f2:	461c      	mov	r4, r3
 80048f4:	a346      	add	r3, pc, #280	; (adr r3, 8004a10 <_ZN14PreviewDisplay5map2dEfff+0x1e0>)
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f7fc f8d5 	bl	8000aa8 <__aeabi_dcmple>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <_ZN14PreviewDisplay5map2dEfff+0xd8>
 8004904:	2300      	movs	r3, #0
 8004906:	461c      	mov	r4, r3
 8004908:	f887 4033 	strb.w	r4, [r7, #51]	; 0x33
            if (enableDrawing)
 800490c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004910:	2b00      	cmp	r3, #0
 8004912:	d044      	beq.n	800499e <_ZN14PreviewDisplay5map2dEfff+0x16e>
                if (useAA)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	7f5b      	ldrb	r3, [r3, #29]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d020      	beq.n	800495e <_ZN14PreviewDisplay5map2dEfff+0x12e>
                    drawLineToVRAM_AA(lastPos[0], lastPos[1], pos[0], pos[1], RED);
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fc fc88 	bl	8001234 <__aeabi_f2uiz>
 8004924:	4603      	mov	r3, r0
 8004926:	b29c      	uxth	r4, r3
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	4618      	mov	r0, r3
 800492c:	f7fc fc82 	bl	8001234 <__aeabi_f2uiz>
 8004930:	4603      	mov	r3, r0
 8004932:	b29d      	uxth	r5, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fc fc7c 	bl	8001234 <__aeabi_f2uiz>
 800493c:	4603      	mov	r3, r0
 800493e:	b29e      	uxth	r6, r3
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fc fc76 	bl	8001234 <__aeabi_f2uiz>
 8004948:	4603      	mov	r3, r0
 800494a:	b29b      	uxth	r3, r3
 800494c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004950:	9200      	str	r2, [sp, #0]
 8004952:	4632      	mov	r2, r6
 8004954:	4629      	mov	r1, r5
 8004956:	4620      	mov	r0, r4
 8004958:	f7ff fd4a 	bl	80043f0 <_Z17drawLineToVRAM_AAttttt>
 800495c:	e01f      	b.n	800499e <_ZN14PreviewDisplay5map2dEfff+0x16e>
                else
                    drawLineToVRAM(lastPos[0], lastPos[1], pos[0], pos[1], RED);
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc fc67 	bl	8001234 <__aeabi_f2uiz>
 8004966:	4603      	mov	r3, r0
 8004968:	b29c      	uxth	r4, r3
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	4618      	mov	r0, r3
 800496e:	f7fc fc61 	bl	8001234 <__aeabi_f2uiz>
 8004972:	4603      	mov	r3, r0
 8004974:	b29d      	uxth	r5, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4618      	mov	r0, r3
 800497a:	f7fc fc5b 	bl	8001234 <__aeabi_f2uiz>
 800497e:	4603      	mov	r3, r0
 8004980:	b29e      	uxth	r6, r3
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	4618      	mov	r0, r3
 8004986:	f7fc fc55 	bl	8001234 <__aeabi_f2uiz>
 800498a:	4603      	mov	r3, r0
 800498c:	b29b      	uxth	r3, r3
 800498e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004992:	9200      	str	r2, [sp, #0]
 8004994:	4632      	mov	r2, r6
 8004996:	4629      	mov	r1, r5
 8004998:	4620      	mov	r0, r4
 800499a:	f7ff fcc3 	bl	8004324 <_Z14drawLineToVRAMttttt>
            for (int i = 0; i < 3; i++){
 800499e:	2300      	movs	r3, #0
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
 80049a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	dc0f      	bgt.n	80049c8 <_ZN14PreviewDisplay5map2dEfff+0x198>
                lastPos[i] = pos[i];
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	3340      	adds	r3, #64	; 0x40
 80049ae:	443b      	add	r3, r7
 80049b0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	3340      	adds	r3, #64	; 0x40
 80049ba:	443b      	add	r3, r7
 80049bc:	f843 2c20 	str.w	r2, [r3, #-32]
            for (int i = 0; i < 3; i++){
 80049c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c2:	3301      	adds	r3, #1
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
 80049c6:	e7ec      	b.n	80049a2 <_ZN14PreviewDisplay5map2dEfff+0x172>
            }
            if (speedInterval > 0){
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	6838      	ldr	r0, [r7, #0]
 80049ce:	f7fc fbeb 	bl	80011a8 <__aeabi_fcmpgt>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d006      	beq.n	80049e6 <_ZN14PreviewDisplay5map2dEfff+0x1b6>
                HAL_Delay(speedInterval);
 80049d8:	6838      	ldr	r0, [r7, #0]
 80049da:	f7fc fc2b 	bl	8001234 <__aeabi_f2uiz>
 80049de:	4603      	mov	r3, r0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f004 feff 	bl	80097e4 <HAL_Delay>
        for (float* cmd = (float*)targetGcode; cmd < (float*)targetGcode+targetGcodeLength*4; cmd+=4){
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e8:	3310      	adds	r3, #16
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ec:	e736      	b.n	800485c <_ZN14PreviewDisplay5map2dEfff+0x2c>
            }
        }

        renderVRAM(posX, posY);
 80049ee:	68b8      	ldr	r0, [r7, #8]
 80049f0:	f7fc fbfa 	bl	80011e8 <__aeabi_f2iz>
 80049f4:	4604      	mov	r4, r0
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc fbf6 	bl	80011e8 <__aeabi_f2iz>
 80049fc:	4603      	mov	r3, r0
 80049fe:	4619      	mov	r1, r3
 8004a00:	4620      	mov	r0, r4
 8004a02:	f7ff fe77 	bl	80046f4 <_Z10renderVRAMii>
    }
 8004a06:	bf00      	nop
 8004a08:	3744      	adds	r7, #68	; 0x44
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	d2f1a9fc 	.word	0xd2f1a9fc
 8004a14:	3f50624d 	.word	0x3f50624d
 8004a18:	2000d4d0 	.word	0x2000d4d0
 8004a1c:	2000db00 	.word	0x2000db00

08004a20 <_ZN14PreviewDisplay5map3dEii>:

    void map3d(int posX, int posY) {
 8004a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a22:	b097      	sub	sp, #92	; 0x5c
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	61f8      	str	r0, [r7, #28]
 8004a28:	61b9      	str	r1, [r7, #24]
 8004a2a:	617a      	str	r2, [r7, #20]
        resetVRAM();
 8004a2c:	f7ff fe20 	bl	8004670 <_Z9resetVRAMv>
        Point3D lastPos = {0, 0, 0};
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	633b      	str	r3, [r7, #48]	; 0x30
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	63bb      	str	r3, [r7, #56]	; 0x38

        int centerPosX = posX + r/2;
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	334b      	adds	r3, #75	; 0x4b
 8004a46:	64bb      	str	r3, [r7, #72]	; 0x48
        int centerPosY = posY + r/2;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	334b      	adds	r3, #75	; 0x4b
 8004a4c:	647b      	str	r3, [r7, #68]	; 0x44
        int vCenterX = r/2; // vRAM center
 8004a4e:	234b      	movs	r3, #75	; 0x4b
 8004a50:	643b      	str	r3, [r7, #64]	; 0x40
        int vCenterY = r/2; // vRAM center
 8004a52:	234b      	movs	r3, #75	; 0x4b
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c

        // draw circle
        sinUnderCurrentAngleX = fastsin(rotateAngleX);
 8004a56:	4b82      	ldr	r3, [pc, #520]	; (8004c60 <_ZN14PreviewDisplay5map3dEii+0x240>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fc fbc4 	bl	80011e8 <__aeabi_f2iz>
 8004a60:	4603      	mov	r3, r0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fa5a 	bl	8003f1c <_Z7fastsini>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4a7e      	ldr	r2, [pc, #504]	; (8004c64 <_ZN14PreviewDisplay5map3dEii+0x244>)
 8004a6c:	6013      	str	r3, [r2, #0]
        cosUnderCurrentAngleX = fastcos(rotateAngleX);
 8004a6e:	4b7c      	ldr	r3, [pc, #496]	; (8004c60 <_ZN14PreviewDisplay5map3dEii+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fc fbb8 	bl	80011e8 <__aeabi_f2iz>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff fa9e 	bl	8003fbc <_Z7fastcosi>
 8004a80:	4603      	mov	r3, r0
 8004a82:	4a79      	ldr	r2, [pc, #484]	; (8004c68 <_ZN14PreviewDisplay5map3dEii+0x248>)
 8004a84:	6013      	str	r3, [r2, #0]
        sinUnderCurrentAngleY = fastsin(rotateAngleY);
 8004a86:	4b79      	ldr	r3, [pc, #484]	; (8004c6c <_ZN14PreviewDisplay5map3dEii+0x24c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fc fbac 	bl	80011e8 <__aeabi_f2iz>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fa42 	bl	8003f1c <_Z7fastsini>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4a75      	ldr	r2, [pc, #468]	; (8004c70 <_ZN14PreviewDisplay5map3dEii+0x250>)
 8004a9c:	6013      	str	r3, [r2, #0]
        cosUnderCurrentAngleY = fastcos(rotateAngleY);
 8004a9e:	4b73      	ldr	r3, [pc, #460]	; (8004c6c <_ZN14PreviewDisplay5map3dEii+0x24c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fc fba0 	bl	80011e8 <__aeabi_f2iz>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff fa86 	bl	8003fbc <_Z7fastcosi>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4a70      	ldr	r2, [pc, #448]	; (8004c74 <_ZN14PreviewDisplay5map3dEii+0x254>)
 8004ab4:	6013      	str	r3, [r2, #0]
        sinUnderCurrentAngleZ = fastsin(rotateAngleZ);
 8004ab6:	4b70      	ldr	r3, [pc, #448]	; (8004c78 <_ZN14PreviewDisplay5map3dEii+0x258>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fc fb94 	bl	80011e8 <__aeabi_f2iz>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fa2a 	bl	8003f1c <_Z7fastsini>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4a6c      	ldr	r2, [pc, #432]	; (8004c7c <_ZN14PreviewDisplay5map3dEii+0x25c>)
 8004acc:	6013      	str	r3, [r2, #0]
        cosUnderCurrentAngleZ = fastcos(rotateAngleZ);
 8004ace:	4b6a      	ldr	r3, [pc, #424]	; (8004c78 <_ZN14PreviewDisplay5map3dEii+0x258>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fc fb88 	bl	80011e8 <__aeabi_f2iz>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fa6e 	bl	8003fbc <_Z7fastcosi>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	4a67      	ldr	r2, [pc, #412]	; (8004c80 <_ZN14PreviewDisplay5map3dEii+0x260>)
 8004ae4:	6013      	str	r3, [r2, #0]
        
        for (float* cmd = (float*)targetGcode; cmd < (float*)targetGcode+targetGcodeLength*4; cmd+=4){
 8004ae6:	4b67      	ldr	r3, [pc, #412]	; (8004c84 <_ZN14PreviewDisplay5map3dEii+0x264>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aec:	4b65      	ldr	r3, [pc, #404]	; (8004c84 <_ZN14PreviewDisplay5map3dEii+0x264>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b65      	ldr	r3, [pc, #404]	; (8004c88 <_ZN14PreviewDisplay5map3dEii+0x268>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	4413      	add	r3, r2
 8004af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004afa:	429a      	cmp	r2, r3
 8004afc:	f080 8117 	bcs.w	8004d2e <_ZN14PreviewDisplay5map3dEii+0x30e>
            Point3D point = {cmd[0] - targetGcodeCenterOfMass[0], cmd[1] - targetGcodeCenterOfMass[1], cmd[2] - targetGcodeCenterOfMass[2]};
 8004b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4b61      	ldr	r3, [pc, #388]	; (8004c8c <_ZN14PreviewDisplay5map3dEii+0x26c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f7fc f885 	bl	8000c1c <__aeabi_fsub>
 8004b12:	4603      	mov	r3, r0
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
 8004b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b18:	3304      	adds	r3, #4
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b5b      	ldr	r3, [pc, #364]	; (8004c8c <_ZN14PreviewDisplay5map3dEii+0x26c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3304      	adds	r3, #4
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f7fc f878 	bl	8000c1c <__aeabi_fsub>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b32:	3308      	adds	r3, #8
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4b55      	ldr	r3, [pc, #340]	; (8004c8c <_ZN14PreviewDisplay5map3dEii+0x26c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3308      	adds	r3, #8
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f7fc f86b 	bl	8000c1c <__aeabi_fsub>
 8004b46:	4603      	mov	r3, r0
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c
            point.x *= previewScale;
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f7fc f96c 	bl	8000e30 <__aeabi_fmul>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
            point.y *= previewScale;
 8004b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	4619      	mov	r1, r3
 8004b64:	4610      	mov	r0, r2
 8004b66:	f7fc f963 	bl	8000e30 <__aeabi_fmul>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
            point.z *= previewScale;
 8004b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f7fc f95a 	bl	8000e30 <__aeabi_fmul>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
            point = rotatePoint(point, X);
 8004b80:	463b      	mov	r3, r7
 8004b82:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004b86:	2200      	movs	r2, #0
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fa25 	bl	8003fd8 <_Z11rotatePointRK7Point3D4Axis>
 8004b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b92:	463a      	mov	r2, r7
 8004b94:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            point = rotatePoint(point, Y);
 8004b9a:	463b      	mov	r3, r7
 8004b9c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fa18 	bl	8003fd8 <_Z11rotatePointRK7Point3D4Axis>
 8004ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bac:	463a      	mov	r2, r7
 8004bae:	ca07      	ldmia	r2, {r0, r1, r2}
 8004bb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            point = rotatePoint(point, Z);
 8004bb4:	463b      	mov	r3, r7
 8004bb6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004bba:	2202      	movs	r2, #2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fa0b 	bl	8003fd8 <_Z11rotatePointRK7Point3D4Axis>
 8004bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bc6:	463a      	mov	r2, r7
 8004bc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004bca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            if (useAA)
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	7f5b      	ldrb	r3, [r3, #29]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d05c      	beq.n	8004c90 <_ZN14PreviewDisplay5map3dEii+0x270>
                drawLineToVRAM_AA(vCenterX + lastPos.x, vCenterY - lastPos.z, vCenterX + point.x, vCenterY - point.z, RED);
 8004bd6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004bd8:	f7fc f8d6 	bl	8000d88 <__aeabi_i2f>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f7fc f81c 	bl	8000c20 <__addsf3>
 8004be8:	4603      	mov	r3, r0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc fb22 	bl	8001234 <__aeabi_f2uiz>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	b29c      	uxth	r4, r3
 8004bf4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004bf6:	f7fc f8c7 	bl	8000d88 <__aeabi_i2f>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f7fc f80b 	bl	8000c1c <__aeabi_fsub>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fc fb13 	bl	8001234 <__aeabi_f2uiz>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	b29d      	uxth	r5, r3
 8004c12:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004c14:	f7fc f8b8 	bl	8000d88 <__aeabi_i2f>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f7fb fffe 	bl	8000c20 <__addsf3>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fc fb04 	bl	8001234 <__aeabi_f2uiz>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	b29e      	uxth	r6, r3
 8004c30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c32:	f7fc f8a9 	bl	8000d88 <__aeabi_i2f>
 8004c36:	4602      	mov	r2, r0
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	f7fb ffed 	bl	8000c1c <__aeabi_fsub>
 8004c42:	4603      	mov	r3, r0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fc faf5 	bl	8001234 <__aeabi_f2uiz>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c52:	9200      	str	r2, [sp, #0]
 8004c54:	4632      	mov	r2, r6
 8004c56:	4629      	mov	r1, r5
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f7ff fbc9 	bl	80043f0 <_Z17drawLineToVRAM_AAttttt>
 8004c5e:	e05b      	b.n	8004d18 <_ZN14PreviewDisplay5map3dEii+0x2f8>
 8004c60:	200024fc 	.word	0x200024fc
 8004c64:	200024e4 	.word	0x200024e4
 8004c68:	200024e8 	.word	0x200024e8
 8004c6c:	20002500 	.word	0x20002500
 8004c70:	200024ec 	.word	0x200024ec
 8004c74:	200024f0 	.word	0x200024f0
 8004c78:	20002504 	.word	0x20002504
 8004c7c:	200024f4 	.word	0x200024f4
 8004c80:	200024f8 	.word	0x200024f8
 8004c84:	2000d4d0 	.word	0x2000d4d0
 8004c88:	2000db00 	.word	0x2000db00
 8004c8c:	2000db04 	.word	0x2000db04
            else
                drawLineToVRAM(vCenterX + lastPos.x, vCenterY - lastPos.z, vCenterX + point.x, vCenterY - point.z, RED);
 8004c90:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004c92:	f7fc f879 	bl	8000d88 <__aeabi_i2f>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	f7fb ffbf 	bl	8000c20 <__addsf3>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fc fac5 	bl	8001234 <__aeabi_f2uiz>
 8004caa:	4603      	mov	r3, r0
 8004cac:	b29c      	uxth	r4, r3
 8004cae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004cb0:	f7fc f86a 	bl	8000d88 <__aeabi_i2f>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f7fb ffae 	bl	8000c1c <__aeabi_fsub>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fc fab6 	bl	8001234 <__aeabi_f2uiz>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	b29d      	uxth	r5, r3
 8004ccc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004cce:	f7fc f85b 	bl	8000d88 <__aeabi_i2f>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f7fb ffa1 	bl	8000c20 <__addsf3>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fc faa7 	bl	8001234 <__aeabi_f2uiz>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	b29e      	uxth	r6, r3
 8004cea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004cec:	f7fc f84c 	bl	8000d88 <__aeabi_i2f>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f7fb ff90 	bl	8000c1c <__aeabi_fsub>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fc fa98 	bl	8001234 <__aeabi_f2uiz>
 8004d04:	4603      	mov	r3, r0
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004d0c:	9200      	str	r2, [sp, #0]
 8004d0e:	4632      	mov	r2, r6
 8004d10:	4629      	mov	r1, r5
 8004d12:	4620      	mov	r0, r4
 8004d14:	f7ff fb06 	bl	8004324 <_Z14drawLineToVRAMttttt>
            lastPos = point;
 8004d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d1c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004d20:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        for (float* cmd = (float*)targetGcode; cmd < (float*)targetGcode+targetGcodeLength*4; cmd+=4){
 8004d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d28:	3310      	adds	r3, #16
 8004d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d2c:	e6de      	b.n	8004aec <_ZN14PreviewDisplay5map3dEii+0xcc>
        }

        renderVRAM(posX, posY);
 8004d2e:	6979      	ldr	r1, [r7, #20]
 8004d30:	69b8      	ldr	r0, [r7, #24]
 8004d32:	f7ff fcdf 	bl	80046f4 <_Z10renderVRAMii>
    }
 8004d36:	bf00      	nop
 8004d38:	3754      	adds	r7, #84	; 0x54
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d3e:	bf00      	nop

08004d40 <_ZN14PreviewDisplay6renderEv>:
    
    void render() override
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
    {
        if (use3d){
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7f1b      	ldrb	r3, [r3, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <_ZN14PreviewDisplay6renderEv+0x24>
            map3d(x, y);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	889b      	ldrh	r3, [r3, #4]
 8004d54:	4619      	mov	r1, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	88db      	ldrh	r3, [r3, #6]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff fe5f 	bl	8004a20 <_ZN14PreviewDisplay5map3dEii>
        }
        else{
            map2d(x, y);
        }
    }
 8004d62:	e010      	b.n	8004d86 <_ZN14PreviewDisplay6renderEv+0x46>
            map2d(x, y);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	889b      	ldrh	r3, [r3, #4]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fc f809 	bl	8000d80 <__aeabi_ui2f>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	88db      	ldrh	r3, [r3, #6]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fc f803 	bl	8000d80 <__aeabi_ui2f>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <_ZN14PreviewDisplay6renderEv+0x50>)
 8004d7e:	4621      	mov	r1, r4
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fd55 	bl	8004830 <_ZN14PreviewDisplay5map2dEfff>
    }
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd90      	pop	{r4, r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	bf800000 	.word	0xbf800000

08004d94 <_ZN14PreviewDisplay6updateEtt>:
    //     // LCD_Clear(0,0,240,320);
    //     // operationScreen.renderAll();
    //     map2d(x, y);
    // }

    void update(uint16_t x, uint16_t y) override
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	807b      	strh	r3, [r7, #2]
 8004da0:	4613      	mov	r3, r2
 8004da2:	803b      	strh	r3, [r7, #0]
    {
        return;   
 8004da4:	bf00      	nop
    }
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr
	...

08004db0 <_Z16printTargetMotorv>:

// uint32_t PulseDMABuff[2560];

SERVO42C_Pulse *pTargetMotor = &xPulseMotor;
void printTargetMotor()
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b09a      	sub	sp, #104	; 0x68
 8004db4:	af00      	add	r7, sp, #0
  char str[32];
  if (pTargetMotor == &xPulseMotor)
 8004db6:	4b16      	ldr	r3, [pc, #88]	; (8004e10 <_Z16printTargetMotorv+0x60>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <_Z16printTargetMotorv+0x64>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d105      	bne.n	8004dcc <_Z16printTargetMotorv+0x1c>
  {
    sprintf(str, "Target: X");
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	4915      	ldr	r1, [pc, #84]	; (8004e18 <_Z16printTargetMotorv+0x68>)
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f003 fa6b 	bl	80082a0 <sprintf_>
 8004dca:	e00f      	b.n	8004dec <_Z16printTargetMotorv+0x3c>
  }
  else if (pTargetMotor == &yPulseMotor)
 8004dcc:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <_Z16printTargetMotorv+0x60>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a12      	ldr	r2, [pc, #72]	; (8004e1c <_Z16printTargetMotorv+0x6c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d105      	bne.n	8004de2 <_Z16printTargetMotorv+0x32>
  {
    sprintf(str, "Target: Y");
 8004dd6:	1d3b      	adds	r3, r7, #4
 8004dd8:	4911      	ldr	r1, [pc, #68]	; (8004e20 <_Z16printTargetMotorv+0x70>)
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f003 fa60 	bl	80082a0 <sprintf_>
 8004de0:	e004      	b.n	8004dec <_Z16printTargetMotorv+0x3c>
  }
  else
  {
    sprintf(str, "Target: Z");
 8004de2:	1d3b      	adds	r3, r7, #4
 8004de4:	490f      	ldr	r1, [pc, #60]	; (8004e24 <_Z16printTargetMotorv+0x74>)
 8004de6:	4618      	mov	r0, r3
 8004de8:	f003 fa5a 	bl	80082a0 <sprintf_>
  }
  printToLCD(str, 2);
 8004dec:	1d3a      	adds	r2, r7, #4
 8004dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004df2:	4611      	mov	r1, r2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fd f8bf 	bl	8001f78 <_ZN6StringC1EPKc>
 8004dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dfe:	2102      	movs	r1, #2
 8004e00:	4618      	mov	r0, r3
 8004e02:	f004 f9c9 	bl	8009198 <_Z10printToLCDRK6Stringt>
}
 8004e06:	bf00      	nop
 8004e08:	3768      	adds	r7, #104	; 0x68
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	2000001c 	.word	0x2000001c
 8004e14:	20000190 	.word	0x20000190
 8004e18:	0800d530 	.word	0x0800d530
 8004e1c:	200001c4 	.word	0x200001c4
 8004e20:	0800d53c 	.word	0x0800d53c
 8004e24:	0800d548 	.word	0x0800d548

08004e28 <_Z13printPositionv>:

void printPosition()
{
 8004e28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e2c:	b09e      	sub	sp, #120	; 0x78
 8004e2e:	af04      	add	r7, sp, #16
  char str[32];
  sprintf(str, "x=%.1f y=%.1f z=%.1f", xPulseMotor.getPosition(), yPulseMotor.getPosition(), zPulseMotor.getPosition());
 8004e30:	481b      	ldr	r0, [pc, #108]	; (8004ea0 <_Z13printPositionv+0x78>)
 8004e32:	f7fd fa6f 	bl	8002314 <_ZN14SERVO42C_Pulse11getPositionEv>
 8004e36:	4603      	mov	r3, r0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fb fb61 	bl	8000500 <__aeabi_f2d>
 8004e3e:	4680      	mov	r8, r0
 8004e40:	4689      	mov	r9, r1
 8004e42:	4818      	ldr	r0, [pc, #96]	; (8004ea4 <_Z13printPositionv+0x7c>)
 8004e44:	f7fd fa66 	bl	8002314 <_ZN14SERVO42C_Pulse11getPositionEv>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fb fb58 	bl	8000500 <__aeabi_f2d>
 8004e50:	4604      	mov	r4, r0
 8004e52:	460d      	mov	r5, r1
 8004e54:	4814      	ldr	r0, [pc, #80]	; (8004ea8 <_Z13printPositionv+0x80>)
 8004e56:	f7fd fa5d 	bl	8002314 <_ZN14SERVO42C_Pulse11getPositionEv>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fb fb4f 	bl	8000500 <__aeabi_f2d>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	1d38      	adds	r0, r7, #4
 8004e68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e6c:	e9cd 4500 	strd	r4, r5, [sp]
 8004e70:	4642      	mov	r2, r8
 8004e72:	464b      	mov	r3, r9
 8004e74:	490d      	ldr	r1, [pc, #52]	; (8004eac <_Z13printPositionv+0x84>)
 8004e76:	f003 fa13 	bl	80082a0 <sprintf_>
  printToLCD(str, 1);
 8004e7a:	1d3a      	adds	r2, r7, #4
 8004e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e80:	4611      	mov	r1, r2
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fd f878 	bl	8001f78 <_ZN6StringC1EPKc>
 8004e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f004 f982 	bl	8009198 <_Z10printToLCDRK6Stringt>
}
 8004e94:	bf00      	nop
 8004e96:	3768      	adds	r7, #104	; 0x68
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000190 	.word	0x20000190
 8004ea4:	200001c4 	.word	0x200001c4
 8004ea8:	200001f8 	.word	0x200001f8
 8004eac:	0800d554 	.word	0x0800d554

08004eb0 <_Z14isMotorStuck_Xv>:


bool isMotorStuck_X(){
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(SWITCH_X_0_GPIO_Port, SWITCH_X_0_Pin) == GPIO_PIN_RESET;
 8004eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eb8:	4805      	ldr	r0, [pc, #20]	; (8004ed0 <_Z14isMotorStuck_Xv+0x20>)
 8004eba:	f005 fdbd 	bl	800aa38 <HAL_GPIO_ReadPin>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40011000 	.word	0x40011000

08004ed4 <_Z14isMotorStuck_Yv>:
bool isMotorStuck_Y(){
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(SWITCH_Y_0_GPIO_Port, SWITCH_Y_0_Pin) == GPIO_PIN_RESET;
 8004ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004edc:	4805      	ldr	r0, [pc, #20]	; (8004ef4 <_Z14isMotorStuck_Yv+0x20>)
 8004ede:	f005 fdab 	bl	800aa38 <HAL_GPIO_ReadPin>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bf0c      	ite	eq
 8004ee8:	2301      	moveq	r3, #1
 8004eea:	2300      	movne	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40011000 	.word	0x40011000

08004ef8 <_Z14isMotorStuck_Zv>:
bool isMotorStuck_Z(){
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(SWITCH_Z_0_GPIO_Port, SWITCH_Z_0_Pin) == GPIO_PIN_RESET;
 8004efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f00:	4805      	ldr	r0, [pc, #20]	; (8004f18 <_Z14isMotorStuck_Zv+0x20>)
 8004f02:	f005 fd99 	bl	800aa38 <HAL_GPIO_ReadPin>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	bf0c      	ite	eq
 8004f0c:	2301      	moveq	r3, #1
 8004f0e:	2300      	movne	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40011000 	.word	0x40011000

08004f1c <setActiveScreen0>:

void setActiveScreen0(){
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
    mainScreen.setActive();
 8004f20:	4802      	ldr	r0, [pc, #8]	; (8004f2c <setActiveScreen0+0x10>)
 8004f22:	f7fe f8ab 	bl	800307c <_ZN6Screen9setActiveEv>
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	2000d558 	.word	0x2000d558

08004f30 <setActiveScreen1>:

void setActiveScreen1(){
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
    operationScreen.setActive();
 8004f34:	4802      	ldr	r0, [pc, #8]	; (8004f40 <setActiveScreen1+0x10>)
 8004f36:	f7fe f8a1 	bl	800307c <_ZN6Screen9setActiveEv>
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000d778 	.word	0x2000d778

08004f44 <_Z14setGcodeSource12GCODE_SOURCE>:
  GENSHIN,
  EXTERNAL
};
GCODE_SOURCE gcodeSource = ENTERPRIZE;

void setGcodeSource(GCODE_SOURCE target){
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	71fb      	strb	r3, [r7, #7]
  gcodeSource = target;
 8004f4e:	4a27      	ldr	r2, [pc, #156]	; (8004fec <_Z14setGcodeSource12GCODE_SOURCE+0xa8>)
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	7013      	strb	r3, [r2, #0]
  switch (gcodeSource){
 8004f54:	4b25      	ldr	r3, [pc, #148]	; (8004fec <_Z14setGcodeSource12GCODE_SOURCE+0xa8>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d842      	bhi.n	8004fe2 <_Z14setGcodeSource12GCODE_SOURCE+0x9e>
 8004f5c:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <_Z14setGcodeSource12GCODE_SOURCE+0x20>)
 8004f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f62:	bf00      	nop
 8004f64:	08004f79 	.word	0x08004f79
 8004f68:	08004f8f 	.word	0x08004f8f
 8004f6c:	08004fa5 	.word	0x08004fa5
 8004f70:	08004fb9 	.word	0x08004fb9
 8004f74:	08004fcf 	.word	0x08004fcf
    case ENTERPRIZE:
      targetGcode = gcode_ENTERPRIZE;
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <_Z14setGcodeSource12GCODE_SOURCE+0xac>)
 8004f7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ff4 <_Z14setGcodeSource12GCODE_SOURCE+0xb0>)
 8004f7c:	601a      	str	r2, [r3, #0]
      targetGcodeLength = gcodeLength_ENTERPRIZE;
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <_Z14setGcodeSource12GCODE_SOURCE+0xb4>)
 8004f80:	f240 42a4 	movw	r2, #1188	; 0x4a4
 8004f84:	601a      	str	r2, [r3, #0]
      targetGcodeCenterOfMass = gcodeCenterOfMass_ENTERPRIZE;
 8004f86:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <_Z14setGcodeSource12GCODE_SOURCE+0xb8>)
 8004f88:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <_Z14setGcodeSource12GCODE_SOURCE+0xbc>)
 8004f8a:	601a      	str	r2, [r3, #0]
      break;
 8004f8c:	e029      	b.n	8004fe2 <_Z14setGcodeSource12GCODE_SOURCE+0x9e>
    case HKUST:
      targetGcode = gcode_HKUST;
 8004f8e:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <_Z14setGcodeSource12GCODE_SOURCE+0xac>)
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <_Z14setGcodeSource12GCODE_SOURCE+0xc0>)
 8004f92:	601a      	str	r2, [r3, #0]
      targetGcodeLength = gcodeLength_HKUST;
 8004f94:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <_Z14setGcodeSource12GCODE_SOURCE+0xb4>)
 8004f96:	f240 326a 	movw	r2, #874	; 0x36a
 8004f9a:	601a      	str	r2, [r3, #0]
      targetGcodeCenterOfMass = gcodeCenterOfMass_HKUST;
 8004f9c:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <_Z14setGcodeSource12GCODE_SOURCE+0xb8>)
 8004f9e:	4a1a      	ldr	r2, [pc, #104]	; (8005008 <_Z14setGcodeSource12GCODE_SOURCE+0xc4>)
 8004fa0:	601a      	str	r2, [r3, #0]
      break;
 8004fa2:	e01e      	b.n	8004fe2 <_Z14setGcodeSource12GCODE_SOURCE+0x9e>
    case PYRAMID:
      targetGcode = gcode_PYRAMID;
 8004fa4:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <_Z14setGcodeSource12GCODE_SOURCE+0xac>)
 8004fa6:	4a19      	ldr	r2, [pc, #100]	; (800500c <_Z14setGcodeSource12GCODE_SOURCE+0xc8>)
 8004fa8:	601a      	str	r2, [r3, #0]
      targetGcodeLength = gcodeLength_PYRAMID;
 8004faa:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <_Z14setGcodeSource12GCODE_SOURCE+0xb4>)
 8004fac:	220b      	movs	r2, #11
 8004fae:	601a      	str	r2, [r3, #0]
      targetGcodeCenterOfMass = gcodeCenterOfMass_PYRAMID;
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <_Z14setGcodeSource12GCODE_SOURCE+0xb8>)
 8004fb2:	4a17      	ldr	r2, [pc, #92]	; (8005010 <_Z14setGcodeSource12GCODE_SOURCE+0xcc>)
 8004fb4:	601a      	str	r2, [r3, #0]
      break;
 8004fb6:	e014      	b.n	8004fe2 <_Z14setGcodeSource12GCODE_SOURCE+0x9e>
    case GENSHIN:
      targetGcode = gcode_GENSHIN;
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <_Z14setGcodeSource12GCODE_SOURCE+0xac>)
 8004fba:	4a16      	ldr	r2, [pc, #88]	; (8005014 <_Z14setGcodeSource12GCODE_SOURCE+0xd0>)
 8004fbc:	601a      	str	r2, [r3, #0]
      targetGcodeLength = gcodeLength_GENSHIN;
 8004fbe:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <_Z14setGcodeSource12GCODE_SOURCE+0xb4>)
 8004fc0:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8004fc4:	601a      	str	r2, [r3, #0]
      targetGcodeCenterOfMass = gcodeCenterOfMass_GENSHIN;
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <_Z14setGcodeSource12GCODE_SOURCE+0xb8>)
 8004fc8:	4a13      	ldr	r2, [pc, #76]	; (8005018 <_Z14setGcodeSource12GCODE_SOURCE+0xd4>)
 8004fca:	601a      	str	r2, [r3, #0]
      break;
 8004fcc:	e009      	b.n	8004fe2 <_Z14setGcodeSource12GCODE_SOURCE+0x9e>
    case EXTERNAL:
      targetGcode = gcode;
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <_Z14setGcodeSource12GCODE_SOURCE+0xac>)
 8004fd0:	4a12      	ldr	r2, [pc, #72]	; (800501c <_Z14setGcodeSource12GCODE_SOURCE+0xd8>)
 8004fd2:	601a      	str	r2, [r3, #0]
      targetGcodeLength = gcodeLength;
 8004fd4:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <_Z14setGcodeSource12GCODE_SOURCE+0xb4>)
 8004fd6:	221b      	movs	r2, #27
 8004fd8:	601a      	str	r2, [r3, #0]
      targetGcodeCenterOfMass = gcodeCenterOfMass;
 8004fda:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <_Z14setGcodeSource12GCODE_SOURCE+0xb8>)
 8004fdc:	4a10      	ldr	r2, [pc, #64]	; (8005020 <_Z14setGcodeSource12GCODE_SOURCE+0xdc>)
 8004fde:	601a      	str	r2, [r3, #0]
      break;
 8004fe0:	bf00      	nop
  }
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr
 8004fec:	2000db08 	.word	0x2000db08
 8004ff0:	2000d4d0 	.word	0x2000d4d0
 8004ff4:	080211fc 	.word	0x080211fc
 8004ff8:	2000db00 	.word	0x2000db00
 8004ffc:	2000db04 	.word	0x2000db04
 8005000:	080211f0 	.word	0x080211f0
 8005004:	0802b7f0 	.word	0x0802b7f0
 8005008:	0802b7e4 	.word	0x0802b7e4
 800500c:	08025c48 	.word	0x08025c48
 8005010:	08025c3c 	.word	0x08025c3c
 8005014:	08025d04 	.word	0x08025d04
 8005018:	08025cf8 	.word	0x08025cf8
 800501c:	08021040 	.word	0x08021040
 8005020:	08021034 	.word	0x08021034

08005024 <_ZZ7setupUIvENKUlvE_clEv>:



void setupUI(){
  CWButton.onPressed = [](){
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
    pTargetMotor->setFrequency(1000);
 800502c:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <_ZZ7setupUIvENKUlvE_clEv+0x34>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005034:	4618      	mov	r0, r3
 8005036:	f7fc fff3 	bl	8002020 <_ZN10PulseMotor12setFrequencyEt>
    pTargetMotor->setDirection(0);
 800503a:	4b07      	ldr	r3, [pc, #28]	; (8005058 <_ZZ7setupUIvENKUlvE_clEv+0x34>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f7fd f812 	bl	800206a <_ZN10PulseMotor12setDirectionEh>
    pTargetMotor->spinStart();
 8005046:	4b04      	ldr	r3, [pc, #16]	; (8005058 <_ZZ7setupUIvENKUlvE_clEv+0x34>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fd ff8c 	bl	8002f68 <_ZN10PulseMotor9spinStartEv>
  };
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	2000001c 	.word	0x2000001c

0800505c <_ZZ7setupUIvENUlvE_4_FUNEv>:
  CWButton.onPressed = [](){
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  };
 8005060:	2000      	movs	r0, #0
 8005062:	f7ff ffdf 	bl	8005024 <_ZZ7setupUIvENKUlvE_clEv>
 8005066:	bd80      	pop	{r7, pc}

08005068 <_ZZ7setupUIvENKUlvE_cvPFvvEEv>:
  CWButton.onPressed = [](){
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  };
 8005070:	4b02      	ldr	r3, [pc, #8]	; (800507c <_ZZ7setupUIvENKUlvE_cvPFvvEEv+0x14>)
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr
 800507c:	0800505d 	.word	0x0800505d

08005080 <_ZZ7setupUIvENKUlvE0_clEv>:

  CWButton.onReleased = []()
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  {
    pTargetMotor->spinStop();
 8005088:	4b04      	ldr	r3, [pc, #16]	; (800509c <_ZZ7setupUIvENKUlvE0_clEv+0x1c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f7fd ff87 	bl	8002fa0 <_ZN10PulseMotor8spinStopEv>
  };
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	2000001c 	.word	0x2000001c

080050a0 <_ZZ7setupUIvENUlvE0_4_FUNEv>:
  CWButton.onReleased = []()
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  };
 80050a4:	2000      	movs	r0, #0
 80050a6:	f7ff ffeb 	bl	8005080 <_ZZ7setupUIvENKUlvE0_clEv>
 80050aa:	bd80      	pop	{r7, pc}

080050ac <_ZZ7setupUIvENKUlvE0_cvPFvvEEv>:
  CWButton.onReleased = []()
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  };
 80050b4:	4b02      	ldr	r3, [pc, #8]	; (80050c0 <_ZZ7setupUIvENKUlvE0_cvPFvvEEv+0x14>)
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr
 80050c0:	080050a1 	.word	0x080050a1

080050c4 <_ZZ7setupUIvENKUlvE1_clEv>:

  CCWButton.onPressed = []()
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  {
    pTargetMotor->setDirection(1);
 80050cc:	4b07      	ldr	r3, [pc, #28]	; (80050ec <_ZZ7setupUIvENKUlvE1_clEv+0x28>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2101      	movs	r1, #1
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fc ffc9 	bl	800206a <_ZN10PulseMotor12setDirectionEh>
    pTargetMotor->spinStart();
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <_ZZ7setupUIvENKUlvE1_clEv+0x28>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fd ff43 	bl	8002f68 <_ZN10PulseMotor9spinStartEv>
  };
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	2000001c 	.word	0x2000001c

080050f0 <_ZZ7setupUIvENUlvE1_4_FUNEv>:
  CCWButton.onPressed = []()
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  };
 80050f4:	2000      	movs	r0, #0
 80050f6:	f7ff ffe5 	bl	80050c4 <_ZZ7setupUIvENKUlvE1_clEv>
 80050fa:	bd80      	pop	{r7, pc}

080050fc <_ZZ7setupUIvENKUlvE1_cvPFvvEEv>:
  CCWButton.onPressed = []()
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  };
 8005104:	4b02      	ldr	r3, [pc, #8]	; (8005110 <_ZZ7setupUIvENKUlvE1_cvPFvvEEv+0x14>)
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr
 8005110:	080050f1 	.word	0x080050f1

08005114 <_ZZ7setupUIvENKUlvE2_clEv>:

  CCWButton.onReleased = []()
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  {
    pTargetMotor->spinStop();
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <_ZZ7setupUIvENKUlvE2_clEv+0x1c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f7fd ff3d 	bl	8002fa0 <_ZN10PulseMotor8spinStopEv>
  };
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	2000001c 	.word	0x2000001c

08005134 <_ZZ7setupUIvENUlvE2_4_FUNEv>:
  CCWButton.onReleased = []()
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  };
 8005138:	2000      	movs	r0, #0
 800513a:	f7ff ffeb 	bl	8005114 <_ZZ7setupUIvENKUlvE2_clEv>
 800513e:	bd80      	pop	{r7, pc}

08005140 <_ZZ7setupUIvENKUlvE2_cvPFvvEEv>:
  CCWButton.onReleased = []()
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  };
 8005148:	4b02      	ldr	r3, [pc, #8]	; (8005154 <_ZZ7setupUIvENKUlvE2_cvPFvvEEv+0x14>)
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr
 8005154:	08005135 	.word	0x08005135

08005158 <_ZZ7setupUIvENKUlvE3_clEv>:

  switchButton.onPressed = []()
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  {
    if (pTargetMotor == &xPulseMotor)
 8005160:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <_ZZ7setupUIvENKUlvE3_clEv+0x40>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a0d      	ldr	r2, [pc, #52]	; (800519c <_ZZ7setupUIvENKUlvE3_clEv+0x44>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d103      	bne.n	8005172 <_ZZ7setupUIvENKUlvE3_clEv+0x1a>
    {
      pTargetMotor = &yPulseMotor;
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <_ZZ7setupUIvENKUlvE3_clEv+0x40>)
 800516c:	4a0c      	ldr	r2, [pc, #48]	; (80051a0 <_ZZ7setupUIvENKUlvE3_clEv+0x48>)
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e00b      	b.n	800518a <_ZZ7setupUIvENKUlvE3_clEv+0x32>
    }
    else if (pTargetMotor == &yPulseMotor)
 8005172:	4b09      	ldr	r3, [pc, #36]	; (8005198 <_ZZ7setupUIvENKUlvE3_clEv+0x40>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <_ZZ7setupUIvENKUlvE3_clEv+0x48>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d103      	bne.n	8005184 <_ZZ7setupUIvENKUlvE3_clEv+0x2c>
    {
      pTargetMotor = &zPulseMotor;
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <_ZZ7setupUIvENKUlvE3_clEv+0x40>)
 800517e:	4a09      	ldr	r2, [pc, #36]	; (80051a4 <_ZZ7setupUIvENKUlvE3_clEv+0x4c>)
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	e002      	b.n	800518a <_ZZ7setupUIvENKUlvE3_clEv+0x32>
    }
    else
    {
      pTargetMotor = &xPulseMotor;
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <_ZZ7setupUIvENKUlvE3_clEv+0x40>)
 8005186:	4a05      	ldr	r2, [pc, #20]	; (800519c <_ZZ7setupUIvENKUlvE3_clEv+0x44>)
 8005188:	601a      	str	r2, [r3, #0]
    }
    printTargetMotor();
 800518a:	f7ff fe11 	bl	8004db0 <_Z16printTargetMotorv>
  };
 800518e:	bf00      	nop
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	2000001c 	.word	0x2000001c
 800519c:	20000190 	.word	0x20000190
 80051a0:	200001c4 	.word	0x200001c4
 80051a4:	200001f8 	.word	0x200001f8

080051a8 <_ZZ7setupUIvENUlvE3_4_FUNEv>:
  switchButton.onPressed = []()
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  };
 80051ac:	2000      	movs	r0, #0
 80051ae:	f7ff ffd3 	bl	8005158 <_ZZ7setupUIvENKUlvE3_clEv>
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <_ZZ7setupUIvENKUlvE3_cvPFvvEEv>:
  switchButton.onPressed = []()
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  };
 80051bc:	4b02      	ldr	r3, [pc, #8]	; (80051c8 <_ZZ7setupUIvENKUlvE3_cvPFvvEEv+0x14>)
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr
 80051c8:	080051a9 	.word	0x080051a9

080051cc <_ZZ7setupUIvENKUlvE4_clEv>:


  startButton.onPressed = [](){
 80051cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
    // setPosition3d(25, -25, 0, speed);
    // setPosition3d(25, -25, 10, speed);
    // setPosition3d(25, 0, 10, speed);
    // setPosition3d(25, 0, 0, speed);
    // setPosition3d(25, -50, 0, speed);
    lightStatus = OPERATING;
 80051d4:	4b2c      	ldr	r3, [pc, #176]	; (8005288 <_ZZ7setupUIvENKUlvE4_clEv+0xbc>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	701a      	strb	r2, [r3, #0]

    for (float* cmd = (float*)targetGcode; cmd < (float*)targetGcode+targetGcodeLength*4; cmd+=4){
 80051da:	4b2c      	ldr	r3, [pc, #176]	; (800528c <_ZZ7setupUIvENKUlvE4_clEv+0xc0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	4b2a      	ldr	r3, [pc, #168]	; (800528c <_ZZ7setupUIvENKUlvE4_clEv+0xc0>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b2a      	ldr	r3, [pc, #168]	; (8005290 <_ZZ7setupUIvENKUlvE4_clEv+0xc4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	4413      	add	r3, r2
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d242      	bcs.n	8005278 <_ZZ7setupUIvENKUlvE4_clEv+0xac>
      float pos[3] = {cmd[0], cmd[1], cmd[2]};
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	613b      	str	r3, [r7, #16]

      pos[0]*= previewDisplay.previewScale;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4a23      	ldr	r2, [pc, #140]	; (8005294 <_ZZ7setupUIvENKUlvE4_clEv+0xc8>)
 8005208:	6912      	ldr	r2, [r2, #16]
 800520a:	4611      	mov	r1, r2
 800520c:	4618      	mov	r0, r3
 800520e:	f7fb fe0f 	bl	8000e30 <__aeabi_fmul>
 8005212:	4603      	mov	r3, r0
 8005214:	60bb      	str	r3, [r7, #8]
      pos[1]*= previewDisplay.previewScale;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <_ZZ7setupUIvENKUlvE4_clEv+0xc8>)
 800521a:	6912      	ldr	r2, [r2, #16]
 800521c:	4611      	mov	r1, r2
 800521e:	4618      	mov	r0, r3
 8005220:	f7fb fe06 	bl	8000e30 <__aeabi_fmul>
 8005224:	4603      	mov	r3, r0
 8005226:	60fb      	str	r3, [r7, #12]
      // pos[2]*= 2;
      // pos[2]*= previewDisplay.previewScale;

      pos[0]+=previewDisplay.xOffset;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4a1a      	ldr	r2, [pc, #104]	; (8005294 <_ZZ7setupUIvENKUlvE4_clEv+0xc8>)
 800522c:	6952      	ldr	r2, [r2, #20]
 800522e:	4611      	mov	r1, r2
 8005230:	4618      	mov	r0, r3
 8005232:	f7fb fcf5 	bl	8000c20 <__addsf3>
 8005236:	4603      	mov	r3, r0
 8005238:	60bb      	str	r3, [r7, #8]
      pos[1]+=previewDisplay.yOffset;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4a15      	ldr	r2, [pc, #84]	; (8005294 <_ZZ7setupUIvENKUlvE4_clEv+0xc8>)
 800523e:	6992      	ldr	r2, [r2, #24]
 8005240:	4611      	mov	r1, r2
 8005242:	4618      	mov	r0, r3
 8005244:	f7fb fcec 	bl	8000c20 <__addsf3>
 8005248:	4603      	mov	r3, r0
 800524a:	60fb      	str	r3, [r7, #12]

      // __align(8) char str[32];
      // sprintf(str, "Pos:%.2f %.2f %.2f, O:%.2f,%.2f, S:%.2f", pos[0], pos[1], pos[2], previewDisplay.xOffset, previewDisplay.yOffset, previewDisplay.previewScale);
      // debugLog(str, 20);

      setPosition3d(pos[0], pos[1], pos[2], cmd[3]/60.0); // divide by 60 to convert to seconds
 800524c:	68bc      	ldr	r4, [r7, #8]
 800524e:	68fd      	ldr	r5, [r7, #12]
 8005250:	693e      	ldr	r6, [r7, #16]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	330c      	adds	r3, #12
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	490f      	ldr	r1, [pc, #60]	; (8005298 <_ZZ7setupUIvENKUlvE4_clEv+0xcc>)
 800525a:	4618      	mov	r0, r3
 800525c:	f7fb fe9c 	bl	8000f98 <__aeabi_fdiv>
 8005260:	4603      	mov	r3, r0
 8005262:	4632      	mov	r2, r6
 8005264:	4629      	mov	r1, r5
 8005266:	4620      	mov	r0, r4
 8005268:	f7fd fa2c 	bl	80026c4 <_Z13setPosition3dffff>
      printPosition();
 800526c:	f7ff fddc 	bl	8004e28 <_Z13printPositionv>
    for (float* cmd = (float*)targetGcode; cmd < (float*)targetGcode+targetGcodeLength*4; cmd+=4){
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	3310      	adds	r3, #16
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	e7b3      	b.n	80051e0 <_ZZ7setupUIvENKUlvE4_clEv+0x14>
    }
    lightStatus = COMPLETE;
 8005278:	4b03      	ldr	r3, [pc, #12]	; (8005288 <_ZZ7setupUIvENKUlvE4_clEv+0xbc>)
 800527a:	2205      	movs	r2, #5
 800527c:	701a      	strb	r2, [r3, #0]
  };
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005286:	bf00      	nop
 8005288:	20000018 	.word	0x20000018
 800528c:	2000d4d0 	.word	0x2000d4d0
 8005290:	2000db00 	.word	0x2000db00
 8005294:	2000d800 	.word	0x2000d800
 8005298:	42700000 	.word	0x42700000

0800529c <_ZZ7setupUIvENUlvE4_4_FUNEv>:
  startButton.onPressed = [](){
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  };
 80052a0:	2000      	movs	r0, #0
 80052a2:	f7ff ff93 	bl	80051cc <_ZZ7setupUIvENKUlvE4_clEv>
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <_ZZ7setupUIvENKUlvE4_cvPFvvEEv>:
  startButton.onPressed = [](){
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  };
 80052b0:	4b02      	ldr	r3, [pc, #8]	; (80052bc <_ZZ7setupUIvENKUlvE4_cvPFvvEEv+0x14>)
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	0800529d 	.word	0x0800529d

080052c0 <_ZZ7setupUIvENKUlvE5_clEv>:

  resetButton.onPressed = [](){
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
    lightStatus = RESETTING;
 80052c8:	4b2a      	ldr	r3, [pc, #168]	; (8005374 <_ZZ7setupUIvENKUlvE5_clEv+0xb4>)
 80052ca:	2204      	movs	r2, #4
 80052cc:	701a      	strb	r2, [r3, #0]
    xPulseMotor.setDirection(0);
 80052ce:	2100      	movs	r1, #0
 80052d0:	4829      	ldr	r0, [pc, #164]	; (8005378 <_ZZ7setupUIvENKUlvE5_clEv+0xb8>)
 80052d2:	f7fc feca 	bl	800206a <_ZN10PulseMotor12setDirectionEh>
    yPulseMotor.setDirection(0);
 80052d6:	2100      	movs	r1, #0
 80052d8:	4828      	ldr	r0, [pc, #160]	; (800537c <_ZZ7setupUIvENKUlvE5_clEv+0xbc>)
 80052da:	f7fc fec6 	bl	800206a <_ZN10PulseMotor12setDirectionEh>
    
    isResetComplete_X = isMotorStuck_X();
 80052de:	f7ff fde7 	bl	8004eb0 <_Z14isMotorStuck_Xv>
 80052e2:	4603      	mov	r3, r0
 80052e4:	461a      	mov	r2, r3
 80052e6:	4b26      	ldr	r3, [pc, #152]	; (8005380 <_ZZ7setupUIvENKUlvE5_clEv+0xc0>)
 80052e8:	701a      	strb	r2, [r3, #0]
    if (!isResetComplete_X){
 80052ea:	4b25      	ldr	r3, [pc, #148]	; (8005380 <_ZZ7setupUIvENKUlvE5_clEv+0xc0>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	f083 0301 	eor.w	r3, r3, #1
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <_ZZ7setupUIvENKUlvE5_clEv+0x3e>
      xPulseMotor.spinStart();
 80052f8:	481f      	ldr	r0, [pc, #124]	; (8005378 <_ZZ7setupUIvENKUlvE5_clEv+0xb8>)
 80052fa:	f7fd fe35 	bl	8002f68 <_ZN10PulseMotor9spinStartEv>
    }
    isResetComplete_Y = isMotorStuck_Y();
 80052fe:	f7ff fde9 	bl	8004ed4 <_Z14isMotorStuck_Yv>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	4b1f      	ldr	r3, [pc, #124]	; (8005384 <_ZZ7setupUIvENKUlvE5_clEv+0xc4>)
 8005308:	701a      	strb	r2, [r3, #0]
    if (!isResetComplete_Y){
 800530a:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <_ZZ7setupUIvENKUlvE5_clEv+0xc4>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	f083 0301 	eor.w	r3, r3, #1
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <_ZZ7setupUIvENKUlvE5_clEv+0x5e>
      yPulseMotor.spinStart();
 8005318:	4818      	ldr	r0, [pc, #96]	; (800537c <_ZZ7setupUIvENKUlvE5_clEv+0xbc>)
 800531a:	f7fd fe25 	bl	8002f68 <_ZN10PulseMotor9spinStartEv>
    }
    blankAll();
 800531e:	f7fd fb4f 	bl	80029c0 <_Z8blankAllv>
    while (!isResetComplete_X || !isResetComplete_Y){
 8005322:	4b17      	ldr	r3, [pc, #92]	; (8005380 <_ZZ7setupUIvENKUlvE5_clEv+0xc0>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <_ZZ7setupUIvENKUlvE5_clEv+0x72>
 800532a:	4b16      	ldr	r3, [pc, #88]	; (8005384 <_ZZ7setupUIvENKUlvE5_clEv+0xc4>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d118      	bne.n	8005364 <_ZZ7setupUIvENKUlvE5_clEv+0xa4>
      if (isMotorStuck_X()){
 8005332:	f7ff fdbd 	bl	8004eb0 <_Z14isMotorStuck_Xv>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <_ZZ7setupUIvENKUlvE5_clEv+0x88>
        xPulseMotor.spinStop();
 800533c:	480e      	ldr	r0, [pc, #56]	; (8005378 <_ZZ7setupUIvENKUlvE5_clEv+0xb8>)
 800533e:	f7fd fe2f 	bl	8002fa0 <_ZN10PulseMotor8spinStopEv>
        isResetComplete_X = true;
 8005342:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <_ZZ7setupUIvENKUlvE5_clEv+0xc0>)
 8005344:	2201      	movs	r2, #1
 8005346:	701a      	strb	r2, [r3, #0]
      }
      if (isMotorStuck_Y()){
 8005348:	f7ff fdc4 	bl	8004ed4 <_Z14isMotorStuck_Yv>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <_ZZ7setupUIvENKUlvE5_clEv+0x9e>
        yPulseMotor.spinStop();
 8005352:	480a      	ldr	r0, [pc, #40]	; (800537c <_ZZ7setupUIvENKUlvE5_clEv+0xbc>)
 8005354:	f7fd fe24 	bl	8002fa0 <_ZN10PulseMotor8spinStopEv>
        isResetComplete_Y = true;
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <_ZZ7setupUIvENKUlvE5_clEv+0xc4>)
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
      }
      updateLightEffect();
 800535e:	f7fc fd3d 	bl	8001ddc <_Z17updateLightEffectv>
    while (!isResetComplete_X || !isResetComplete_Y){
 8005362:	e7de      	b.n	8005322 <_ZZ7setupUIvENKUlvE5_clEv+0x62>
    }
    lightStatus = COMPLETE;
 8005364:	4b03      	ldr	r3, [pc, #12]	; (8005374 <_ZZ7setupUIvENKUlvE5_clEv+0xb4>)
 8005366:	2205      	movs	r2, #5
 8005368:	701a      	strb	r2, [r3, #0]
    // zPulseMotor.setDirection(0);
    // zPulseMotor.spinStart();
  };
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000018 	.word	0x20000018
 8005378:	20000190 	.word	0x20000190
 800537c:	200001c4 	.word	0x200001c4
 8005380:	20000184 	.word	0x20000184
 8005384:	20000185 	.word	0x20000185

08005388 <_ZZ7setupUIvENUlvE5_4_FUNEv>:
  resetButton.onPressed = [](){
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  };
 800538c:	2000      	movs	r0, #0
 800538e:	f7ff ff97 	bl	80052c0 <_ZZ7setupUIvENKUlvE5_clEv>
 8005392:	bd80      	pop	{r7, pc}

08005394 <_ZZ7setupUIvENKUlvE5_cvPFvvEEv>:
  resetButton.onPressed = [](){
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  };
 800539c:	4b02      	ldr	r3, [pc, #8]	; (80053a8 <_ZZ7setupUIvENKUlvE5_cvPFvvEEv+0x14>)
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr
 80053a8:	08005389 	.word	0x08005389

080053ac <_ZZ7setupUIvENKUlvE6_clEv>:

  testJoystick.whilePressing = [](){
 80053ac:	b590      	push	{r4, r7, lr}
 80053ae:	b099      	sub	sp, #100	; 0x64
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
    float xRatio = testJoystick.get_dX();
 80053b4:	4833      	ldr	r0, [pc, #204]	; (8005484 <_ZZ7setupUIvENKUlvE6_clEv+0xd8>)
 80053b6:	f7fe fd0d 	bl	8003dd4 <_ZN8Joystick6get_dXEv>
 80053ba:	65f8      	str	r0, [r7, #92]	; 0x5c
    char str[10];
    sprintf(str, "%.2f", xRatio);
 80053bc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80053be:	f7fb f89f 	bl	8000500 <__aeabi_f2d>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	f107 0008 	add.w	r0, r7, #8
 80053ca:	492f      	ldr	r1, [pc, #188]	; (8005488 <_ZZ7setupUIvENKUlvE6_clEv+0xdc>)
 80053cc:	f002 ff68 	bl	80082a0 <sprintf_>
    debugLog(str, 19);
 80053d0:	f107 0208 	add.w	r2, r7, #8
 80053d4:	f107 0314 	add.w	r3, r7, #20
 80053d8:	4611      	mov	r1, r2
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fc fdcc 	bl	8001f78 <_ZN6StringC1EPKc>
 80053e0:	f107 0314 	add.w	r3, r7, #20
 80053e4:	2113      	movs	r1, #19
 80053e6:	4618      	mov	r0, r3
 80053e8:	f003 fefe 	bl	80091e8 <_Z8debugLogRK6Stringt>
    xPulseMotor.step(xRatio < 0 ? 0 : 1,abs(xRatio*300));
 80053ec:	2301      	movs	r3, #1
 80053ee:	461c      	mov	r4, r3
 80053f0:	f04f 0100 	mov.w	r1, #0
 80053f4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80053f6:	f7fb feb9 	bl	800116c <__aeabi_fcmplt>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <_ZZ7setupUIvENKUlvE6_clEv+0x58>
 8005400:	2300      	movs	r3, #0
 8005402:	461c      	mov	r4, r3
 8005404:	b2e3      	uxtb	r3, r4
 8005406:	f083 0301 	eor.w	r3, r3, #1
 800540a:	b2db      	uxtb	r3, r3
 800540c:	461c      	mov	r4, r3
 800540e:	491f      	ldr	r1, [pc, #124]	; (800548c <_ZZ7setupUIvENKUlvE6_clEv+0xe0>)
 8005410:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005412:	f7fb fd0d 	bl	8000e30 <__aeabi_fmul>
 8005416:	4603      	mov	r3, r0
 8005418:	4618      	mov	r0, r3
 800541a:	f7fb fee5 	bl	80011e8 <__aeabi_f2iz>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	bfb8      	it	lt
 8005424:	425b      	neglt	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	4621      	mov	r1, r4
 800542a:	4819      	ldr	r0, [pc, #100]	; (8005490 <_ZZ7setupUIvENKUlvE6_clEv+0xe4>)
 800542c:	f7fc fe48 	bl	80020c0 <_ZN10PulseMotor4stepEhm>
    float yRatio = testJoystick.get_dY();
 8005430:	4814      	ldr	r0, [pc, #80]	; (8005484 <_ZZ7setupUIvENKUlvE6_clEv+0xd8>)
 8005432:	f7fe fd21 	bl	8003e78 <_ZN8Joystick6get_dYEv>
 8005436:	65b8      	str	r0, [r7, #88]	; 0x58
    yPulseMotor.step(yRatio < 0 ? 0 : 1,abs(yRatio*300));
 8005438:	2301      	movs	r3, #1
 800543a:	461c      	mov	r4, r3
 800543c:	f04f 0100 	mov.w	r1, #0
 8005440:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005442:	f7fb fe93 	bl	800116c <__aeabi_fcmplt>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <_ZZ7setupUIvENKUlvE6_clEv+0xa4>
 800544c:	2300      	movs	r3, #0
 800544e:	461c      	mov	r4, r3
 8005450:	b2e3      	uxtb	r3, r4
 8005452:	f083 0301 	eor.w	r3, r3, #1
 8005456:	b2db      	uxtb	r3, r3
 8005458:	461c      	mov	r4, r3
 800545a:	490c      	ldr	r1, [pc, #48]	; (800548c <_ZZ7setupUIvENKUlvE6_clEv+0xe0>)
 800545c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800545e:	f7fb fce7 	bl	8000e30 <__aeabi_fmul>
 8005462:	4603      	mov	r3, r0
 8005464:	4618      	mov	r0, r3
 8005466:	f7fb febf 	bl	80011e8 <__aeabi_f2iz>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	bfb8      	it	lt
 8005470:	425b      	neglt	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	4621      	mov	r1, r4
 8005476:	4807      	ldr	r0, [pc, #28]	; (8005494 <_ZZ7setupUIvENKUlvE6_clEv+0xe8>)
 8005478:	f7fc fe22 	bl	80020c0 <_ZN10PulseMotor4stepEhm>
  };
 800547c:	bf00      	nop
 800547e:	3764      	adds	r7, #100	; 0x64
 8005480:	46bd      	mov	sp, r7
 8005482:	bd90      	pop	{r4, r7, pc}
 8005484:	2000d718 	.word	0x2000d718
 8005488:	0800d56c 	.word	0x0800d56c
 800548c:	43960000 	.word	0x43960000
 8005490:	20000190 	.word	0x20000190
 8005494:	200001c4 	.word	0x200001c4

08005498 <_ZZ7setupUIvENUlvE6_4_FUNEv>:
  testJoystick.whilePressing = [](){
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  };
 800549c:	2000      	movs	r0, #0
 800549e:	f7ff ff85 	bl	80053ac <_ZZ7setupUIvENKUlvE6_clEv>
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <_ZZ7setupUIvENKUlvE6_cvPFvvEEv>:
  testJoystick.whilePressing = [](){
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  };
 80054ac:	4b02      	ldr	r3, [pc, #8]	; (80054b8 <_ZZ7setupUIvENKUlvE6_cvPFvvEEv+0x14>)
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	08005499 	.word	0x08005499

080054bc <_ZZ7setupUIvENKUlvE7_clEv>:

  zJoystick.whilePressing = [](){
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
    float zRatio = zJoystick.get_dY();
 80054c4:	4811      	ldr	r0, [pc, #68]	; (800550c <_ZZ7setupUIvENKUlvE7_clEv+0x50>)
 80054c6:	f7fe fcd7 	bl	8003e78 <_ZN8Joystick6get_dYEv>
 80054ca:	60f8      	str	r0, [r7, #12]
    zPulseMotor.step(zRatio < 0 ? 1 : 0,abs(zRatio*50));
 80054cc:	f04f 0100 	mov.w	r1, #0
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7fb fe4b 	bl	800116c <__aeabi_fcmplt>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <_ZZ7setupUIvENKUlvE7_clEv+0x24>
 80054dc:	2401      	movs	r4, #1
 80054de:	e000      	b.n	80054e2 <_ZZ7setupUIvENKUlvE7_clEv+0x26>
 80054e0:	2400      	movs	r4, #0
 80054e2:	490b      	ldr	r1, [pc, #44]	; (8005510 <_ZZ7setupUIvENKUlvE7_clEv+0x54>)
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7fb fca3 	bl	8000e30 <__aeabi_fmul>
 80054ea:	4603      	mov	r3, r0
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fb fe7b 	bl	80011e8 <__aeabi_f2iz>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bfb8      	it	lt
 80054f8:	425b      	neglt	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	4621      	mov	r1, r4
 80054fe:	4805      	ldr	r0, [pc, #20]	; (8005514 <_ZZ7setupUIvENKUlvE7_clEv+0x58>)
 8005500:	f7fc fdde 	bl	80020c0 <_ZN10PulseMotor4stepEhm>
  };
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	bd90      	pop	{r4, r7, pc}
 800550c:	2000d748 	.word	0x2000d748
 8005510:	42480000 	.word	0x42480000
 8005514:	200001f8 	.word	0x200001f8

08005518 <_ZZ7setupUIvENUlvE7_4_FUNEv>:
  zJoystick.whilePressing = [](){
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  };
 800551c:	2000      	movs	r0, #0
 800551e:	f7ff ffcd 	bl	80054bc <_ZZ7setupUIvENKUlvE7_clEv>
 8005522:	bd80      	pop	{r7, pc}

08005524 <_ZZ7setupUIvENKUlvE7_cvPFvvEEv>:
  zJoystick.whilePressing = [](){
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  };
 800552c:	4b02      	ldr	r3, [pc, #8]	; (8005538 <_ZZ7setupUIvENKUlvE7_cvPFvvEEv+0x14>)
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr
 8005538:	08005519 	.word	0x08005519

0800553c <_ZZ7setupUIvENKUlvE8_clEv>:
  zJoystick.deadzoneSideLength = 0;
  
  setZeroButton.onPressed = [](){
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
    xPulseMotor.resetStepSum();
 8005544:	4807      	ldr	r0, [pc, #28]	; (8005564 <_ZZ7setupUIvENKUlvE8_clEv+0x28>)
 8005546:	f7fd fd67 	bl	8003018 <_ZN14SERVO42C_Pulse12resetStepSumEv>
    yPulseMotor.resetStepSum();
 800554a:	4807      	ldr	r0, [pc, #28]	; (8005568 <_ZZ7setupUIvENKUlvE8_clEv+0x2c>)
 800554c:	f7fd fd64 	bl	8003018 <_ZN14SERVO42C_Pulse12resetStepSumEv>
    zPulseMotor.resetStepSum();
 8005550:	4806      	ldr	r0, [pc, #24]	; (800556c <_ZZ7setupUIvENKUlvE8_clEv+0x30>)
 8005552:	f7fd fd61 	bl	8003018 <_ZN14SERVO42C_Pulse12resetStepSumEv>
    printPosition();
 8005556:	f7ff fc67 	bl	8004e28 <_Z13printPositionv>
  };
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000190 	.word	0x20000190
 8005568:	200001c4 	.word	0x200001c4
 800556c:	200001f8 	.word	0x200001f8

08005570 <_ZZ7setupUIvENUlvE8_4_FUNEv>:
  setZeroButton.onPressed = [](){
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  };
 8005574:	2000      	movs	r0, #0
 8005576:	f7ff ffe1 	bl	800553c <_ZZ7setupUIvENKUlvE8_clEv>
 800557a:	bd80      	pop	{r7, pc}

0800557c <_ZZ7setupUIvENKUlvE8_cvPFvvEEv>:
  setZeroButton.onPressed = [](){
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  };
 8005584:	4b02      	ldr	r3, [pc, #8]	; (8005590 <_ZZ7setupUIvENKUlvE8_cvPFvvEEv+0x14>)
 8005586:	4618      	mov	r0, r3
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr
 8005590:	08005571 	.word	0x08005571

08005594 <_ZZ7setupUIvENKUlvE9_clEv>:




  // operation screen
  operationScreen.onUpdate = [](){
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
    previewDisplay.previewScale = scaleSlider.getValue();
 800559c:	4806      	ldr	r0, [pc, #24]	; (80055b8 <_ZZ7setupUIvENKUlvE9_clEv+0x24>)
 800559e:	f7fe f855 	bl	800364c <_ZN6Slider8getValueEv>
 80055a2:	4603      	mov	r3, r0
 80055a4:	4a05      	ldr	r2, [pc, #20]	; (80055bc <_ZZ7setupUIvENKUlvE9_clEv+0x28>)
 80055a6:	6113      	str	r3, [r2, #16]
    previewDisplay.render();
 80055a8:	4804      	ldr	r0, [pc, #16]	; (80055bc <_ZZ7setupUIvENKUlvE9_clEv+0x28>)
 80055aa:	f7ff fbc9 	bl	8004d40 <_ZN14PreviewDisplay6renderEv>
  };
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	2000d820 	.word	0x2000d820
 80055bc:	2000d800 	.word	0x2000d800

080055c0 <_ZZ7setupUIvENUlvE9_4_FUNEv>:
  operationScreen.onUpdate = [](){
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  };
 80055c4:	2000      	movs	r0, #0
 80055c6:	f7ff ffe5 	bl	8005594 <_ZZ7setupUIvENKUlvE9_clEv>
 80055ca:	bd80      	pop	{r7, pc}

080055cc <_ZZ7setupUIvENKUlvE9_cvPFvvEEv>:
  operationScreen.onUpdate = [](){
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  };
 80055d4:	4b02      	ldr	r3, [pc, #8]	; (80055e0 <_ZZ7setupUIvENKUlvE9_cvPFvvEEv+0x14>)
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr
 80055e0:	080055c1 	.word	0x080055c1

080055e4 <_ZZ7setupUIvENKUlvE10_clEv>:

  previewJoystick.whilePressing = [](){
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
    if (previewDisplay.use3d){
 80055ec:	4b2c      	ldr	r3, [pc, #176]	; (80056a0 <_ZZ7setupUIvENKUlvE10_clEv+0xbc>)
 80055ee:	7f1b      	ldrb	r3, [r3, #28]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d028      	beq.n	8005646 <_ZZ7setupUIvENKUlvE10_clEv+0x62>
      rotateAngleZ += previewJoystick.get_dX_dt() * 30;
 80055f4:	482b      	ldr	r0, [pc, #172]	; (80056a4 <_ZZ7setupUIvENKUlvE10_clEv+0xc0>)
 80055f6:	f7fe fc15 	bl	8003e24 <_ZN8Joystick9get_dX_dtEv>
 80055fa:	4603      	mov	r3, r0
 80055fc:	492a      	ldr	r1, [pc, #168]	; (80056a8 <_ZZ7setupUIvENKUlvE10_clEv+0xc4>)
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fb fc16 	bl	8000e30 <__aeabi_fmul>
 8005604:	4603      	mov	r3, r0
 8005606:	461a      	mov	r2, r3
 8005608:	4b28      	ldr	r3, [pc, #160]	; (80056ac <_ZZ7setupUIvENKUlvE10_clEv+0xc8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f7fb fb06 	bl	8000c20 <__addsf3>
 8005614:	4603      	mov	r3, r0
 8005616:	461a      	mov	r2, r3
 8005618:	4b24      	ldr	r3, [pc, #144]	; (80056ac <_ZZ7setupUIvENKUlvE10_clEv+0xc8>)
 800561a:	601a      	str	r2, [r3, #0]
      rotateAngleX += previewJoystick.get_dY_dt() * 30;
 800561c:	4821      	ldr	r0, [pc, #132]	; (80056a4 <_ZZ7setupUIvENKUlvE10_clEv+0xc0>)
 800561e:	f7fe fc53 	bl	8003ec8 <_ZN8Joystick9get_dY_dtEv>
 8005622:	4603      	mov	r3, r0
 8005624:	4920      	ldr	r1, [pc, #128]	; (80056a8 <_ZZ7setupUIvENKUlvE10_clEv+0xc4>)
 8005626:	4618      	mov	r0, r3
 8005628:	f7fb fc02 	bl	8000e30 <__aeabi_fmul>
 800562c:	4603      	mov	r3, r0
 800562e:	461a      	mov	r2, r3
 8005630:	4b1f      	ldr	r3, [pc, #124]	; (80056b0 <_ZZ7setupUIvENKUlvE10_clEv+0xcc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f7fb faf2 	bl	8000c20 <__addsf3>
 800563c:	4603      	mov	r3, r0
 800563e:	461a      	mov	r2, r3
 8005640:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <_ZZ7setupUIvENKUlvE10_clEv+0xcc>)
 8005642:	601a      	str	r2, [r3, #0]
      previewDisplay.xOffset += xRatio;
      float yRatio = previewJoystick.get_dY_dt() * 50;
      previewDisplay.yOffset += yRatio;
    }

  };
 8005644:	e027      	b.n	8005696 <_ZZ7setupUIvENKUlvE10_clEv+0xb2>
      float xRatio = previewJoystick.get_dX_dt() * 50;
 8005646:	4817      	ldr	r0, [pc, #92]	; (80056a4 <_ZZ7setupUIvENKUlvE10_clEv+0xc0>)
 8005648:	f7fe fbec 	bl	8003e24 <_ZN8Joystick9get_dX_dtEv>
 800564c:	4603      	mov	r3, r0
 800564e:	4919      	ldr	r1, [pc, #100]	; (80056b4 <_ZZ7setupUIvENKUlvE10_clEv+0xd0>)
 8005650:	4618      	mov	r0, r3
 8005652:	f7fb fbed 	bl	8000e30 <__aeabi_fmul>
 8005656:	4603      	mov	r3, r0
 8005658:	60fb      	str	r3, [r7, #12]
      previewDisplay.xOffset += xRatio;
 800565a:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <_ZZ7setupUIvENKUlvE10_clEv+0xbc>)
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	68f9      	ldr	r1, [r7, #12]
 8005660:	4618      	mov	r0, r3
 8005662:	f7fb fadd 	bl	8000c20 <__addsf3>
 8005666:	4603      	mov	r3, r0
 8005668:	461a      	mov	r2, r3
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <_ZZ7setupUIvENKUlvE10_clEv+0xbc>)
 800566c:	615a      	str	r2, [r3, #20]
      float yRatio = previewJoystick.get_dY_dt() * 50;
 800566e:	480d      	ldr	r0, [pc, #52]	; (80056a4 <_ZZ7setupUIvENKUlvE10_clEv+0xc0>)
 8005670:	f7fe fc2a 	bl	8003ec8 <_ZN8Joystick9get_dY_dtEv>
 8005674:	4603      	mov	r3, r0
 8005676:	490f      	ldr	r1, [pc, #60]	; (80056b4 <_ZZ7setupUIvENKUlvE10_clEv+0xd0>)
 8005678:	4618      	mov	r0, r3
 800567a:	f7fb fbd9 	bl	8000e30 <__aeabi_fmul>
 800567e:	4603      	mov	r3, r0
 8005680:	60bb      	str	r3, [r7, #8]
      previewDisplay.yOffset += yRatio;
 8005682:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <_ZZ7setupUIvENKUlvE10_clEv+0xbc>)
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	4618      	mov	r0, r3
 800568a:	f7fb fac9 	bl	8000c20 <__addsf3>
 800568e:	4603      	mov	r3, r0
 8005690:	461a      	mov	r2, r3
 8005692:	4b03      	ldr	r3, [pc, #12]	; (80056a0 <_ZZ7setupUIvENKUlvE10_clEv+0xbc>)
 8005694:	619a      	str	r2, [r3, #24]
  };
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	2000d800 	.word	0x2000d800
 80056a4:	2000d840 	.word	0x2000d840
 80056a8:	41f00000 	.word	0x41f00000
 80056ac:	20002504 	.word	0x20002504
 80056b0:	200024fc 	.word	0x200024fc
 80056b4:	42480000 	.word	0x42480000

080056b8 <_ZZ7setupUIvENUlvE10_4_FUNEv>:
  previewJoystick.whilePressing = [](){
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  };
 80056bc:	2000      	movs	r0, #0
 80056be:	f7ff ff91 	bl	80055e4 <_ZZ7setupUIvENKUlvE10_clEv>
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <_ZZ7setupUIvENKUlvE10_cvPFvvEEv>:
  previewJoystick.whilePressing = [](){
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  };
 80056cc:	4b02      	ldr	r3, [pc, #8]	; (80056d8 <_ZZ7setupUIvENKUlvE10_cvPFvvEEv+0x14>)
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr
 80056d8:	080056b9 	.word	0x080056b9

080056dc <_ZZ7setupUIvENKUlvE11_clEv>:
  previewJoystick.performanceMode = true;
  previewJoystick.deadzoneSideLength = 30;

  selectGcodeButton.onPressed = [](){
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
    gcodeSelectScreen.setActive();
 80056e4:	4803      	ldr	r0, [pc, #12]	; (80056f4 <_ZZ7setupUIvENKUlvE11_clEv+0x18>)
 80056e6:	f7fd fcc9 	bl	800307c <_ZN6Screen9setActiveEv>
  };
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	2000d974 	.word	0x2000d974

080056f8 <_ZZ7setupUIvENUlvE11_4_FUNEv>:
  selectGcodeButton.onPressed = [](){
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  };
 80056fc:	2000      	movs	r0, #0
 80056fe:	f7ff ffed 	bl	80056dc <_ZZ7setupUIvENKUlvE11_clEv>
 8005702:	bd80      	pop	{r7, pc}

08005704 <_ZZ7setupUIvENKUlvE11_cvPFvvEEv>:
  selectGcodeButton.onPressed = [](){
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  };
 800570c:	4b02      	ldr	r3, [pc, #8]	; (8005718 <_ZZ7setupUIvENKUlvE11_cvPFvvEEv+0x14>)
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr
 8005718:	080056f9 	.word	0x080056f9

0800571c <_ZZ7setupUIvENKUlvE12_clEv>:
  toggleAntiAliasButton.onPressed = [](){
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
    previewDisplay.useAA = !previewDisplay.useAA;
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <_ZZ7setupUIvENKUlvE12_clEv+0x38>)
 8005726:	7f5b      	ldrb	r3, [r3, #29]
 8005728:	f083 0301 	eor.w	r3, r3, #1
 800572c:	b2da      	uxtb	r2, r3
 800572e:	4b09      	ldr	r3, [pc, #36]	; (8005754 <_ZZ7setupUIvENKUlvE12_clEv+0x38>)
 8005730:	775a      	strb	r2, [r3, #29]
    if (previewDisplay.useAA)
 8005732:	4b08      	ldr	r3, [pc, #32]	; (8005754 <_ZZ7setupUIvENKUlvE12_clEv+0x38>)
 8005734:	7f5b      	ldrb	r3, [r3, #29]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <_ZZ7setupUIvENKUlvE12_clEv+0x28>
      toggleAntiAliasButton.setText("AA:ON");
 800573a:	4907      	ldr	r1, [pc, #28]	; (8005758 <_ZZ7setupUIvENKUlvE12_clEv+0x3c>)
 800573c:	4807      	ldr	r0, [pc, #28]	; (800575c <_ZZ7setupUIvENKUlvE12_clEv+0x40>)
 800573e:	f7fd fd6d 	bl	800321c <_ZN6Button7setTextEPKc>
    else
      toggleAntiAliasButton.setText("AA:OFF");
    
  };
 8005742:	e003      	b.n	800574c <_ZZ7setupUIvENKUlvE12_clEv+0x30>
      toggleAntiAliasButton.setText("AA:OFF");
 8005744:	4906      	ldr	r1, [pc, #24]	; (8005760 <_ZZ7setupUIvENKUlvE12_clEv+0x44>)
 8005746:	4805      	ldr	r0, [pc, #20]	; (800575c <_ZZ7setupUIvENKUlvE12_clEv+0x40>)
 8005748:	f7fd fd68 	bl	800321c <_ZN6Button7setTextEPKc>
  };
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	2000d800 	.word	0x2000d800
 8005758:	0800d574 	.word	0x0800d574
 800575c:	2000d8a4 	.word	0x2000d8a4
 8005760:	0800d57c 	.word	0x0800d57c

08005764 <_ZZ7setupUIvENUlvE12_4_FUNEv>:
  toggleAntiAliasButton.onPressed = [](){
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  };
 8005768:	2000      	movs	r0, #0
 800576a:	f7ff ffd7 	bl	800571c <_ZZ7setupUIvENKUlvE12_clEv>
 800576e:	bd80      	pop	{r7, pc}

08005770 <_ZZ7setupUIvENKUlvE12_cvPFvvEEv>:
  toggleAntiAliasButton.onPressed = [](){
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  };
 8005778:	4b02      	ldr	r3, [pc, #8]	; (8005784 <_ZZ7setupUIvENKUlvE12_cvPFvvEEv+0x14>)
 800577a:	4618      	mov	r0, r3
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	08005765 	.word	0x08005765

08005788 <_ZZ7setupUIvENKUlvE13_clEv>:
  toggle3D2DButton.onPressed = [](){
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
    previewDisplay.use3d = !previewDisplay.use3d;
 8005790:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <_ZZ7setupUIvENKUlvE13_clEv+0x38>)
 8005792:	7f1b      	ldrb	r3, [r3, #28]
 8005794:	f083 0301 	eor.w	r3, r3, #1
 8005798:	b2da      	uxtb	r2, r3
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <_ZZ7setupUIvENKUlvE13_clEv+0x38>)
 800579c:	771a      	strb	r2, [r3, #28]
    if (previewDisplay.use3d)
 800579e:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <_ZZ7setupUIvENKUlvE13_clEv+0x38>)
 80057a0:	7f1b      	ldrb	r3, [r3, #28]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d004      	beq.n	80057b0 <_ZZ7setupUIvENKUlvE13_clEv+0x28>
      toggle3D2DButton.setText(" 3D");
 80057a6:	4907      	ldr	r1, [pc, #28]	; (80057c4 <_ZZ7setupUIvENKUlvE13_clEv+0x3c>)
 80057a8:	4807      	ldr	r0, [pc, #28]	; (80057c8 <_ZZ7setupUIvENKUlvE13_clEv+0x40>)
 80057aa:	f7fd fd37 	bl	800321c <_ZN6Button7setTextEPKc>
    else
      toggle3D2DButton.setText(" 2D");
  };
 80057ae:	e003      	b.n	80057b8 <_ZZ7setupUIvENKUlvE13_clEv+0x30>
      toggle3D2DButton.setText(" 2D");
 80057b0:	4906      	ldr	r1, [pc, #24]	; (80057cc <_ZZ7setupUIvENKUlvE13_clEv+0x44>)
 80057b2:	4805      	ldr	r0, [pc, #20]	; (80057c8 <_ZZ7setupUIvENKUlvE13_clEv+0x40>)
 80057b4:	f7fd fd32 	bl	800321c <_ZN6Button7setTextEPKc>
  };
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	2000d800 	.word	0x2000d800
 80057c4:	0800d584 	.word	0x0800d584
 80057c8:	2000d8d8 	.word	0x2000d8d8
 80057cc:	0800d588 	.word	0x0800d588

080057d0 <_ZZ7setupUIvENUlvE13_4_FUNEv>:
  toggle3D2DButton.onPressed = [](){
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  };
 80057d4:	2000      	movs	r0, #0
 80057d6:	f7ff ffd7 	bl	8005788 <_ZZ7setupUIvENKUlvE13_clEv>
 80057da:	bd80      	pop	{r7, pc}

080057dc <_ZZ7setupUIvENKUlvE13_cvPFvvEEv>:
  toggle3D2DButton.onPressed = [](){
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  };
 80057e4:	4b02      	ldr	r3, [pc, #8]	; (80057f0 <_ZZ7setupUIvENKUlvE13_cvPFvvEEv+0x14>)
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr
 80057f0:	080057d1 	.word	0x080057d1

080057f4 <_ZZ7setupUIvENKUlvE14_clEv>:

  resetPreviewButton.onPressed = [](){
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
    if (previewDisplay.use3d){
 80057fc:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <_ZZ7setupUIvENKUlvE14_clEv+0x3c>)
 80057fe:	7f1b      	ldrb	r3, [r3, #28]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d008      	beq.n	8005816 <_ZZ7setupUIvENKUlvE14_clEv+0x22>
      rotateAngleX = 0;
 8005804:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <_ZZ7setupUIvENKUlvE14_clEv+0x40>)
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
      rotateAngleZ = 0;
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <_ZZ7setupUIvENKUlvE14_clEv+0x44>)
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
    }else{
      previewDisplay.xOffset = 0;
      previewDisplay.yOffset = 0;
    }
  };
 8005814:	e007      	b.n	8005826 <_ZZ7setupUIvENKUlvE14_clEv+0x32>
      previewDisplay.xOffset = 0;
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <_ZZ7setupUIvENKUlvE14_clEv+0x3c>)
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	615a      	str	r2, [r3, #20]
      previewDisplay.yOffset = 0;
 800581e:	4b04      	ldr	r3, [pc, #16]	; (8005830 <_ZZ7setupUIvENKUlvE14_clEv+0x3c>)
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	619a      	str	r2, [r3, #24]
  };
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr
 8005830:	2000d800 	.word	0x2000d800
 8005834:	200024fc 	.word	0x200024fc
 8005838:	20002504 	.word	0x20002504

0800583c <_ZZ7setupUIvENUlvE14_4_FUNEv>:
  resetPreviewButton.onPressed = [](){
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  };
 8005840:	2000      	movs	r0, #0
 8005842:	f7ff ffd7 	bl	80057f4 <_ZZ7setupUIvENKUlvE14_clEv>
 8005846:	bd80      	pop	{r7, pc}

08005848 <_ZZ7setupUIvENKUlvE14_cvPFvvEEv>:
  resetPreviewButton.onPressed = [](){
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  };
 8005850:	4b02      	ldr	r3, [pc, #8]	; (800585c <_ZZ7setupUIvENKUlvE14_cvPFvvEEv+0x14>)
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr
 800585c:	0800583d 	.word	0x0800583d

08005860 <_ZZ7setupUIvENKUlvE15_clEv>:

  

  autoAlignButton.onPressed = [](){
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
    float xMin = 114514.0;
 8005868:	4b29      	ldr	r3, [pc, #164]	; (8005910 <_ZZ7setupUIvENKUlvE15_clEv+0xb0>)
 800586a:	617b      	str	r3, [r7, #20]
    float yMax = -114514.0;
 800586c:	4b29      	ldr	r3, [pc, #164]	; (8005914 <_ZZ7setupUIvENKUlvE15_clEv+0xb4>)
 800586e:	613b      	str	r3, [r7, #16]

    for (float* cmd = (float*)targetGcode; cmd < (float*)targetGcode+targetGcodeLength*4; cmd+=4){
 8005870:	4b29      	ldr	r3, [pc, #164]	; (8005918 <_ZZ7setupUIvENKUlvE15_clEv+0xb8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	4b28      	ldr	r3, [pc, #160]	; (8005918 <_ZZ7setupUIvENKUlvE15_clEv+0xb8>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4b28      	ldr	r3, [pc, #160]	; (800591c <_ZZ7setupUIvENKUlvE15_clEv+0xbc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	4413      	add	r3, r2
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	429a      	cmp	r2, r3
 8005886:	d22a      	bcs.n	80058de <_ZZ7setupUIvENKUlvE15_clEv+0x7e>
      if (xMin == -114514.0 || cmd[0] < xMin){
 8005888:	4922      	ldr	r1, [pc, #136]	; (8005914 <_ZZ7setupUIvENKUlvE15_clEv+0xb4>)
 800588a:	6978      	ldr	r0, [r7, #20]
 800588c:	f7fb fc64 	bl	8001158 <__aeabi_fcmpeq>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d108      	bne.n	80058a8 <_ZZ7setupUIvENKUlvE15_clEv+0x48>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4619      	mov	r1, r3
 800589c:	6978      	ldr	r0, [r7, #20]
 800589e:	f7fb fc83 	bl	80011a8 <__aeabi_fcmpgt>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <_ZZ7setupUIvENKUlvE15_clEv+0x4e>
        xMin = cmd[0];
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	617b      	str	r3, [r7, #20]
      }
      if (yMax == -114514.0 || cmd[1] > yMax){
 80058ae:	4919      	ldr	r1, [pc, #100]	; (8005914 <_ZZ7setupUIvENKUlvE15_clEv+0xb4>)
 80058b0:	6938      	ldr	r0, [r7, #16]
 80058b2:	f7fb fc51 	bl	8001158 <__aeabi_fcmpeq>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d109      	bne.n	80058d0 <_ZZ7setupUIvENKUlvE15_clEv+0x70>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3304      	adds	r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4619      	mov	r1, r3
 80058c4:	6938      	ldr	r0, [r7, #16]
 80058c6:	f7fb fc51 	bl	800116c <__aeabi_fcmplt>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <_ZZ7setupUIvENKUlvE15_clEv+0x76>
        yMax = cmd[1];
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	613b      	str	r3, [r7, #16]
    for (float* cmd = (float*)targetGcode; cmd < (float*)targetGcode+targetGcodeLength*4; cmd+=4){
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3310      	adds	r3, #16
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e7cb      	b.n	8005876 <_ZZ7setupUIvENKUlvE15_clEv+0x16>
      }
    }

    previewDisplay.xOffset = xMin * previewDisplay.previewScale;
 80058de:	4b10      	ldr	r3, [pc, #64]	; (8005920 <_ZZ7setupUIvENKUlvE15_clEv+0xc0>)
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	6979      	ldr	r1, [r7, #20]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fb faa3 	bl	8000e30 <__aeabi_fmul>
 80058ea:	4603      	mov	r3, r0
 80058ec:	461a      	mov	r2, r3
 80058ee:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <_ZZ7setupUIvENKUlvE15_clEv+0xc0>)
 80058f0:	615a      	str	r2, [r3, #20]
    previewDisplay.yOffset = yMax * previewDisplay.previewScale;
 80058f2:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <_ZZ7setupUIvENKUlvE15_clEv+0xc0>)
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	6939      	ldr	r1, [r7, #16]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fb fa99 	bl	8000e30 <__aeabi_fmul>
 80058fe:	4603      	mov	r3, r0
 8005900:	461a      	mov	r2, r3
 8005902:	4b07      	ldr	r3, [pc, #28]	; (8005920 <_ZZ7setupUIvENKUlvE15_clEv+0xc0>)
 8005904:	619a      	str	r2, [r3, #24]
  };
 8005906:	bf00      	nop
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	47dfa900 	.word	0x47dfa900
 8005914:	c7dfa900 	.word	0xc7dfa900
 8005918:	2000d4d0 	.word	0x2000d4d0
 800591c:	2000db00 	.word	0x2000db00
 8005920:	2000d800 	.word	0x2000d800

08005924 <_ZZ7setupUIvENUlvE15_4_FUNEv>:
  autoAlignButton.onPressed = [](){
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  };
 8005928:	2000      	movs	r0, #0
 800592a:	f7ff ff99 	bl	8005860 <_ZZ7setupUIvENKUlvE15_clEv>
 800592e:	bd80      	pop	{r7, pc}

08005930 <_ZZ7setupUIvENKUlvE15_cvPFvvEEv>:
  autoAlignButton.onPressed = [](){
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  };
 8005938:	4b02      	ldr	r3, [pc, #8]	; (8005944 <_ZZ7setupUIvENKUlvE15_cvPFvvEEv+0x14>)
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	08005925 	.word	0x08005925

08005948 <_ZZ7setupUIvENKUlvE16_clEv>:




  // gcode select screen
  item1Button.onPressed = [](){
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
    setGcodeSource(ENTERPRIZE);
 8005950:	2000      	movs	r0, #0
 8005952:	f7ff faf7 	bl	8004f44 <_Z14setGcodeSource12GCODE_SOURCE>
    operationScreen.setActive();
 8005956:	4803      	ldr	r0, [pc, #12]	; (8005964 <_ZZ7setupUIvENKUlvE16_clEv+0x1c>)
 8005958:	f7fd fb90 	bl	800307c <_ZN6Screen9setActiveEv>
  };
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	2000d778 	.word	0x2000d778

08005968 <_ZZ7setupUIvENUlvE16_4_FUNEv>:
  item1Button.onPressed = [](){
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  };
 800596c:	2000      	movs	r0, #0
 800596e:	f7ff ffeb 	bl	8005948 <_ZZ7setupUIvENKUlvE16_clEv>
 8005972:	bd80      	pop	{r7, pc}

08005974 <_ZZ7setupUIvENKUlvE16_cvPFvvEEv>:
  item1Button.onPressed = [](){
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  };
 800597c:	4b02      	ldr	r3, [pc, #8]	; (8005988 <_ZZ7setupUIvENKUlvE16_cvPFvvEEv+0x14>)
 800597e:	4618      	mov	r0, r3
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr
 8005988:	08005969 	.word	0x08005969

0800598c <_ZZ7setupUIvENKUlvE17_clEv>:
  item2Button.onPressed = [](){
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
    setGcodeSource(GENSHIN);
 8005994:	2003      	movs	r0, #3
 8005996:	f7ff fad5 	bl	8004f44 <_Z14setGcodeSource12GCODE_SOURCE>
    operationScreen.setActive();
 800599a:	4803      	ldr	r0, [pc, #12]	; (80059a8 <_ZZ7setupUIvENKUlvE17_clEv+0x1c>)
 800599c:	f7fd fb6e 	bl	800307c <_ZN6Screen9setActiveEv>
  };
 80059a0:	bf00      	nop
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	2000d778 	.word	0x2000d778

080059ac <_ZZ7setupUIvENUlvE17_4_FUNEv>:
  item2Button.onPressed = [](){
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  };
 80059b0:	2000      	movs	r0, #0
 80059b2:	f7ff ffeb 	bl	800598c <_ZZ7setupUIvENKUlvE17_clEv>
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <_ZZ7setupUIvENKUlvE17_cvPFvvEEv>:
  item2Button.onPressed = [](){
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  };
 80059c0:	4b02      	ldr	r3, [pc, #8]	; (80059cc <_ZZ7setupUIvENKUlvE17_cvPFvvEEv+0x14>)
 80059c2:	4618      	mov	r0, r3
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr
 80059cc:	080059ad 	.word	0x080059ad

080059d0 <_ZZ7setupUIvENKUlvE18_clEv>:
  item3Button.onPressed = [](){
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
    setGcodeSource(PYRAMID);
 80059d8:	2002      	movs	r0, #2
 80059da:	f7ff fab3 	bl	8004f44 <_Z14setGcodeSource12GCODE_SOURCE>
    operationScreen.setActive();
 80059de:	4803      	ldr	r0, [pc, #12]	; (80059ec <_ZZ7setupUIvENKUlvE18_clEv+0x1c>)
 80059e0:	f7fd fb4c 	bl	800307c <_ZN6Screen9setActiveEv>
  };
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	2000d778 	.word	0x2000d778

080059f0 <_ZZ7setupUIvENUlvE18_4_FUNEv>:
  item3Button.onPressed = [](){
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  };
 80059f4:	2000      	movs	r0, #0
 80059f6:	f7ff ffeb 	bl	80059d0 <_ZZ7setupUIvENKUlvE18_clEv>
 80059fa:	bd80      	pop	{r7, pc}

080059fc <_ZZ7setupUIvENKUlvE18_cvPFvvEEv>:
  item3Button.onPressed = [](){
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  };
 8005a04:	4b02      	ldr	r3, [pc, #8]	; (8005a10 <_ZZ7setupUIvENKUlvE18_cvPFvvEEv+0x14>)
 8005a06:	4618      	mov	r0, r3
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr
 8005a10:	080059f1 	.word	0x080059f1

08005a14 <_ZZ7setupUIvENKUlvE19_clEv>:
  item4Button.onPressed = [](){
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
    setGcodeSource(HKUST);
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	f7ff fa91 	bl	8004f44 <_Z14setGcodeSource12GCODE_SOURCE>
    operationScreen.setActive();
 8005a22:	4803      	ldr	r0, [pc, #12]	; (8005a30 <_ZZ7setupUIvENKUlvE19_clEv+0x1c>)
 8005a24:	f7fd fb2a 	bl	800307c <_ZN6Screen9setActiveEv>
  };
 8005a28:	bf00      	nop
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	2000d778 	.word	0x2000d778

08005a34 <_ZZ7setupUIvENUlvE19_4_FUNEv>:
  item4Button.onPressed = [](){
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  };
 8005a38:	2000      	movs	r0, #0
 8005a3a:	f7ff ffeb 	bl	8005a14 <_ZZ7setupUIvENKUlvE19_clEv>
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <_ZZ7setupUIvENKUlvE19_cvPFvvEEv>:
  item4Button.onPressed = [](){
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  };
 8005a48:	4b02      	ldr	r3, [pc, #8]	; (8005a54 <_ZZ7setupUIvENKUlvE19_cvPFvvEEv+0x14>)
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr
 8005a54:	08005a35 	.word	0x08005a35

08005a58 <_ZZ7setupUIvENKUlvE20_clEv>:
  itemExternalButton.onPressed = [](){
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
    setGcodeSource(EXTERNAL);
 8005a60:	2004      	movs	r0, #4
 8005a62:	f7ff fa6f 	bl	8004f44 <_Z14setGcodeSource12GCODE_SOURCE>
    operationScreen.setActive();
 8005a66:	4803      	ldr	r0, [pc, #12]	; (8005a74 <_ZZ7setupUIvENKUlvE20_clEv+0x1c>)
 8005a68:	f7fd fb08 	bl	800307c <_ZN6Screen9setActiveEv>
  };
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	2000d778 	.word	0x2000d778

08005a78 <_ZZ7setupUIvENUlvE20_4_FUNEv>:
  itemExternalButton.onPressed = [](){
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
  };
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	f7ff ffeb 	bl	8005a58 <_ZZ7setupUIvENKUlvE20_clEv>
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <_ZZ7setupUIvENKUlvE20_cvPFvvEEv>:
  itemExternalButton.onPressed = [](){
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  };
 8005a8c:	4b02      	ldr	r3, [pc, #8]	; (8005a98 <_ZZ7setupUIvENKUlvE20_cvPFvvEEv+0x14>)
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr
 8005a98:	08005a79 	.word	0x08005a79

08005a9c <_Z7setupUIv>:
void setupUI(){
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b096      	sub	sp, #88	; 0x58
 8005aa0:	af00      	add	r7, sp, #0
  };
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff fadf 	bl	8005068 <_ZZ7setupUIvENKUlvE_cvPFvvEEv>
 8005aaa:	4603      	mov	r3, r0
  CWButton.onPressed = [](){
 8005aac:	4a5b      	ldr	r2, [pc, #364]	; (8005c1c <_Z7setupUIv+0x180>)
 8005aae:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005ab0:	1d3b      	adds	r3, r7, #4
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7ff fafa 	bl	80050ac <_ZZ7setupUIvENKUlvE0_cvPFvvEEv>
 8005ab8:	4603      	mov	r3, r0
  CWButton.onReleased = []()
 8005aba:	4a58      	ldr	r2, [pc, #352]	; (8005c1c <_Z7setupUIv+0x180>)
 8005abc:	6313      	str	r3, [r2, #48]	; 0x30
  };
 8005abe:	f107 0308 	add.w	r3, r7, #8
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff fb1a 	bl	80050fc <_ZZ7setupUIvENKUlvE1_cvPFvvEEv>
 8005ac8:	4603      	mov	r3, r0
  CCWButton.onPressed = []()
 8005aca:	4a55      	ldr	r2, [pc, #340]	; (8005c20 <_Z7setupUIv+0x184>)
 8005acc:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005ace:	f107 030c 	add.w	r3, r7, #12
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff fb34 	bl	8005140 <_ZZ7setupUIvENKUlvE2_cvPFvvEEv>
 8005ad8:	4603      	mov	r3, r0
  CCWButton.onReleased = []()
 8005ada:	4a51      	ldr	r2, [pc, #324]	; (8005c20 <_Z7setupUIv+0x184>)
 8005adc:	6313      	str	r3, [r2, #48]	; 0x30
  };
 8005ade:	f107 0310 	add.w	r3, r7, #16
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fb66 	bl	80051b4 <_ZZ7setupUIvENKUlvE3_cvPFvvEEv>
 8005ae8:	4603      	mov	r3, r0
  switchButton.onPressed = []()
 8005aea:	4a4e      	ldr	r2, [pc, #312]	; (8005c24 <_Z7setupUIv+0x188>)
 8005aec:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005aee:	f107 0314 	add.w	r3, r7, #20
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fbd8 	bl	80052a8 <_ZZ7setupUIvENKUlvE4_cvPFvvEEv>
 8005af8:	4603      	mov	r3, r0
  startButton.onPressed = [](){
 8005afa:	4a4b      	ldr	r2, [pc, #300]	; (8005c28 <_Z7setupUIv+0x18c>)
 8005afc:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005afe:	f107 0318 	add.w	r3, r7, #24
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff fc46 	bl	8005394 <_ZZ7setupUIvENKUlvE5_cvPFvvEEv>
 8005b08:	4603      	mov	r3, r0
  resetButton.onPressed = [](){
 8005b0a:	4a48      	ldr	r2, [pc, #288]	; (8005c2c <_Z7setupUIv+0x190>)
 8005b0c:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005b0e:	f107 031c 	add.w	r3, r7, #28
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff fcc6 	bl	80054a4 <_ZZ7setupUIvENKUlvE6_cvPFvvEEv>
 8005b18:	4603      	mov	r3, r0
  testJoystick.whilePressing = [](){
 8005b1a:	4a45      	ldr	r2, [pc, #276]	; (8005c30 <_Z7setupUIv+0x194>)
 8005b1c:	6253      	str	r3, [r2, #36]	; 0x24
  };
 8005b1e:	f107 0320 	add.w	r3, r7, #32
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff fcfe 	bl	8005524 <_ZZ7setupUIvENKUlvE7_cvPFvvEEv>
 8005b28:	4603      	mov	r3, r0
  zJoystick.whilePressing = [](){
 8005b2a:	4a42      	ldr	r2, [pc, #264]	; (8005c34 <_Z7setupUIv+0x198>)
 8005b2c:	6253      	str	r3, [r2, #36]	; 0x24
  zJoystick.deadzoneSideLength = 0;
 8005b2e:	4b41      	ldr	r3, [pc, #260]	; (8005c34 <_Z7setupUIv+0x198>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	615a      	str	r2, [r3, #20]
  };
 8005b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff fd1f 	bl	800557c <_ZZ7setupUIvENKUlvE8_cvPFvvEEv>
 8005b3e:	4603      	mov	r3, r0
  setZeroButton.onPressed = [](){
 8005b40:	4a3d      	ldr	r2, [pc, #244]	; (8005c38 <_Z7setupUIv+0x19c>)
 8005b42:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fd3f 	bl	80055cc <_ZZ7setupUIvENKUlvE9_cvPFvvEEv>
 8005b4e:	4603      	mov	r3, r0
  operationScreen.onUpdate = [](){
 8005b50:	4a3a      	ldr	r2, [pc, #232]	; (8005c3c <_Z7setupUIv+0x1a0>)
 8005b52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  };
 8005b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff fdb2 	bl	80056c4 <_ZZ7setupUIvENKUlvE10_cvPFvvEEv>
 8005b60:	4603      	mov	r3, r0
  previewJoystick.whilePressing = [](){
 8005b62:	4a37      	ldr	r2, [pc, #220]	; (8005c40 <_Z7setupUIv+0x1a4>)
 8005b64:	6253      	str	r3, [r2, #36]	; 0x24
  previewJoystick.performanceMode = true;
 8005b66:	4b36      	ldr	r3, [pc, #216]	; (8005c40 <_Z7setupUIv+0x1a4>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	761a      	strb	r2, [r3, #24]
  previewJoystick.deadzoneSideLength = 30;
 8005b6c:	4b34      	ldr	r3, [pc, #208]	; (8005c40 <_Z7setupUIv+0x1a4>)
 8005b6e:	221e      	movs	r2, #30
 8005b70:	615a      	str	r2, [r3, #20]
  };
 8005b72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fdc4 	bl	8005704 <_ZZ7setupUIvENKUlvE11_cvPFvvEEv>
 8005b7c:	4603      	mov	r3, r0
  selectGcodeButton.onPressed = [](){
 8005b7e:	4a31      	ldr	r2, [pc, #196]	; (8005c44 <_Z7setupUIv+0x1a8>)
 8005b80:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005b82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fdf2 	bl	8005770 <_ZZ7setupUIvENKUlvE12_cvPFvvEEv>
 8005b8c:	4603      	mov	r3, r0
  toggleAntiAliasButton.onPressed = [](){
 8005b8e:	4a2e      	ldr	r2, [pc, #184]	; (8005c48 <_Z7setupUIv+0x1ac>)
 8005b90:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005b92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fe20 	bl	80057dc <_ZZ7setupUIvENKUlvE13_cvPFvvEEv>
 8005b9c:	4603      	mov	r3, r0
  toggle3D2DButton.onPressed = [](){
 8005b9e:	4a2b      	ldr	r2, [pc, #172]	; (8005c4c <_Z7setupUIv+0x1b0>)
 8005ba0:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005ba2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff fe4e 	bl	8005848 <_ZZ7setupUIvENKUlvE14_cvPFvvEEv>
 8005bac:	4603      	mov	r3, r0
  resetPreviewButton.onPressed = [](){
 8005bae:	4a28      	ldr	r2, [pc, #160]	; (8005c50 <_Z7setupUIv+0x1b4>)
 8005bb0:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005bb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff feba 	bl	8005930 <_ZZ7setupUIvENKUlvE15_cvPFvvEEv>
 8005bbc:	4603      	mov	r3, r0
  autoAlignButton.onPressed = [](){
 8005bbe:	4a25      	ldr	r2, [pc, #148]	; (8005c54 <_Z7setupUIv+0x1b8>)
 8005bc0:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005bc2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff fed4 	bl	8005974 <_ZZ7setupUIvENKUlvE16_cvPFvvEEv>
 8005bcc:	4603      	mov	r3, r0
  item1Button.onPressed = [](){
 8005bce:	4a22      	ldr	r2, [pc, #136]	; (8005c58 <_Z7setupUIv+0x1bc>)
 8005bd0:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005bd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff feee 	bl	80059b8 <_ZZ7setupUIvENKUlvE17_cvPFvvEEv>
 8005bdc:	4603      	mov	r3, r0
  item2Button.onPressed = [](){
 8005bde:	4a1f      	ldr	r2, [pc, #124]	; (8005c5c <_Z7setupUIv+0x1c0>)
 8005be0:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005be2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff ff08 	bl	80059fc <_ZZ7setupUIvENKUlvE18_cvPFvvEEv>
 8005bec:	4603      	mov	r3, r0
  item3Button.onPressed = [](){
 8005bee:	4a1c      	ldr	r2, [pc, #112]	; (8005c60 <_Z7setupUIv+0x1c4>)
 8005bf0:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005bf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff ff22 	bl	8005a40 <_ZZ7setupUIvENKUlvE19_cvPFvvEEv>
 8005bfc:	4603      	mov	r3, r0
  item4Button.onPressed = [](){
 8005bfe:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <_Z7setupUIv+0x1c8>)
 8005c00:	6293      	str	r3, [r2, #40]	; 0x28
  };
 8005c02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff ff3c 	bl	8005a84 <_ZZ7setupUIvENKUlvE20_cvPFvvEEv>
 8005c0c:	4603      	mov	r3, r0
  itemExternalButton.onPressed = [](){
 8005c0e:	4a16      	ldr	r2, [pc, #88]	; (8005c68 <_Z7setupUIv+0x1cc>)
 8005c10:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005c12:	bf00      	nop
 8005c14:	3758      	adds	r7, #88	; 0x58
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	2000d648 	.word	0x2000d648
 8005c20:	2000d614 	.word	0x2000d614
 8005c24:	2000d5e0 	.word	0x2000d5e0
 8005c28:	2000d67c 	.word	0x2000d67c
 8005c2c:	2000d6b0 	.word	0x2000d6b0
 8005c30:	2000d718 	.word	0x2000d718
 8005c34:	2000d748 	.word	0x2000d748
 8005c38:	2000d6e4 	.word	0x2000d6e4
 8005c3c:	2000d778 	.word	0x2000d778
 8005c40:	2000d840 	.word	0x2000d840
 8005c44:	2000d870 	.word	0x2000d870
 8005c48:	2000d8a4 	.word	0x2000d8a4
 8005c4c:	2000d8d8 	.word	0x2000d8d8
 8005c50:	2000d90c 	.word	0x2000d90c
 8005c54:	2000d940 	.word	0x2000d940
 8005c58:	2000d9fc 	.word	0x2000d9fc
 8005c5c:	2000da30 	.word	0x2000da30
 8005c60:	2000da64 	.word	0x2000da64
 8005c64:	2000da98 	.word	0x2000da98
 8005c68:	2000dacc 	.word	0x2000dacc

08005c6c <myfunc>:

void myfunc()
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b094      	sub	sp, #80	; 0x50
 8005c70:	af00      	add	r7, sp, #0
  mainScreen.setActive();
 8005c72:	482e      	ldr	r0, [pc, #184]	; (8005d2c <myfunc+0xc0>)
 8005c74:	f7fd fa02 	bl	800307c <_ZN6Screen9setActiveEv>
  
  blankAll();
 8005c78:	f7fc fea2 	bl	80029c0 <_Z8blankAllv>
  HAL_Delay(500);
 8005c7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c80:	f003 fdb0 	bl	80097e4 <HAL_Delay>
  playStartAnimation();
 8005c84:	f7fb fd8a 	bl	800179c <_Z18playStartAnimationv>

  setupUI();
 8005c88:	f7ff ff08 	bl	8005a9c <_Z7setupUIv>

  // config: AAC set to max, 1042, max freq 2200
  xPulseMotor.setFrequency(1000);
 8005c8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c90:	4827      	ldr	r0, [pc, #156]	; (8005d30 <myfunc+0xc4>)
 8005c92:	f7fc f9c5 	bl	8002020 <_ZN10PulseMotor12setFrequencyEt>
  yPulseMotor.setFrequency(1000);
 8005c96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c9a:	4826      	ldr	r0, [pc, #152]	; (8005d34 <myfunc+0xc8>)
 8005c9c:	f7fc f9c0 	bl	8002020 <_ZN10PulseMotor12setFrequencyEt>
  zPulseMotor.setFrequency(1000);
 8005ca0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ca4:	4824      	ldr	r0, [pc, #144]	; (8005d38 <myfunc+0xcc>)
 8005ca6:	f7fc f9bb 	bl	8002020 <_ZN10PulseMotor12setFrequencyEt>
  printTargetMotor();
 8005caa:	f7ff f881 	bl	8004db0 <_Z16printTargetMotorv>
  //   xPulseMotor.step_inf(1,15000);
    
  // };

  strType_XPT2046_Coordinate touch;
  printToLCD("Hello World 1", 1);
 8005cae:	f107 0308 	add.w	r3, r7, #8
 8005cb2:	4922      	ldr	r1, [pc, #136]	; (8005d3c <myfunc+0xd0>)
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fc f95f 	bl	8001f78 <_ZN6StringC1EPKc>
 8005cba:	f107 0308 	add.w	r3, r7, #8
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f003 fa69 	bl	8009198 <_Z10printToLCDRK6Stringt>
  
  blankAll();
 8005cc6:	f7fc fe7b 	bl	80029c0 <_Z8blankAllv>
  while (1)
  {
    int startTick = HAL_GetTick();
 8005cca:	f003 fd81 	bl	80097d0 <HAL_GetTick>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    switch (lightStatus){
 8005cd2:	4b1b      	ldr	r3, [pc, #108]	; (8005d40 <myfunc+0xd4>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d123      	bne.n	8005d22 <myfunc+0xb6>
      case OPERATING:
        if ( isMotorStuck_X()){
 8005cda:	f7ff f8e9 	bl	8004eb0 <_Z14isMotorStuck_Xv>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d006      	beq.n	8005cf2 <myfunc+0x86>
          xPulseMotor.emergencyStop();
 8005ce4:	4812      	ldr	r0, [pc, #72]	; (8005d30 <myfunc+0xc4>)
 8005ce6:	f7fd f96b 	bl	8002fc0 <_ZN10PulseMotor13emergencyStopEv>
          lightStatus = FATAL;
 8005cea:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <myfunc+0xd4>)
 8005cec:	2203      	movs	r2, #3
 8005cee:	701a      	strb	r2, [r3, #0]
          lightStatus = FATAL;
        }else if ( isMotorStuck_Z()){
          zPulseMotor.emergencyStop();
          lightStatus = FATAL;
        }
        break;
 8005cf0:	e016      	b.n	8005d20 <myfunc+0xb4>
        }else if ( isMotorStuck_Y()){
 8005cf2:	f7ff f8ef 	bl	8004ed4 <_Z14isMotorStuck_Yv>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d006      	beq.n	8005d0a <myfunc+0x9e>
          yPulseMotor.emergencyStop();
 8005cfc:	480d      	ldr	r0, [pc, #52]	; (8005d34 <myfunc+0xc8>)
 8005cfe:	f7fd f95f 	bl	8002fc0 <_ZN10PulseMotor13emergencyStopEv>
          lightStatus = FATAL;
 8005d02:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <myfunc+0xd4>)
 8005d04:	2203      	movs	r2, #3
 8005d06:	701a      	strb	r2, [r3, #0]
        break;
 8005d08:	e00a      	b.n	8005d20 <myfunc+0xb4>
        }else if ( isMotorStuck_Z()){
 8005d0a:	f7ff f8f5 	bl	8004ef8 <_Z14isMotorStuck_Zv>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <myfunc+0xb4>
          zPulseMotor.emergencyStop();
 8005d14:	4808      	ldr	r0, [pc, #32]	; (8005d38 <myfunc+0xcc>)
 8005d16:	f7fd f953 	bl	8002fc0 <_ZN10PulseMotor13emergencyStopEv>
          lightStatus = FATAL;
 8005d1a:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <myfunc+0xd4>)
 8005d1c:	2203      	movs	r2, #3
 8005d1e:	701a      	strb	r2, [r3, #0]
        break;
 8005d20:	bf00      	nop
    }
    updateLightEffect();
 8005d22:	f7fc f85b 	bl	8001ddc <_Z17updateLightEffectv>
    // }
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
    // HAL_Delay(500);
    

    UIElement::updateAllElements();
 8005d26:	f7fb fc29 	bl	800157c <_ZN9UIElement17updateAllElementsEv>
    // debugLog(String(HAL_GetTick() - startTick), 20);
  }
 8005d2a:	e7ce      	b.n	8005cca <myfunc+0x5e>
 8005d2c:	2000d558 	.word	0x2000d558
 8005d30:	20000190 	.word	0x20000190
 8005d34:	200001c4 	.word	0x200001c4
 8005d38:	200001f8 	.word	0x200001f8
 8005d3c:	0800d58c 	.word	0x0800d58c
 8005d40:	20000018 	.word	0x20000018

08005d44 <_Z41__static_initialization_and_destruction_0ii>:
}
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af06      	add	r7, sp, #24
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	f040 81bb 	bne.w	80060cc <_Z41__static_initialization_and_destruction_0ii+0x388>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	f040 81b5 	bne.w	80060cc <_Z41__static_initialization_and_destruction_0ii+0x388>
Screen mainScreen;
 8005d62:	2100      	movs	r1, #0
 8005d64:	48b0      	ldr	r0, [pc, #704]	; (8006028 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8005d66:	f7fd f963 	bl	8003030 <_ZN6ScreenC1EPFvvE>
Button switchButton(&mainScreen, 170, 50, "Motor?", 40, 40);
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9304      	str	r3, [sp, #16]
 8005d6e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005d72:	9303      	str	r3, [sp, #12]
 8005d74:	2328      	movs	r3, #40	; 0x28
 8005d76:	9302      	str	r3, [sp, #8]
 8005d78:	2328      	movs	r3, #40	; 0x28
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	4bab      	ldr	r3, [pc, #684]	; (800602c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	2332      	movs	r3, #50	; 0x32
 8005d82:	22aa      	movs	r2, #170	; 0xaa
 8005d84:	49a8      	ldr	r1, [pc, #672]	; (8006028 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8005d86:	48aa      	ldr	r0, [pc, #680]	; (8006030 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8005d88:	f7fd fa08 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button CCWButton(&mainScreen, 10, 50, "YCCW", 40, 40);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9304      	str	r3, [sp, #16]
 8005d90:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005d94:	9303      	str	r3, [sp, #12]
 8005d96:	2328      	movs	r3, #40	; 0x28
 8005d98:	9302      	str	r3, [sp, #8]
 8005d9a:	2328      	movs	r3, #40	; 0x28
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	4ba5      	ldr	r3, [pc, #660]	; (8006034 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	2332      	movs	r3, #50	; 0x32
 8005da4:	220a      	movs	r2, #10
 8005da6:	49a0      	ldr	r1, [pc, #640]	; (8006028 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8005da8:	48a3      	ldr	r0, [pc, #652]	; (8006038 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8005daa:	f7fd f9f7 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button CWButton(&mainScreen, 65, 50, "YCW", 40, 40);
 8005dae:	2300      	movs	r3, #0
 8005db0:	9304      	str	r3, [sp, #16]
 8005db2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005db6:	9303      	str	r3, [sp, #12]
 8005db8:	2328      	movs	r3, #40	; 0x28
 8005dba:	9302      	str	r3, [sp, #8]
 8005dbc:	2328      	movs	r3, #40	; 0x28
 8005dbe:	9301      	str	r3, [sp, #4]
 8005dc0:	4b9e      	ldr	r3, [pc, #632]	; (800603c <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	2332      	movs	r3, #50	; 0x32
 8005dc6:	2241      	movs	r2, #65	; 0x41
 8005dc8:	4997      	ldr	r1, [pc, #604]	; (8006028 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8005dca:	489d      	ldr	r0, [pc, #628]	; (8006040 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8005dcc:	f7fd f9e6 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button startButton(&mainScreen, 120, 50, "START", 40, 40);
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	9304      	str	r3, [sp, #16]
 8005dd4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005dd8:	9303      	str	r3, [sp, #12]
 8005dda:	2328      	movs	r3, #40	; 0x28
 8005ddc:	9302      	str	r3, [sp, #8]
 8005dde:	2328      	movs	r3, #40	; 0x28
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	4b98      	ldr	r3, [pc, #608]	; (8006044 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	2332      	movs	r3, #50	; 0x32
 8005de8:	2278      	movs	r2, #120	; 0x78
 8005dea:	498f      	ldr	r1, [pc, #572]	; (8006028 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8005dec:	4896      	ldr	r0, [pc, #600]	; (8006048 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8005dee:	f7fd f9d5 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button resetButton(&mainScreen, 200, 270, "REST", 40, 40);
 8005df2:	2300      	movs	r3, #0
 8005df4:	9304      	str	r3, [sp, #16]
 8005df6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005dfa:	9303      	str	r3, [sp, #12]
 8005dfc:	2328      	movs	r3, #40	; 0x28
 8005dfe:	9302      	str	r3, [sp, #8]
 8005e00:	2328      	movs	r3, #40	; 0x28
 8005e02:	9301      	str	r3, [sp, #4]
 8005e04:	4b91      	ldr	r3, [pc, #580]	; (800604c <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8005e0c:	22c8      	movs	r2, #200	; 0xc8
 8005e0e:	4986      	ldr	r1, [pc, #536]	; (8006028 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8005e10:	488f      	ldr	r0, [pc, #572]	; (8006050 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8005e12:	f7fd f9c3 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button setZeroButton(&mainScreen, 120, 10, "SET_0", 40, 40);
 8005e16:	2300      	movs	r3, #0
 8005e18:	9304      	str	r3, [sp, #16]
 8005e1a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005e1e:	9303      	str	r3, [sp, #12]
 8005e20:	2328      	movs	r3, #40	; 0x28
 8005e22:	9302      	str	r3, [sp, #8]
 8005e24:	2328      	movs	r3, #40	; 0x28
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	4b8a      	ldr	r3, [pc, #552]	; (8006054 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	230a      	movs	r3, #10
 8005e2e:	2278      	movs	r2, #120	; 0x78
 8005e30:	497d      	ldr	r1, [pc, #500]	; (8006028 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8005e32:	4889      	ldr	r0, [pc, #548]	; (8006058 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8005e34:	f7fd f9b2 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Joystick testJoystick(&mainScreen, 0, 120);
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9303      	str	r3, [sp, #12]
 8005e3c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005e40:	9302      	str	r3, [sp, #8]
 8005e42:	2396      	movs	r3, #150	; 0x96
 8005e44:	9301      	str	r3, [sp, #4]
 8005e46:	2396      	movs	r3, #150	; 0x96
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	2378      	movs	r3, #120	; 0x78
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	4976      	ldr	r1, [pc, #472]	; (8006028 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8005e50:	4882      	ldr	r0, [pc, #520]	; (800605c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8005e52:	f7fd fc11 	bl	8003678 <_ZN8JoystickC1EP6ScreentttttPFvvE>
Joystick zJoystick(&mainScreen, 180, 100, 20, 160);
 8005e56:	2300      	movs	r3, #0
 8005e58:	9303      	str	r3, [sp, #12]
 8005e5a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005e5e:	9302      	str	r3, [sp, #8]
 8005e60:	23a0      	movs	r3, #160	; 0xa0
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	2314      	movs	r3, #20
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	2364      	movs	r3, #100	; 0x64
 8005e6a:	22b4      	movs	r2, #180	; 0xb4
 8005e6c:	496e      	ldr	r1, [pc, #440]	; (8006028 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8005e6e:	487c      	ldr	r0, [pc, #496]	; (8006060 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8005e70:	f7fd fc02 	bl	8003678 <_ZN8JoystickC1EP6ScreentttttPFvvE>
Screen operationScreen;
 8005e74:	2100      	movs	r1, #0
 8005e76:	487b      	ldr	r0, [pc, #492]	; (8006064 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8005e78:	f7fd f8da 	bl	8003030 <_ZN6ScreenC1EPFvvE>
PreviewDisplay previewDisplay(&operationScreen,0, 0);
 8005e7c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	2300      	movs	r3, #0
 8005e84:	2200      	movs	r2, #0
 8005e86:	4977      	ldr	r1, [pc, #476]	; (8006064 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8005e88:	4877      	ldr	r0, [pc, #476]	; (8006068 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8005e8a:	f7fe fc85 	bl	8004798 <_ZN14PreviewDisplayC1EP6Screenttt>
Slider scaleSlider(&operationScreen, 180, 20, 100);
 8005e8e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005e92:	9303      	str	r3, [sp, #12]
 8005e94:	2382      	movs	r3, #130	; 0x82
 8005e96:	9302      	str	r3, [sp, #8]
 8005e98:	230a      	movs	r3, #10
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	2364      	movs	r3, #100	; 0x64
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	2314      	movs	r3, #20
 8005ea2:	22b4      	movs	r2, #180	; 0xb4
 8005ea4:	496f      	ldr	r1, [pc, #444]	; (8006064 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8005ea6:	4871      	ldr	r0, [pc, #452]	; (800606c <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8005ea8:	f7fd fa68 	bl	800337c <_ZN6SliderC1EP6Screentttttt>
Joystick previewJoystick(&operationScreen, 0 , 155, 150, 120);
 8005eac:	2300      	movs	r3, #0
 8005eae:	9303      	str	r3, [sp, #12]
 8005eb0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005eb4:	9302      	str	r3, [sp, #8]
 8005eb6:	2378      	movs	r3, #120	; 0x78
 8005eb8:	9301      	str	r3, [sp, #4]
 8005eba:	2396      	movs	r3, #150	; 0x96
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	239b      	movs	r3, #155	; 0x9b
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	4968      	ldr	r1, [pc, #416]	; (8006064 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8005ec4:	486a      	ldr	r0, [pc, #424]	; (8006070 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8005ec6:	f7fd fbd7 	bl	8003678 <_ZN8JoystickC1EP6ScreentttttPFvvE>
Button selectGcodeButton(&operationScreen, 170, 170, "GCODE", 50, 40);
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005ed2:	9303      	str	r3, [sp, #12]
 8005ed4:	2328      	movs	r3, #40	; 0x28
 8005ed6:	9302      	str	r3, [sp, #8]
 8005ed8:	2332      	movs	r3, #50	; 0x32
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	4b65      	ldr	r3, [pc, #404]	; (8006074 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	23aa      	movs	r3, #170	; 0xaa
 8005ee2:	22aa      	movs	r2, #170	; 0xaa
 8005ee4:	495f      	ldr	r1, [pc, #380]	; (8006064 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8005ee6:	4864      	ldr	r0, [pc, #400]	; (8006078 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8005ee8:	f7fd f958 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button toggleAntiAliasButton(&operationScreen, 170, 220, "AA:ON", 50, 40);
 8005eec:	2300      	movs	r3, #0
 8005eee:	9304      	str	r3, [sp, #16]
 8005ef0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005ef4:	9303      	str	r3, [sp, #12]
 8005ef6:	2328      	movs	r3, #40	; 0x28
 8005ef8:	9302      	str	r3, [sp, #8]
 8005efa:	2332      	movs	r3, #50	; 0x32
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	4b5f      	ldr	r3, [pc, #380]	; (800607c <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	23dc      	movs	r3, #220	; 0xdc
 8005f04:	22aa      	movs	r2, #170	; 0xaa
 8005f06:	4957      	ldr	r1, [pc, #348]	; (8006064 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8005f08:	485d      	ldr	r0, [pc, #372]	; (8006080 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8005f0a:	f7fd f947 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button toggle3D2DButton(&operationScreen, 170, 270, " 2D", 40, 40);
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005f16:	9303      	str	r3, [sp, #12]
 8005f18:	2328      	movs	r3, #40	; 0x28
 8005f1a:	9302      	str	r3, [sp, #8]
 8005f1c:	2328      	movs	r3, #40	; 0x28
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	4b58      	ldr	r3, [pc, #352]	; (8006084 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8005f28:	22aa      	movs	r2, #170	; 0xaa
 8005f2a:	494e      	ldr	r1, [pc, #312]	; (8006064 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8005f2c:	4856      	ldr	r0, [pc, #344]	; (8006088 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8005f2e:	f7fd f935 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button resetPreviewButton(&operationScreen, 110, 285, "RESET", 30, 50);
 8005f32:	2300      	movs	r3, #0
 8005f34:	9304      	str	r3, [sp, #16]
 8005f36:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005f3a:	9303      	str	r3, [sp, #12]
 8005f3c:	2332      	movs	r3, #50	; 0x32
 8005f3e:	9302      	str	r3, [sp, #8]
 8005f40:	231e      	movs	r3, #30
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	4b51      	ldr	r3, [pc, #324]	; (800608c <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	f240 131d 	movw	r3, #285	; 0x11d
 8005f4c:	226e      	movs	r2, #110	; 0x6e
 8005f4e:	4945      	ldr	r1, [pc, #276]	; (8006064 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8005f50:	484f      	ldr	r0, [pc, #316]	; (8006090 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8005f52:	f7fd f923 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button autoAlignButton(&operationScreen, 60, 285, "AUTO", 30, 40);
 8005f56:	2300      	movs	r3, #0
 8005f58:	9304      	str	r3, [sp, #16]
 8005f5a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005f5e:	9303      	str	r3, [sp, #12]
 8005f60:	2328      	movs	r3, #40	; 0x28
 8005f62:	9302      	str	r3, [sp, #8]
 8005f64:	231e      	movs	r3, #30
 8005f66:	9301      	str	r3, [sp, #4]
 8005f68:	4b4a      	ldr	r3, [pc, #296]	; (8006094 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	f240 131d 	movw	r3, #285	; 0x11d
 8005f70:	223c      	movs	r2, #60	; 0x3c
 8005f72:	493c      	ldr	r1, [pc, #240]	; (8006064 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8005f74:	4848      	ldr	r0, [pc, #288]	; (8006098 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8005f76:	f7fd f911 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Screen gcodeSelectScreen;
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4847      	ldr	r0, [pc, #284]	; (800609c <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8005f7e:	f7fd f857 	bl	8003030 <_ZN6ScreenC1EPFvvE>
Button item1Button(&gcodeSelectScreen, 10, 40, "ENTRPRZ", 70, 40);
 8005f82:	2300      	movs	r3, #0
 8005f84:	9304      	str	r3, [sp, #16]
 8005f86:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005f8a:	9303      	str	r3, [sp, #12]
 8005f8c:	2328      	movs	r3, #40	; 0x28
 8005f8e:	9302      	str	r3, [sp, #8]
 8005f90:	2346      	movs	r3, #70	; 0x46
 8005f92:	9301      	str	r3, [sp, #4]
 8005f94:	4b42      	ldr	r3, [pc, #264]	; (80060a0 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	2328      	movs	r3, #40	; 0x28
 8005f9a:	220a      	movs	r2, #10
 8005f9c:	493f      	ldr	r1, [pc, #252]	; (800609c <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8005f9e:	4841      	ldr	r0, [pc, #260]	; (80060a4 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8005fa0:	f7fd f8fc 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button item2Button(&gcodeSelectScreen, 90, 40, "GENSHIN", 70, 40);
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	9304      	str	r3, [sp, #16]
 8005fa8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005fac:	9303      	str	r3, [sp, #12]
 8005fae:	2328      	movs	r3, #40	; 0x28
 8005fb0:	9302      	str	r3, [sp, #8]
 8005fb2:	2346      	movs	r3, #70	; 0x46
 8005fb4:	9301      	str	r3, [sp, #4]
 8005fb6:	4b3c      	ldr	r3, [pc, #240]	; (80060a8 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	2328      	movs	r3, #40	; 0x28
 8005fbc:	225a      	movs	r2, #90	; 0x5a
 8005fbe:	4937      	ldr	r1, [pc, #220]	; (800609c <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8005fc0:	483a      	ldr	r0, [pc, #232]	; (80060ac <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8005fc2:	f7fd f8eb 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button item3Button(&gcodeSelectScreen, 170, 40, "PYRAMID", 70, 40);
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	9304      	str	r3, [sp, #16]
 8005fca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005fce:	9303      	str	r3, [sp, #12]
 8005fd0:	2328      	movs	r3, #40	; 0x28
 8005fd2:	9302      	str	r3, [sp, #8]
 8005fd4:	2346      	movs	r3, #70	; 0x46
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	4b35      	ldr	r3, [pc, #212]	; (80060b0 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	2328      	movs	r3, #40	; 0x28
 8005fde:	22aa      	movs	r2, #170	; 0xaa
 8005fe0:	492e      	ldr	r1, [pc, #184]	; (800609c <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8005fe2:	4834      	ldr	r0, [pc, #208]	; (80060b4 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8005fe4:	f7fd f8da 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button item4Button(&gcodeSelectScreen, 10, 100, "HKUST", 60, 40);
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9304      	str	r3, [sp, #16]
 8005fec:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005ff0:	9303      	str	r3, [sp, #12]
 8005ff2:	2328      	movs	r3, #40	; 0x28
 8005ff4:	9302      	str	r3, [sp, #8]
 8005ff6:	233c      	movs	r3, #60	; 0x3c
 8005ff8:	9301      	str	r3, [sp, #4]
 8005ffa:	4b2f      	ldr	r3, [pc, #188]	; (80060b8 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	2364      	movs	r3, #100	; 0x64
 8006000:	220a      	movs	r2, #10
 8006002:	4926      	ldr	r1, [pc, #152]	; (800609c <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8006004:	482d      	ldr	r0, [pc, #180]	; (80060bc <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8006006:	f7fd f8c9 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
Button itemExternalButton(&gcodeSelectScreen, 100, 100, "EXTRN", 70, 40);
 800600a:	2300      	movs	r3, #0
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006012:	9303      	str	r3, [sp, #12]
 8006014:	2328      	movs	r3, #40	; 0x28
 8006016:	9302      	str	r3, [sp, #8]
 8006018:	2346      	movs	r3, #70	; 0x46
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	4b28      	ldr	r3, [pc, #160]	; (80060c0 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	2364      	movs	r3, #100	; 0x64
 8006022:	2264      	movs	r2, #100	; 0x64
 8006024:	e04e      	b.n	80060c4 <_Z41__static_initialization_and_destruction_0ii+0x380>
 8006026:	bf00      	nop
 8006028:	2000d558 	.word	0x2000d558
 800602c:	0800d59c 	.word	0x0800d59c
 8006030:	2000d5e0 	.word	0x2000d5e0
 8006034:	0800d5a4 	.word	0x0800d5a4
 8006038:	2000d614 	.word	0x2000d614
 800603c:	0800d5ac 	.word	0x0800d5ac
 8006040:	2000d648 	.word	0x2000d648
 8006044:	0800d5b0 	.word	0x0800d5b0
 8006048:	2000d67c 	.word	0x2000d67c
 800604c:	0800d5b8 	.word	0x0800d5b8
 8006050:	2000d6b0 	.word	0x2000d6b0
 8006054:	0800d5c0 	.word	0x0800d5c0
 8006058:	2000d6e4 	.word	0x2000d6e4
 800605c:	2000d718 	.word	0x2000d718
 8006060:	2000d748 	.word	0x2000d748
 8006064:	2000d778 	.word	0x2000d778
 8006068:	2000d800 	.word	0x2000d800
 800606c:	2000d820 	.word	0x2000d820
 8006070:	2000d840 	.word	0x2000d840
 8006074:	0800d5c8 	.word	0x0800d5c8
 8006078:	2000d870 	.word	0x2000d870
 800607c:	0800d574 	.word	0x0800d574
 8006080:	2000d8a4 	.word	0x2000d8a4
 8006084:	0800d588 	.word	0x0800d588
 8006088:	2000d8d8 	.word	0x2000d8d8
 800608c:	0800d5d0 	.word	0x0800d5d0
 8006090:	2000d90c 	.word	0x2000d90c
 8006094:	0800d5d8 	.word	0x0800d5d8
 8006098:	2000d940 	.word	0x2000d940
 800609c:	2000d974 	.word	0x2000d974
 80060a0:	0800d5e0 	.word	0x0800d5e0
 80060a4:	2000d9fc 	.word	0x2000d9fc
 80060a8:	0800d5e8 	.word	0x0800d5e8
 80060ac:	2000da30 	.word	0x2000da30
 80060b0:	0800d5f0 	.word	0x0800d5f0
 80060b4:	2000da64 	.word	0x2000da64
 80060b8:	0800d5f8 	.word	0x0800d5f8
 80060bc:	2000da98 	.word	0x2000da98
 80060c0:	0800d600 	.word	0x0800d600
 80060c4:	4903      	ldr	r1, [pc, #12]	; (80060d4 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80060c6:	4804      	ldr	r0, [pc, #16]	; (80060d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80060c8:	f7fd f868 	bl	800319c <_ZN6ButtonC1EP6ScreenttPctttt>
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	2000d974 	.word	0x2000d974
 80060d8:	2000dacc 	.word	0x2000dacc

080060dc <_GLOBAL__sub_I__Z7fastsini>:
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
 80060e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060e4:	2001      	movs	r0, #1
 80060e6:	f7ff fe2d 	bl	8005d44 <_Z41__static_initialization_and_destruction_0ii>
 80060ea:	bd80      	pop	{r7, pc}

080060ec <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	e002      	b.n	80060fc <Delay+0x10>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3b01      	subs	r3, #1
 80060fa:	607b      	str	r3, [r7, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1f9      	bne.n	80060f6 <Delay+0xa>
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr

0800610e <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 800610e:	b580      	push	{r7, lr}
 8006110:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 8006112:	2001      	movs	r0, #1
 8006114:	f000 f826 	bl	8006164 <LCD_BackLed_Control>
	LCD_Rst();
 8006118:	f000 f80c 	bl	8006134 <LCD_Rst>
	LCD_REG_Config();
 800611c:	f000 f85c 	bl	80061d8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 8006120:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006124:	22f0      	movs	r2, #240	; 0xf0
 8006126:	2100      	movs	r1, #0
 8006128:	2000      	movs	r0, #0
 800612a:	f000 f9e7 	bl	80064fc <LCD_Clear>
}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8006138:	2200      	movs	r2, #0
 800613a:	2102      	movs	r1, #2
 800613c:	4807      	ldr	r0, [pc, #28]	; (800615c <LCD_Rst+0x28>)
 800613e:	f004 fc92 	bl	800aa66 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8006142:	4807      	ldr	r0, [pc, #28]	; (8006160 <LCD_Rst+0x2c>)
 8006144:	f7ff ffd2 	bl	80060ec <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8006148:	2201      	movs	r2, #1
 800614a:	2102      	movs	r1, #2
 800614c:	4803      	ldr	r0, [pc, #12]	; (800615c <LCD_Rst+0x28>)
 800614e:	f004 fc8a 	bl	800aa66 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8006152:	4803      	ldr	r0, [pc, #12]	; (8006160 <LCD_Rst+0x2c>)
 8006154:	f7ff ffca 	bl	80060ec <Delay>
}
 8006158:	bf00      	nop
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40011800 	.word	0x40011800
 8006160:	0002bffc 	.word	0x0002bffc

08006164 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d006      	beq.n	8006182 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8006174:	2200      	movs	r2, #0
 8006176:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800617a:	4807      	ldr	r0, [pc, #28]	; (8006198 <LCD_BackLed_Control+0x34>)
 800617c:	f004 fc73 	bl	800aa66 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8006180:	e005      	b.n	800618e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8006182:	2201      	movs	r2, #1
 8006184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006188:	4803      	ldr	r0, [pc, #12]	; (8006198 <LCD_BackLed_Control+0x34>)
 800618a:	f004 fc6c 	bl	800aa66 <HAL_GPIO_WritePin>
}
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40011400 	.word	0x40011400

0800619c <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80061a6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	8013      	strh	r3, [r2, #0]
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr

080061b8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80061c2:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <LCD_Write_Data+0x1c>)
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	8013      	strh	r3, [r2, #0]
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	60020000 	.word	0x60020000

080061d8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80061dc:	20cf      	movs	r0, #207	; 0xcf
 80061de:	f7ff ffdd 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80061e2:	2000      	movs	r0, #0
 80061e4:	f7ff ffe8 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80061e8:	2081      	movs	r0, #129	; 0x81
 80061ea:	f7ff ffe5 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80061ee:	2030      	movs	r0, #48	; 0x30
 80061f0:	f7ff ffe2 	bl	80061b8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80061f4:	20ed      	movs	r0, #237	; 0xed
 80061f6:	f7ff ffd1 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80061fa:	2064      	movs	r0, #100	; 0x64
 80061fc:	f7ff ffdc 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8006200:	2003      	movs	r0, #3
 8006202:	f7ff ffd9 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8006206:	2012      	movs	r0, #18
 8006208:	f7ff ffd6 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800620c:	2081      	movs	r0, #129	; 0x81
 800620e:	f7ff ffd3 	bl	80061b8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8006212:	20e8      	movs	r0, #232	; 0xe8
 8006214:	f7ff ffc2 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8006218:	2085      	movs	r0, #133	; 0x85
 800621a:	f7ff ffcd 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800621e:	2010      	movs	r0, #16
 8006220:	f7ff ffca 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8006224:	2078      	movs	r0, #120	; 0x78
 8006226:	f7ff ffc7 	bl	80061b8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800622a:	20cb      	movs	r0, #203	; 0xcb
 800622c:	f7ff ffb6 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8006230:	2039      	movs	r0, #57	; 0x39
 8006232:	f7ff ffc1 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8006236:	202c      	movs	r0, #44	; 0x2c
 8006238:	f7ff ffbe 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800623c:	2000      	movs	r0, #0
 800623e:	f7ff ffbb 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8006242:	2034      	movs	r0, #52	; 0x34
 8006244:	f7ff ffb8 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8006248:	2002      	movs	r0, #2
 800624a:	f7ff ffb5 	bl	80061b8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800624e:	20f7      	movs	r0, #247	; 0xf7
 8006250:	f7ff ffa4 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8006254:	2020      	movs	r0, #32
 8006256:	f7ff ffaf 	bl	80061b8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800625a:	20ea      	movs	r0, #234	; 0xea
 800625c:	f7ff ff9e 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8006260:	2000      	movs	r0, #0
 8006262:	f7ff ffa9 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8006266:	2000      	movs	r0, #0
 8006268:	f7ff ffa6 	bl	80061b8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 800626c:	20b1      	movs	r0, #177	; 0xb1
 800626e:	f7ff ff95 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8006272:	2000      	movs	r0, #0
 8006274:	f7ff ffa0 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8006278:	201b      	movs	r0, #27
 800627a:	f7ff ff9d 	bl	80061b8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800627e:	20b6      	movs	r0, #182	; 0xb6
 8006280:	f7ff ff8c 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8006284:	200a      	movs	r0, #10
 8006286:	f7ff ff97 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800628a:	20a2      	movs	r0, #162	; 0xa2
 800628c:	f7ff ff94 	bl	80061b8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8006290:	20c0      	movs	r0, #192	; 0xc0
 8006292:	f7ff ff83 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8006296:	2035      	movs	r0, #53	; 0x35
 8006298:	f7ff ff8e 	bl	80061b8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 800629c:	20c1      	movs	r0, #193	; 0xc1
 800629e:	f7ff ff7d 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80062a2:	2011      	movs	r0, #17
 80062a4:	f7ff ff88 	bl	80061b8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80062a8:	20c5      	movs	r0, #197	; 0xc5
 80062aa:	f7ff ff77 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80062ae:	2045      	movs	r0, #69	; 0x45
 80062b0:	f7ff ff82 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80062b4:	2045      	movs	r0, #69	; 0x45
 80062b6:	f7ff ff7f 	bl	80061b8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80062ba:	20c7      	movs	r0, #199	; 0xc7
 80062bc:	f7ff ff6e 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80062c0:	20a2      	movs	r0, #162	; 0xa2
 80062c2:	f7ff ff79 	bl	80061b8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80062c6:	20f2      	movs	r0, #242	; 0xf2
 80062c8:	f7ff ff68 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80062cc:	2000      	movs	r0, #0
 80062ce:	f7ff ff73 	bl	80061b8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80062d2:	2026      	movs	r0, #38	; 0x26
 80062d4:	f7ff ff62 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80062d8:	2001      	movs	r0, #1
 80062da:	f7ff ff6d 	bl	80061b8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80062de:	20e0      	movs	r0, #224	; 0xe0
 80062e0:	f7ff ff5c 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80062e4:	200f      	movs	r0, #15
 80062e6:	f7ff ff67 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80062ea:	2026      	movs	r0, #38	; 0x26
 80062ec:	f7ff ff64 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80062f0:	2024      	movs	r0, #36	; 0x24
 80062f2:	f7ff ff61 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80062f6:	200b      	movs	r0, #11
 80062f8:	f7ff ff5e 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80062fc:	200e      	movs	r0, #14
 80062fe:	f7ff ff5b 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8006302:	2009      	movs	r0, #9
 8006304:	f7ff ff58 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8006308:	2054      	movs	r0, #84	; 0x54
 800630a:	f7ff ff55 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800630e:	20a8      	movs	r0, #168	; 0xa8
 8006310:	f7ff ff52 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8006314:	2046      	movs	r0, #70	; 0x46
 8006316:	f7ff ff4f 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800631a:	200c      	movs	r0, #12
 800631c:	f7ff ff4c 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8006320:	2017      	movs	r0, #23
 8006322:	f7ff ff49 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8006326:	2009      	movs	r0, #9
 8006328:	f7ff ff46 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800632c:	200f      	movs	r0, #15
 800632e:	f7ff ff43 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8006332:	2007      	movs	r0, #7
 8006334:	f7ff ff40 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8006338:	2000      	movs	r0, #0
 800633a:	f7ff ff3d 	bl	80061b8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800633e:	20e1      	movs	r0, #225	; 0xe1
 8006340:	f7ff ff2c 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8006344:	2000      	movs	r0, #0
 8006346:	f7ff ff37 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800634a:	2019      	movs	r0, #25
 800634c:	f7ff ff34 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8006350:	201b      	movs	r0, #27
 8006352:	f7ff ff31 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8006356:	2004      	movs	r0, #4
 8006358:	f7ff ff2e 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800635c:	2010      	movs	r0, #16
 800635e:	f7ff ff2b 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8006362:	2007      	movs	r0, #7
 8006364:	f7ff ff28 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8006368:	202a      	movs	r0, #42	; 0x2a
 800636a:	f7ff ff25 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800636e:	2047      	movs	r0, #71	; 0x47
 8006370:	f7ff ff22 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8006374:	2039      	movs	r0, #57	; 0x39
 8006376:	f7ff ff1f 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800637a:	2003      	movs	r0, #3
 800637c:	f7ff ff1c 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8006380:	2006      	movs	r0, #6
 8006382:	f7ff ff19 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8006386:	2006      	movs	r0, #6
 8006388:	f7ff ff16 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 800638c:	2030      	movs	r0, #48	; 0x30
 800638e:	f7ff ff13 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8006392:	2038      	movs	r0, #56	; 0x38
 8006394:	f7ff ff10 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8006398:	200f      	movs	r0, #15
 800639a:	f7ff ff0d 	bl	80061b8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800639e:	2036      	movs	r0, #54	; 0x36
 80063a0:	f7ff fefc 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80063a4:	20c8      	movs	r0, #200	; 0xc8
 80063a6:	f7ff ff07 	bl	80061b8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80063aa:	202a      	movs	r0, #42	; 0x2a
 80063ac:	f7ff fef6 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80063b0:	2000      	movs	r0, #0
 80063b2:	f7ff ff01 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80063b6:	2000      	movs	r0, #0
 80063b8:	f7ff fefe 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80063bc:	2000      	movs	r0, #0
 80063be:	f7ff fefb 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80063c2:	20ef      	movs	r0, #239	; 0xef
 80063c4:	f7ff fef8 	bl	80061b8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80063c8:	202b      	movs	r0, #43	; 0x2b
 80063ca:	f7ff fee7 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80063ce:	2000      	movs	r0, #0
 80063d0:	f7ff fef2 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80063d4:	2000      	movs	r0, #0
 80063d6:	f7ff feef 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80063da:	2001      	movs	r0, #1
 80063dc:	f7ff feec 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80063e0:	203f      	movs	r0, #63	; 0x3f
 80063e2:	f7ff fee9 	bl	80061b8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80063e6:	203a      	movs	r0, #58	; 0x3a
 80063e8:	f7ff fed8 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80063ec:	2055      	movs	r0, #85	; 0x55
 80063ee:	f7ff fee3 	bl	80061b8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80063f2:	2011      	movs	r0, #17
 80063f4:	f7ff fed2 	bl	800619c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80063f8:	4803      	ldr	r0, [pc, #12]	; (8006408 <LCD_REG_Config+0x230>)
 80063fa:	f7ff fe77 	bl	80060ec <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80063fe:	2029      	movs	r0, #41	; 0x29
 8006400:	f7ff fecc 	bl	800619c <LCD_Write_Cmd>
	
}
 8006404:	bf00      	nop
 8006406:	bd80      	pop	{r7, pc}
 8006408:	0002bffc 	.word	0x0002bffc

0800640c <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800640c:	b590      	push	{r4, r7, lr}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	4604      	mov	r4, r0
 8006414:	4608      	mov	r0, r1
 8006416:	4611      	mov	r1, r2
 8006418:	461a      	mov	r2, r3
 800641a:	4623      	mov	r3, r4
 800641c:	80fb      	strh	r3, [r7, #6]
 800641e:	4603      	mov	r3, r0
 8006420:	80bb      	strh	r3, [r7, #4]
 8006422:	460b      	mov	r3, r1
 8006424:	807b      	strh	r3, [r7, #2]
 8006426:	4613      	mov	r3, r2
 8006428:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800642a:	202a      	movs	r0, #42	; 0x2a
 800642c:	f7ff feb6 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	0a1b      	lsrs	r3, r3, #8
 8006434:	b29b      	uxth	r3, r3
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff febe 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800643c:	88fb      	ldrh	r3, [r7, #6]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	b29b      	uxth	r3, r3
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff feb8 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8006448:	88fa      	ldrh	r2, [r7, #6]
 800644a:	887b      	ldrh	r3, [r7, #2]
 800644c:	4413      	add	r3, r2
 800644e:	3b01      	subs	r3, #1
 8006450:	121b      	asrs	r3, r3, #8
 8006452:	b29b      	uxth	r3, r3
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff feaf 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	887b      	ldrh	r3, [r7, #2]
 800645e:	4413      	add	r3, r2
 8006460:	b29b      	uxth	r3, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	b29b      	uxth	r3, r3
 8006466:	b2db      	uxtb	r3, r3
 8006468:	b29b      	uxth	r3, r3
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff fea4 	bl	80061b8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8006470:	202b      	movs	r0, #43	; 0x2b
 8006472:	f7ff fe93 	bl	800619c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8006476:	88bb      	ldrh	r3, [r7, #4]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	b29b      	uxth	r3, r3
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fe9b 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8006482:	88bb      	ldrh	r3, [r7, #4]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	b29b      	uxth	r3, r3
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff fe95 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800648e:	88ba      	ldrh	r2, [r7, #4]
 8006490:	883b      	ldrh	r3, [r7, #0]
 8006492:	4413      	add	r3, r2
 8006494:	3b01      	subs	r3, #1
 8006496:	121b      	asrs	r3, r3, #8
 8006498:	b29b      	uxth	r3, r3
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fe8c 	bl	80061b8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80064a0:	88ba      	ldrh	r2, [r7, #4]
 80064a2:	883b      	ldrh	r3, [r7, #0]
 80064a4:	4413      	add	r3, r2
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff fe81 	bl	80061b8 <LCD_Write_Data>
	
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd90      	pop	{r4, r7, pc}

080064be <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80064ce:	202c      	movs	r0, #44	; 0x2c
 80064d0:	f7ff fe64 	bl	800619c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	e006      	b.n	80064e8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80064da:	887b      	ldrh	r3, [r7, #2]
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff fe6b 	bl	80061b8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3301      	adds	r3, #1
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d3f4      	bcc.n	80064da <LCD_FillColor+0x1c>
		
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 80064fc:	b590      	push	{r4, r7, lr}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	461a      	mov	r2, r3
 800650a:	4623      	mov	r3, r4
 800650c:	80fb      	strh	r3, [r7, #6]
 800650e:	4603      	mov	r3, r0
 8006510:	80bb      	strh	r3, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	807b      	strh	r3, [r7, #2]
 8006516:	4613      	mov	r3, r2
 8006518:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 800651a:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <LCD_Clear+0x58>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <LCD_Clear+0x2a>
 8006522:	2300      	movs	r3, #0
 8006524:	e001      	b.n	800652a <LCD_Clear+0x2e>
 8006526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800652a:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800652c:	883b      	ldrh	r3, [r7, #0]
 800652e:	887a      	ldrh	r2, [r7, #2]
 8006530:	88b9      	ldrh	r1, [r7, #4]
 8006532:	88f8      	ldrh	r0, [r7, #6]
 8006534:	f7ff ff6a 	bl	800640c <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 8006538:	887b      	ldrh	r3, [r7, #2]
 800653a:	883a      	ldrh	r2, [r7, #0]
 800653c:	fb02 f303 	mul.w	r3, r2, r3
 8006540:	461a      	mov	r2, r3
 8006542:	89fb      	ldrh	r3, [r7, #14]
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f7ff ffb9 	bl	80064be <LCD_FillColor>
	
}
 800654c:	bf00      	nop
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	bd90      	pop	{r4, r7, pc}
 8006554:	2000db09 	.word	0x2000db09

08006558 <LCD_DrawLine>:
}



void LCD_DrawLine ( uint16_t usC1, uint16_t usP1, uint16_t usC2, uint16_t usP2, uint16_t usColor )
{
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b08d      	sub	sp, #52	; 0x34
 800655c:	af00      	add	r7, sp, #0
 800655e:	4604      	mov	r4, r0
 8006560:	4608      	mov	r0, r1
 8006562:	4611      	mov	r1, r2
 8006564:	461a      	mov	r2, r3
 8006566:	4623      	mov	r3, r4
 8006568:	80fb      	strh	r3, [r7, #6]
 800656a:	4603      	mov	r3, r0
 800656c:	80bb      	strh	r3, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	807b      	strh	r3, [r7, #2]
 8006572:	4613      	mov	r3, r2
 8006574:	803b      	strh	r3, [r7, #0]
	uint16_t us; 
	uint16_t usC_Current, usP_Current;
	
	int32_t lError_C = 0, lError_P = 0, lDelta_C, lDelta_P, lDistance; 
 8006576:	2300      	movs	r3, #0
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
 800657a:	2300      	movs	r3, #0
 800657c:	623b      	str	r3, [r7, #32]
	int32_t lIncrease_C, lIncrease_P; 	
	
	
	lDelta_C = usC2 - usC1;
 800657e:	887a      	ldrh	r2, [r7, #2]
 8006580:	88fb      	ldrh	r3, [r7, #6]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	61fb      	str	r3, [r7, #28]
	lDelta_P = usP2 - usP1; 
 8006586:	883a      	ldrh	r2, [r7, #0]
 8006588:	88bb      	ldrh	r3, [r7, #4]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	61bb      	str	r3, [r7, #24]
	
	usC_Current = usC1; 
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	85bb      	strh	r3, [r7, #44]	; 0x2c
	usP_Current = usP1; 
 8006592:	88bb      	ldrh	r3, [r7, #4]
 8006594:	857b      	strh	r3, [r7, #42]	; 0x2a
	
	
	if ( lDelta_C > 0 ) 
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	2b00      	cmp	r3, #0
 800659a:	dd02      	ble.n	80065a2 <LCD_DrawLine+0x4a>
		lIncrease_C = 1;  
 800659c:	2301      	movs	r3, #1
 800659e:	613b      	str	r3, [r7, #16]
 80065a0:	e00b      	b.n	80065ba <LCD_DrawLine+0x62>
	
	else if ( lDelta_C == 0 ) 
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d102      	bne.n	80065ae <LCD_DrawLine+0x56>
		lIncrease_C = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	e005      	b.n	80065ba <LCD_DrawLine+0x62>
	
	else 
  	{ 
    		lIncrease_C = -1;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065b2:	613b      	str	r3, [r7, #16]
    		lDelta_C = - lDelta_C;
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	425b      	negs	r3, r3
 80065b8:	61fb      	str	r3, [r7, #28]
  	} 

	
	if ( lDelta_P > 0 )
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	dd02      	ble.n	80065c6 <LCD_DrawLine+0x6e>
		lIncrease_P = 1; 
 80065c0:	2301      	movs	r3, #1
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e00b      	b.n	80065de <LCD_DrawLine+0x86>
	
	else if ( lDelta_P == 0 )
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <LCD_DrawLine+0x7a>
		lIncrease_P = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	e005      	b.n	80065de <LCD_DrawLine+0x86>
	else 
	{
  		lIncrease_P = -1;
 80065d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065d6:	60fb      	str	r3, [r7, #12]
    		lDelta_P = - lDelta_P;
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	425b      	negs	r3, r3
 80065dc:	61bb      	str	r3, [r7, #24]
 	} 

	if (  lDelta_C > lDelta_P )
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	dd02      	ble.n	80065ec <LCD_DrawLine+0x94>
		lDistance = lDelta_C; 
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	e001      	b.n	80065f0 <LCD_DrawLine+0x98>
	
	else 
		lDistance = lDelta_P; 
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	617b      	str	r3, [r7, #20]
	
	
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 80065f0:	2300      	movs	r3, #0
 80065f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80065f4:	e02b      	b.n	800664e <LCD_DrawLine+0xf6>
	{  
		LCD_DrawDot ( usC_Current, usP_Current, usColor );
 80065f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80065fa:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80065fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 f8bb 	bl	800677a <LCD_DrawDot>
		
		lError_C += lDelta_C ; 
 8006604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4413      	add	r3, r2
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
		lError_P += lDelta_P ; 
 800660c:	6a3a      	ldr	r2, [r7, #32]
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	4413      	add	r3, r2
 8006612:	623b      	str	r3, [r7, #32]
		
		if ( lError_C > lDistance ) 
 8006614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	429a      	cmp	r2, r3
 800661a:	dd08      	ble.n	800662e <LCD_DrawLine+0xd6>
		{ 
			lError_C -= lDistance; 
 800661c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
			usC_Current += lIncrease_C; 
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	b29a      	uxth	r2, r3
 8006628:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800662a:	4413      	add	r3, r2
 800662c:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}  
		
		if ( lError_P > lDistance ) 
 800662e:	6a3a      	ldr	r2, [r7, #32]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	429a      	cmp	r2, r3
 8006634:	dd08      	ble.n	8006648 <LCD_DrawLine+0xf0>
		{ 
			lError_P -= lDistance; 
 8006636:	6a3a      	ldr	r2, [r7, #32]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	623b      	str	r3, [r7, #32]
			usP_Current += lIncrease_P; 
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	b29a      	uxth	r2, r3
 8006642:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006644:	4413      	add	r3, r2
 8006646:	857b      	strh	r3, [r7, #42]	; 0x2a
	for ( us = 0; us <= lDistance + 1; us ++ ) 
 8006648:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800664a:	3301      	adds	r3, #1
 800664c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800664e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	3301      	adds	r3, #1
 8006654:	429a      	cmp	r2, r3
 8006656:	ddce      	ble.n	80065f6 <LCD_DrawLine+0x9e>
		} 
		
	}  
	
	
}   
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	3734      	adds	r7, #52	; 0x34
 800665e:	46bd      	mov	sp, r7
 8006660:	bd90      	pop	{r4, r7, pc}
	...

08006664 <LCD_DrawChar>:


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	4603      	mov	r3, r0
 800666c:	80fb      	strh	r3, [r7, #6]
 800666e:	460b      	mov	r3, r1
 8006670:	80bb      	strh	r3, [r7, #4]
 8006672:	4613      	mov	r3, r2
 8006674:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 8006676:	4b27      	ldr	r3, [pc, #156]	; (8006714 <LCD_DrawChar+0xb0>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <LCD_DrawChar+0x20>
 800667e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006682:	e000      	b.n	8006686 <LCD_DrawChar+0x22>
 8006684:	2300      	movs	r3, #0
 8006686:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8006688:	4b22      	ldr	r3, [pc, #136]	; (8006714 <LCD_DrawChar+0xb0>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <LCD_DrawChar+0x30>
 8006690:	2300      	movs	r3, #0
 8006692:	e001      	b.n	8006698 <LCD_DrawChar+0x34>
 8006694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006698:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	3b20      	subs	r3, #32
 800669e:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80066a0:	88b9      	ldrh	r1, [r7, #4]
 80066a2:	88f8      	ldrh	r0, [r7, #6]
 80066a4:	2310      	movs	r3, #16
 80066a6:	2208      	movs	r2, #8
 80066a8:	f7ff feb0 	bl	800640c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80066ac:	202c      	movs	r0, #44	; 0x2c
 80066ae:	f7ff fd75 	bl	800619c <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80066b2:	2300      	movs	r3, #0
 80066b4:	75bb      	strb	r3, [r7, #22]
 80066b6:	e024      	b.n	8006702 <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80066b8:	7bfa      	ldrb	r2, [r7, #15]
 80066ba:	7dbb      	ldrb	r3, [r7, #22]
 80066bc:	4916      	ldr	r1, [pc, #88]	; (8006718 <LCD_DrawChar+0xb4>)
 80066be:	0112      	lsls	r2, r2, #4
 80066c0:	440a      	add	r2, r1
 80066c2:	4413      	add	r3, r2
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80066c8:	2300      	movs	r3, #0
 80066ca:	757b      	strb	r3, [r7, #21]
 80066cc:	e013      	b.n	80066f6 <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d004      	beq.n	80066e2 <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 80066d8:	8a7b      	ldrh	r3, [r7, #18]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff fd6c 	bl	80061b8 <LCD_Write_Data>
 80066e0:	e003      	b.n	80066ea <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 80066e2:	8a3b      	ldrh	r3, [r7, #16]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff fd67 	bl	80061b8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
 80066ec:	085b      	lsrs	r3, r3, #1
 80066ee:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80066f0:	7d7b      	ldrb	r3, [r7, #21]
 80066f2:	3301      	adds	r3, #1
 80066f4:	757b      	strb	r3, [r7, #21]
 80066f6:	7d7b      	ldrb	r3, [r7, #21]
 80066f8:	2b07      	cmp	r3, #7
 80066fa:	d9e8      	bls.n	80066ce <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80066fc:	7dbb      	ldrb	r3, [r7, #22]
 80066fe:	3301      	adds	r3, #1
 8006700:	75bb      	strb	r3, [r7, #22]
 8006702:	7dbb      	ldrb	r3, [r7, #22]
 8006704:	2b0f      	cmp	r3, #15
 8006706:	d9d7      	bls.n	80066b8 <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 8006708:	bf00      	nop
 800670a:	bf00      	nop
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	2000db09 	.word	0x2000db09
 8006718:	0802eee0 	.word	0x0802eee0

0800671c <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	603a      	str	r2, [r7, #0]
 8006726:	80fb      	strh	r3, [r7, #6]
 8006728:	460b      	mov	r3, r1
 800672a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800672c:	e01c      	b.n	8006768 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	2be8      	cmp	r3, #232	; 0xe8
 8006732:	d904      	bls.n	800673e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8006734:	2300      	movs	r3, #0
 8006736:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8006738:	88bb      	ldrh	r3, [r7, #4]
 800673a:	3310      	adds	r3, #16
 800673c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800673e:	88bb      	ldrh	r3, [r7, #4]
 8006740:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006744:	d903      	bls.n	800674e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8006746:	2300      	movs	r3, #0
 8006748:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800674a:	2300      	movs	r3, #0
 800674c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781a      	ldrb	r2, [r3, #0]
 8006752:	88b9      	ldrh	r1, [r7, #4]
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff ff84 	bl	8006664 <LCD_DrawChar>
		
		pStr ++;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	3301      	adds	r3, #1
 8006760:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8006762:	88fb      	ldrh	r3, [r7, #6]
 8006764:	3308      	adds	r3, #8
 8006766:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1de      	bne.n	800672e <LCD_DrawString+0x12>
		
	}
	
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <LCD_DrawDot>:




void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	4603      	mov	r3, r0
 8006782:	80fb      	strh	r3, [r7, #6]
 8006784:	460b      	mov	r3, r1
 8006786:	80bb      	strh	r3, [r7, #4]
 8006788:	4613      	mov	r3, r2
 800678a:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 800678c:	88fb      	ldrh	r3, [r7, #6]
 800678e:	2bef      	cmp	r3, #239	; 0xef
 8006790:	d809      	bhi.n	80067a6 <LCD_DrawDot+0x2c>
 8006792:	88bb      	ldrh	r3, [r7, #4]
 8006794:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006798:	d205      	bcs.n	80067a6 <LCD_DrawDot+0x2c>
	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 800679a:	88b9      	ldrh	r1, [r7, #4]
 800679c:	88f8      	ldrh	r0, [r7, #6]
 800679e:	2301      	movs	r3, #1
 80067a0:	2201      	movs	r2, #1
 80067a2:	f7ff fe33 	bl	800640c <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 80067a6:	887b      	ldrh	r3, [r7, #2]
 80067a8:	4619      	mov	r1, r3
 80067aa:	2001      	movs	r0, #1
 80067ac:	f7ff fe87 	bl	80064be <LCD_FillColor>

}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <LCD_DrawChar_Color>:
			LCD_DrawDot(x,y,usColor);
		}
}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80067b8:	b590      	push	{r4, r7, lr}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4604      	mov	r4, r0
 80067c0:	4608      	mov	r0, r1
 80067c2:	4611      	mov	r1, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	4623      	mov	r3, r4
 80067c8:	80fb      	strh	r3, [r7, #6]
 80067ca:	4603      	mov	r3, r0
 80067cc:	80bb      	strh	r3, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
 80067d2:	4613      	mov	r3, r2
 80067d4:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	3b20      	subs	r3, #32
 80067da:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80067dc:	88b9      	ldrh	r1, [r7, #4]
 80067de:	88f8      	ldrh	r0, [r7, #6]
 80067e0:	2310      	movs	r3, #16
 80067e2:	2208      	movs	r2, #8
 80067e4:	f7ff fe12 	bl	800640c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80067e8:	202c      	movs	r0, #44	; 0x2c
 80067ea:	f7ff fcd7 	bl	800619c <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80067ee:	2300      	movs	r3, #0
 80067f0:	73bb      	strb	r3, [r7, #14]
 80067f2:	e024      	b.n	800683e <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80067f4:	7b3a      	ldrb	r2, [r7, #12]
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	4915      	ldr	r1, [pc, #84]	; (8006850 <LCD_DrawChar_Color+0x98>)
 80067fa:	0112      	lsls	r2, r2, #4
 80067fc:	440a      	add	r2, r1
 80067fe:	4413      	add	r3, r2
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8006804:	2300      	movs	r3, #0
 8006806:	737b      	strb	r3, [r7, #13]
 8006808:	e013      	b.n	8006832 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d004      	beq.n	800681e <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8006814:	8c3b      	ldrh	r3, [r7, #32]
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fcce 	bl	80061b8 <LCD_Write_Data>
 800681c:	e003      	b.n	8006826 <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 800681e:	883b      	ldrh	r3, [r7, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fcc9 	bl	80061b8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800682c:	7b7b      	ldrb	r3, [r7, #13]
 800682e:	3301      	adds	r3, #1
 8006830:	737b      	strb	r3, [r7, #13]
 8006832:	7b7b      	ldrb	r3, [r7, #13]
 8006834:	2b07      	cmp	r3, #7
 8006836:	d9e8      	bls.n	800680a <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8006838:	7bbb      	ldrb	r3, [r7, #14]
 800683a:	3301      	adds	r3, #1
 800683c:	73bb      	strb	r3, [r7, #14]
 800683e:	7bbb      	ldrb	r3, [r7, #14]
 8006840:	2b0f      	cmp	r3, #15
 8006842:	d9d7      	bls.n	80067f4 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	bd90      	pop	{r4, r7, pc}
 800684e:	bf00      	nop
 8006850:	0802eee0 	.word	0x0802eee0

08006854 <LCD_DrawString_Color>:
	
}


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b087      	sub	sp, #28
 8006858:	af02      	add	r7, sp, #8
 800685a:	60ba      	str	r2, [r7, #8]
 800685c:	461a      	mov	r2, r3
 800685e:	4603      	mov	r3, r0
 8006860:	81fb      	strh	r3, [r7, #14]
 8006862:	460b      	mov	r3, r1
 8006864:	81bb      	strh	r3, [r7, #12]
 8006866:	4613      	mov	r3, r2
 8006868:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800686a:	e01f      	b.n	80068ac <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800686c:	89fb      	ldrh	r3, [r7, #14]
 800686e:	2be8      	cmp	r3, #232	; 0xe8
 8006870:	d904      	bls.n	800687c <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8006872:	2300      	movs	r3, #0
 8006874:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8006876:	89bb      	ldrh	r3, [r7, #12]
 8006878:	3310      	adds	r3, #16
 800687a:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800687c:	89bb      	ldrh	r3, [r7, #12]
 800687e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006882:	d903      	bls.n	800688c <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8006884:	2300      	movs	r3, #0
 8006886:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8006888:	2300      	movs	r3, #0
 800688a:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	88fc      	ldrh	r4, [r7, #6]
 8006892:	89b9      	ldrh	r1, [r7, #12]
 8006894:	89f8      	ldrh	r0, [r7, #14]
 8006896:	8c3b      	ldrh	r3, [r7, #32]
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	4623      	mov	r3, r4
 800689c:	f7ff ff8c 	bl	80067b8 <LCD_DrawChar_Color>
		
		pStr ++;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	3301      	adds	r3, #1
 80068a4:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 80068a6:	89fb      	ldrh	r3, [r7, #14]
 80068a8:	3308      	adds	r3, #8
 80068aa:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1db      	bne.n	800686c <LCD_DrawString_Color+0x18>
		
	}
	
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd90      	pop	{r4, r7, pc}
	...

080068c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80068c4:	f002 ff2c 	bl	8009720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80068c8:	f000 f840 	bl	800694c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80068cc:	f7fc fa32 	bl	8002d34 <MX_GPIO_Init>
  MX_DMA_Init();
 80068d0:	f7fc f93c 	bl	8002b4c <MX_DMA_Init>
  MX_FSMC_Init();
 80068d4:	f7fc f97c 	bl	8002bd0 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80068d8:	f002 fb7e 	bl	8008fd8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80068dc:	f001 ff3e 	bl	800875c <MX_TIM2_Init>
  MX_TIM3_Init();
 80068e0:	f001 ff88 	bl	80087f4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80068e4:	f002 f872 	bl	80089cc <MX_TIM5_Init>
  MX_TIM1_Init();
 80068e8:	f001 fe94 	bl	8008614 <MX_TIM1_Init>
  MX_ADC1_Init();
 80068ec:	f7fc f88a 	bl	8002a04 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80068f0:	f002 fb9c 	bl	800902c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80068f4:	f001 fff4 	bl	80088e0 <MX_TIM4_Init>
  MX_TIM8_Init();
 80068f8:	f002 f8b6 	bl	8008a68 <MX_TIM8_Init>
  	 * LCD
  	 * ADC (Photoresistor)
  	 * ESP8266
  	 */
	
	macXPT2046_CS_DISABLE();
 80068fc:	2200      	movs	r2, #0
 80068fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006902:	480e      	ldr	r0, [pc, #56]	; (800693c <main+0x7c>)
 8006904:	f004 f8af 	bl	800aa66 <HAL_GPIO_WritePin>
	LCD_INIT();
 8006908:	f7ff fc01 	bl	800610e <LCD_INIT>
	
	
	DEBUG_USART_Config();
 800690c:	f7fc f8f4 	bl	8002af8 <DEBUG_USART_Config>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 8006910:	f002 fb2e 	bl	8008f70 <TIMER_INIT>
	timer_min(1);
 8006914:	2001      	movs	r0, #1
 8006916:	f002 fb3d 	bl	8008f94 <timer_min>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800691a:	2108      	movs	r1, #8
 800691c:	4808      	ldr	r0, [pc, #32]	; (8006940 <main+0x80>)
 800691e:	f004 fedf 	bl	800b6e0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 10);
 8006922:	4b07      	ldr	r3, [pc, #28]	; (8006940 <main+0x80>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3334      	adds	r3, #52	; 0x34
 8006928:	3308      	adds	r3, #8
 800692a:	220a      	movs	r2, #10
 800692c:	601a      	str	r2, [r3, #0]
  // HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  myfunc();
 800692e:	f7ff f99d 	bl	8005c6c <myfunc>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8006932:	4904      	ldr	r1, [pc, #16]	; (8006944 <main+0x84>)
 8006934:	4804      	ldr	r0, [pc, #16]	; (8006948 <main+0x88>)
 8006936:	f002 fe45 	bl	80095c4 <XPT2046_Get_TouchedPoint>
 800693a:	e7fa      	b.n	8006932 <main+0x72>
 800693c:	40011400 	.word	0x40011400
 8006940:	2000db54 	.word	0x2000db54
 8006944:	20000028 	.word	0x20000028
 8006948:	2000db0c 	.word	0x2000db0c

0800694c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b096      	sub	sp, #88	; 0x58
 8006950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006952:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006956:	2228      	movs	r2, #40	; 0x28
 8006958:	2100      	movs	r1, #0
 800695a:	4618      	mov	r0, r3
 800695c:	f006 fd74 	bl	800d448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006960:	f107 031c 	add.w	r3, r7, #28
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	605a      	str	r2, [r3, #4]
 800696a:	609a      	str	r2, [r3, #8]
 800696c:	60da      	str	r2, [r3, #12]
 800696e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006970:	1d3b      	adds	r3, r7, #4
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	605a      	str	r2, [r3, #4]
 8006978:	609a      	str	r2, [r3, #8]
 800697a:	60da      	str	r2, [r3, #12]
 800697c:	611a      	str	r2, [r3, #16]
 800697e:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8006980:	2305      	movs	r3, #5
 8006982:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006988:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800698a:	2300      	movs	r3, #0
 800698c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800698e:	2301      	movs	r3, #1
 8006990:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006992:	2301      	movs	r3, #1
 8006994:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006996:	2302      	movs	r3, #2
 8006998:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800699a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800699e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80069a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80069a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80069a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069aa:	4618      	mov	r0, r3
 80069ac:	f004 f896 	bl	800aadc <HAL_RCC_OscConfig>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80069b6:	f000 f82b 	bl	8006a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80069ba:	230f      	movs	r3, #15
 80069bc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80069be:	2302      	movs	r3, #2
 80069c0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80069c2:	2300      	movs	r3, #0
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80069c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80069cc:	2300      	movs	r3, #0
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80069d0:	f107 031c 	add.w	r3, r7, #28
 80069d4:	2102      	movs	r1, #2
 80069d6:	4618      	mov	r0, r3
 80069d8:	f004 fae4 	bl	800afa4 <HAL_RCC_ClockConfig>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80069e2:	f000 f815 	bl	8006a10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80069e6:	2303      	movs	r3, #3
 80069e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80069ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069ee:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80069f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80069f6:	1d3b      	adds	r3, r7, #4
 80069f8:	4618      	mov	r0, r3
 80069fa:	f004 fc8f 	bl	800b31c <HAL_RCCEx_PeriphCLKConfig>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006a04:	f000 f804 	bl	8006a10 <Error_Handler>
  }
}
 8006a08:	bf00      	nop
 8006a0a:	3758      	adds	r7, #88	; 0x58
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006a14:	bf00      	nop
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr

08006a1c <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
 8006a26:	603b      	str	r3, [r7, #0]
 8006a28:	4603      	mov	r3, r0
 8006a2a:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d204      	bcs.n	8006a3e <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4413      	add	r3, r2
 8006a3a:	7bfa      	ldrb	r2, [r7, #15]
 8006a3c:	701a      	strb	r2, [r3, #0]
  }
}
 8006a3e:	bf00      	nop
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8006a58:	bf00      	nop
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bc80      	pop	{r7}
 8006a60:	4770      	bx	lr

08006a62 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b085      	sub	sp, #20
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e002      	b.n	8006a78 <_strnlen_s+0x16>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <_strnlen_s+0x28>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	1e5a      	subs	r2, r3, #1
 8006a84:	603a      	str	r2, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1f3      	bne.n	8006a72 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	1ad3      	subs	r3, r2, r3
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr

08006a9a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	2b2f      	cmp	r3, #47	; 0x2f
 8006aa8:	d904      	bls.n	8006ab4 <_is_digit+0x1a>
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	2b39      	cmp	r3, #57	; 0x39
 8006aae:	d801      	bhi.n	8006ab4 <_is_digit+0x1a>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <_is_digit+0x1c>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	b2db      	uxtb	r3, r3
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr

08006ac6 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8006ad2:	e00e      	b.n	8006af2 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	4618      	mov	r0, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	1c59      	adds	r1, r3, #1
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6011      	str	r1, [r2, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	4403      	add	r3, r0
 8006aee:	3b30      	subs	r3, #48	; 0x30
 8006af0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff ffce 	bl	8006a9a <_is_digit>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e7      	bne.n	8006ad4 <_atoi+0xe>
  }
  return i;
 8006b04:	68fb      	ldr	r3, [r7, #12]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8006b0e:	b590      	push	{r4, r7, lr}
 8006b10:	b087      	sub	sp, #28
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8006b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d125      	bne.n	8006b76 <_out_rev+0x68>
 8006b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d120      	bne.n	8006b76 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	e00a      	b.n	8006b50 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	1c53      	adds	r3, r2, #1
 8006b3e:	607b      	str	r3, [r7, #4]
 8006b40:	68fc      	ldr	r4, [r7, #12]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	2020      	movs	r0, #32
 8006b48:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d3f0      	bcc.n	8006b3a <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8006b58:	e00d      	b.n	8006b76 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	4413      	add	r3, r2
 8006b66:	7818      	ldrb	r0, [r3, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	1c53      	adds	r3, r2, #1
 8006b6c:	607b      	str	r3, [r7, #4]
 8006b6e:	68fc      	ldr	r4, [r7, #12]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	47a0      	blx	r4
  while (len) {
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1ee      	bne.n	8006b5a <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00e      	beq.n	8006ba4 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8006b86:	e007      	b.n	8006b98 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	1c53      	adds	r3, r2, #1
 8006b8c:	607b      	str	r3, [r7, #4]
 8006b8e:	68fc      	ldr	r4, [r7, #12]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	2020      	movs	r0, #32
 8006b96:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d8f1      	bhi.n	8006b88 <_out_rev+0x7a>
    }
  }

  return idx;
 8006ba4:	687b      	ldr	r3, [r7, #4]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd90      	pop	{r4, r7, pc}

08006bae <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b088      	sub	sp, #32
 8006bb2:	af04      	add	r7, sp, #16
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
 8006bba:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d136      	bne.n	8006c34 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d018      	beq.n	8006bfe <_ntoa_format+0x50>
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d013      	beq.n	8006bfe <_ntoa_format+0x50>
 8006bd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d104      	bne.n	8006be8 <_ntoa_format+0x3a>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	f003 030c 	and.w	r3, r3, #12
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <_ntoa_format+0x50>
      width--;
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	3b01      	subs	r3, #1
 8006bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006bee:	e006      	b.n	8006bfe <_ntoa_format+0x50>
      buf[len++] = '0';
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	61fa      	str	r2, [r7, #28]
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	2230      	movs	r2, #48	; 0x30
 8006bfc:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d20a      	bcs.n	8006c1c <_ntoa_format+0x6e>
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	2b1f      	cmp	r3, #31
 8006c0a:	d9f1      	bls.n	8006bf0 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006c0c:	e006      	b.n	8006c1c <_ntoa_format+0x6e>
      buf[len++] = '0';
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	61fa      	str	r2, [r7, #28]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	4413      	add	r3, r2
 8006c18:	2230      	movs	r2, #48	; 0x30
 8006c1a:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d006      	beq.n	8006c34 <_ntoa_format+0x86>
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d202      	bcs.n	8006c34 <_ntoa_format+0x86>
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	2b1f      	cmp	r3, #31
 8006c32:	d9ec      	bls.n	8006c0e <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	f003 0310 	and.w	r3, r3, #16
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d058      	beq.n	8006cf0 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d116      	bne.n	8006c76 <_ntoa_format+0xc8>
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d013      	beq.n	8006c76 <_ntoa_format+0xc8>
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d003      	beq.n	8006c5e <_ntoa_format+0xb0>
 8006c56:	69fa      	ldr	r2, [r7, #28]
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d10b      	bne.n	8006c76 <_ntoa_format+0xc8>
      len--;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <_ntoa_format+0xc8>
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	2b10      	cmp	r3, #16
 8006c6e:	d102      	bne.n	8006c76 <_ntoa_format+0xc8>
        len--;
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d10f      	bne.n	8006c9c <_ntoa_format+0xee>
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10a      	bne.n	8006c9c <_ntoa_format+0xee>
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	2b1f      	cmp	r3, #31
 8006c8a:	d807      	bhi.n	8006c9c <_ntoa_format+0xee>
      buf[len++] = 'x';
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	61fa      	str	r2, [r7, #28]
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	4413      	add	r3, r2
 8006c96:	2278      	movs	r2, #120	; 0x78
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	e01f      	b.n	8006cdc <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d10f      	bne.n	8006cc2 <_ntoa_format+0x114>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <_ntoa_format+0x114>
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b1f      	cmp	r3, #31
 8006cb0:	d807      	bhi.n	8006cc2 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	61fa      	str	r2, [r7, #28]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	4413      	add	r3, r2
 8006cbc:	2258      	movs	r2, #88	; 0x58
 8006cbe:	701a      	strb	r2, [r3, #0]
 8006cc0:	e00c      	b.n	8006cdc <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d109      	bne.n	8006cdc <_ntoa_format+0x12e>
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	2b1f      	cmp	r3, #31
 8006ccc:	d806      	bhi.n	8006cdc <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	61fa      	str	r2, [r7, #28]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	2262      	movs	r2, #98	; 0x62
 8006cda:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	2b1f      	cmp	r3, #31
 8006ce0:	d806      	bhi.n	8006cf0 <_ntoa_format+0x142>
      buf[len++] = '0';
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	61fa      	str	r2, [r7, #28]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	4413      	add	r3, r2
 8006cec:	2230      	movs	r2, #48	; 0x30
 8006cee:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	2b1f      	cmp	r3, #31
 8006cf4:	d824      	bhi.n	8006d40 <_ntoa_format+0x192>
    if (negative) {
 8006cf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d007      	beq.n	8006d0e <_ntoa_format+0x160>
      buf[len++] = '-';
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	61fa      	str	r2, [r7, #28]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	4413      	add	r3, r2
 8006d08:	222d      	movs	r2, #45	; 0x2d
 8006d0a:	701a      	strb	r2, [r3, #0]
 8006d0c:	e018      	b.n	8006d40 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d007      	beq.n	8006d28 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	61fa      	str	r2, [r7, #28]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	4413      	add	r3, r2
 8006d22:	222b      	movs	r2, #43	; 0x2b
 8006d24:	701a      	strb	r2, [r3, #0]
 8006d26:	e00b      	b.n	8006d40 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d006      	beq.n	8006d40 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	61fa      	str	r2, [r7, #28]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	9303      	str	r3, [sp, #12]
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	9302      	str	r3, [sp, #8]
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff fed9 	bl	8006b0e <_out_rev>
 8006d5c:	4603      	mov	r3, r0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b096      	sub	sp, #88	; 0x58
 8006d6a:	af08      	add	r7, sp, #32
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8006d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8006d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d80:	f023 0310 	bic.w	r3, r3, #16
 8006d84:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8006d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <_ntoa_long+0x30>
 8006d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d032      	beq.n	8006dfc <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8006d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d9e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006da0:	fb01 f202 	mul.w	r2, r1, r2
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006daa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006dae:	2b09      	cmp	r3, #9
 8006db0:	d804      	bhi.n	8006dbc <_ntoa_long+0x56>
 8006db2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006db6:	3330      	adds	r3, #48	; 0x30
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	e00d      	b.n	8006dd8 <_ntoa_long+0x72>
 8006dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <_ntoa_long+0x64>
 8006dc6:	2241      	movs	r2, #65	; 0x41
 8006dc8:	e000      	b.n	8006dcc <_ntoa_long+0x66>
 8006dca:	2261      	movs	r2, #97	; 0x61
 8006dcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006dd0:	4413      	add	r3, r2
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	3b0a      	subs	r3, #10
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dda:	1c59      	adds	r1, r3, #1
 8006ddc:	6379      	str	r1, [r7, #52]	; 0x34
 8006dde:	3338      	adds	r3, #56	; 0x38
 8006de0:	443b      	add	r3, r7
 8006de2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8006de6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dee:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <_ntoa_long+0x96>
 8006df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df8:	2b1f      	cmp	r3, #31
 8006dfa:	d9cc      	bls.n	8006d96 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dfe:	9306      	str	r3, [sp, #24]
 8006e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e02:	9305      	str	r3, [sp, #20]
 8006e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e06:	9304      	str	r3, [sp, #16]
 8006e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e0a:	9303      	str	r3, [sp, #12]
 8006e0c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006e10:	9302      	str	r3, [sp, #8]
 8006e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e14:	9301      	str	r3, [sp, #4]
 8006e16:	f107 0310 	add.w	r3, r7, #16
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f7ff fec3 	bl	8006bae <_ntoa_format>
 8006e28:	4603      	mov	r3, r0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3738      	adds	r7, #56	; 0x38
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b096      	sub	sp, #88	; 0x58
 8006e36:	af08      	add	r7, sp, #32
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	607a      	str	r2, [r7, #4]
 8006e3e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8006e44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	d103      	bne.n	8006e54 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8006e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e4e:	f023 0310 	bic.w	r3, r3, #16
 8006e52:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8006e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <_ntoa_long_long+0x34>
 8006e5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e62:	4313      	orrs	r3, r2
 8006e64:	d037      	beq.n	8006ed6 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8006e66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006e6a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e6e:	f7fa fa01 	bl	8001274 <__aeabi_uldivmod>
 8006e72:	4613      	mov	r3, r2
 8006e74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006e78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e7c:	2b09      	cmp	r3, #9
 8006e7e:	d804      	bhi.n	8006e8a <_ntoa_long_long+0x58>
 8006e80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e84:	3330      	adds	r3, #48	; 0x30
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	e00d      	b.n	8006ea6 <_ntoa_long_long+0x74>
 8006e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <_ntoa_long_long+0x66>
 8006e94:	2241      	movs	r2, #65	; 0x41
 8006e96:	e000      	b.n	8006e9a <_ntoa_long_long+0x68>
 8006e98:	2261      	movs	r2, #97	; 0x61
 8006e9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e9e:	4413      	add	r3, r2
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	3b0a      	subs	r3, #10
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea8:	1c59      	adds	r1, r3, #1
 8006eaa:	6379      	str	r1, [r7, #52]	; 0x34
 8006eac:	3338      	adds	r3, #56	; 0x38
 8006eae:	443b      	add	r3, r7
 8006eb0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8006eb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006eb8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006ebc:	f7fa f9da 	bl	8001274 <__aeabi_uldivmod>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006ec8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	d002      	beq.n	8006ed6 <_ntoa_long_long+0xa4>
 8006ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed2:	2b1f      	cmp	r3, #31
 8006ed4:	d9c7      	bls.n	8006e66 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006eda:	9206      	str	r2, [sp, #24]
 8006edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ede:	9205      	str	r2, [sp, #20]
 8006ee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ee2:	9204      	str	r2, [sp, #16]
 8006ee4:	9303      	str	r3, [sp, #12]
 8006ee6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006eea:	9302      	str	r3, [sp, #8]
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	f107 0310 	add.w	r3, r7, #16
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	68b9      	ldr	r1, [r7, #8]
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff fe56 	bl	8006bae <_ntoa_format>
 8006f02:	4603      	mov	r3, r0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3738      	adds	r7, #56	; 0x38
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	0000      	movs	r0, r0
	...

08006f10 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006f10:	b590      	push	{r4, r7, lr}
 8006f12:	b09d      	sub	sp, #116	; 0x74
 8006f14:	af06      	add	r7, sp, #24
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8006f2e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006f32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f36:	f7f9 fda3 	bl	8000a80 <__aeabi_dcmpeq>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10f      	bne.n	8006f60 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8006f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f42:	9303      	str	r3, [sp, #12]
 8006f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f46:	9302      	str	r3, [sp, #8]
 8006f48:	2303      	movs	r3, #3
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	4b82      	ldr	r3, [pc, #520]	; (8007158 <_ftoa+0x248>)
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	68b9      	ldr	r1, [r7, #8]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f7ff fdd9 	bl	8006b0e <_out_rev>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	e224      	b.n	80073aa <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8006f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f64:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8006f68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f6c:	f7f9 fd92 	bl	8000a94 <__aeabi_dcmplt>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00f      	beq.n	8006f96 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8006f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f78:	9303      	str	r3, [sp, #12]
 8006f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f7c:	9302      	str	r3, [sp, #8]
 8006f7e:	2304      	movs	r3, #4
 8006f80:	9301      	str	r3, [sp, #4]
 8006f82:	4b76      	ldr	r3, [pc, #472]	; (800715c <_ftoa+0x24c>)
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff fdbe 	bl	8006b0e <_out_rev>
 8006f92:	4603      	mov	r3, r0
 8006f94:	e209      	b.n	80073aa <_ftoa+0x49a>
  if (value > DBL_MAX)
 8006f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f9a:	4b71      	ldr	r3, [pc, #452]	; (8007160 <_ftoa+0x250>)
 8006f9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fa0:	f7f9 fd96 	bl	8000ad0 <__aeabi_dcmpgt>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01d      	beq.n	8006fe6 <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8006faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <_ftoa+0xa8>
 8006fb4:	4b6b      	ldr	r3, [pc, #428]	; (8007164 <_ftoa+0x254>)
 8006fb6:	e000      	b.n	8006fba <_ftoa+0xaa>
 8006fb8:	4b6b      	ldr	r3, [pc, #428]	; (8007168 <_ftoa+0x258>)
 8006fba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fbc:	f002 0204 	and.w	r2, r2, #4
 8006fc0:	2a00      	cmp	r2, #0
 8006fc2:	d001      	beq.n	8006fc8 <_ftoa+0xb8>
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	e000      	b.n	8006fca <_ftoa+0xba>
 8006fc8:	2203      	movs	r2, #3
 8006fca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006fcc:	9103      	str	r1, [sp, #12]
 8006fce:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006fd0:	9102      	str	r1, [sp, #8]
 8006fd2:	9201      	str	r2, [sp, #4]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	68b9      	ldr	r1, [r7, #8]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f7ff fd96 	bl	8006b0e <_out_rev>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	e1e1      	b.n	80073aa <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8006fe6:	a358      	add	r3, pc, #352	; (adr r3, 8007148 <_ftoa+0x238>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ff0:	f7f9 fd6e 	bl	8000ad0 <__aeabi_dcmpgt>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d109      	bne.n	800700e <_ftoa+0xfe>
 8006ffa:	a355      	add	r3, pc, #340	; (adr r3, 8007150 <_ftoa+0x240>)
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007004:	f7f9 fd46 	bl	8000a94 <__aeabi_dcmplt>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d011      	beq.n	8007032 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800700e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007010:	9304      	str	r3, [sp, #16]
 8007012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007014:	9303      	str	r3, [sp, #12]
 8007016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007018:	9302      	str	r3, [sp, #8]
 800701a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800701e:	e9cd 2300 	strd	r2, r3, [sp]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	68b9      	ldr	r1, [r7, #8]
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 f9c9 	bl	80073c0 <_etoa>
 800702e:	4603      	mov	r3, r0
 8007030:	e1bb      	b.n	80073aa <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8007032:	2300      	movs	r3, #0
 8007034:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007044:	f7f9 fd26 	bl	8000a94 <__aeabi_dcmplt>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <_ftoa+0x15c>
    negative = true;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 8007054:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007058:	f04f 0000 	mov.w	r0, #0
 800705c:	f04f 0100 	mov.w	r1, #0
 8007060:	f7f9 f8ee 	bl	8000240 <__aeabi_dsub>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800706c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800706e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10d      	bne.n	8007092 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8007076:	2306      	movs	r3, #6
 8007078:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800707a:	e00a      	b.n	8007092 <_ftoa+0x182>
    buf[len++] = '0';
 800707c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	657a      	str	r2, [r7, #84]	; 0x54
 8007082:	3358      	adds	r3, #88	; 0x58
 8007084:	443b      	add	r3, r7
 8007086:	2230      	movs	r2, #48	; 0x30
 8007088:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800708c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800708e:	3b01      	subs	r3, #1
 8007090:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8007092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007094:	2b1f      	cmp	r3, #31
 8007096:	d802      	bhi.n	800709e <_ftoa+0x18e>
 8007098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800709a:	2b09      	cmp	r3, #9
 800709c:	d8ee      	bhi.n	800707c <_ftoa+0x16c>
  }

  int whole = (int)value;
 800709e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070a2:	f7f9 fd1f 	bl	8000ae4 <__aeabi_d2iz>
 80070a6:	4603      	mov	r3, r0
 80070a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 80070aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80070ac:	f7f9 fa16 	bl	80004dc <__aeabi_i2d>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070b8:	f7f9 f8c2 	bl	8000240 <__aeabi_dsub>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4610      	mov	r0, r2
 80070c2:	4619      	mov	r1, r3
 80070c4:	4a29      	ldr	r2, [pc, #164]	; (800716c <_ftoa+0x25c>)
 80070c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	4413      	add	r3, r2
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f7f9 fa6e 	bl	80005b0 <__aeabi_dmul>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 80070dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80070e0:	f7f9 fd28 	bl	8000b34 <__aeabi_d2uiz>
 80070e4:	4603      	mov	r3, r0
 80070e6:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 80070e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80070ea:	f7f9 f9e7 	bl	80004bc <__aeabi_ui2d>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80070f6:	f7f9 f8a3 	bl	8000240 <__aeabi_dsub>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	4b1a      	ldr	r3, [pc, #104]	; (8007170 <_ftoa+0x260>)
 8007108:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800710c:	f7f9 fce0 	bl	8000ad0 <__aeabi_dcmpgt>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d02e      	beq.n	8007174 <_ftoa+0x264>
    ++frac;
 8007116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007118:	3301      	adds	r3, #1
 800711a:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800711c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800711e:	f7f9 f9cd 	bl	80004bc <__aeabi_ui2d>
 8007122:	4a12      	ldr	r2, [pc, #72]	; (800716c <_ftoa+0x25c>)
 8007124:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4413      	add	r3, r2
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f7f9 fcc5 	bl	8000abc <__aeabi_dcmpge>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d032      	beq.n	800719e <_ftoa+0x28e>
      frac = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 800713c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800713e:	3301      	adds	r3, #1
 8007140:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007142:	e02c      	b.n	800719e <_ftoa+0x28e>
 8007144:	f3af 8000 	nop.w
 8007148:	00000000 	.word	0x00000000
 800714c:	41cdcd65 	.word	0x41cdcd65
 8007150:	00000000 	.word	0x00000000
 8007154:	c1cdcd65 	.word	0xc1cdcd65
 8007158:	0800d608 	.word	0x0800d608
 800715c:	0800d60c 	.word	0x0800d60c
 8007160:	7fefffff 	.word	0x7fefffff
 8007164:	0800d614 	.word	0x0800d614
 8007168:	0800d61c 	.word	0x0800d61c
 800716c:	0802f4d0 	.word	0x0802f4d0
 8007170:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 8007174:	f04f 0200 	mov.w	r2, #0
 8007178:	4b8e      	ldr	r3, [pc, #568]	; (80073b4 <_ftoa+0x4a4>)
 800717a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800717e:	f7f9 fc89 	bl	8000a94 <__aeabi_dcmplt>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8007188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800718a:	2b00      	cmp	r3, #0
 800718c:	d004      	beq.n	8007198 <_ftoa+0x288>
 800718e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8007198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800719a:	3301      	adds	r3, #1
 800719c:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 800719e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d133      	bne.n	800720c <_ftoa+0x2fc>
    diff = value - (double)whole;
 80071a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80071a6:	f7f9 f999 	bl	80004dc <__aeabi_i2d>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071b2:	f7f9 f845 	bl	8000240 <__aeabi_dsub>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80071be:	2301      	movs	r3, #1
 80071c0:	461c      	mov	r4, r3
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	4b7b      	ldr	r3, [pc, #492]	; (80073b4 <_ftoa+0x4a4>)
 80071c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80071cc:	f7f9 fc62 	bl	8000a94 <__aeabi_dcmplt>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <_ftoa+0x2ca>
 80071d6:	2300      	movs	r3, #0
 80071d8:	461c      	mov	r4, r3
 80071da:	b2e3      	uxtb	r3, r4
 80071dc:	f083 0301 	eor.w	r3, r3, #1
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <_ftoa+0x2ea>
 80071e6:	f04f 0200 	mov.w	r2, #0
 80071ea:	4b72      	ldr	r3, [pc, #456]	; (80073b4 <_ftoa+0x4a4>)
 80071ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80071f0:	f7f9 fc6e 	bl	8000ad0 <__aeabi_dcmpgt>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d04c      	beq.n	8007294 <_ftoa+0x384>
 80071fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	d069      	beq.n	80072d8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8007204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007206:	3301      	adds	r3, #1
 8007208:	64fb      	str	r3, [r7, #76]	; 0x4c
 800720a:	e065      	b.n	80072d8 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 800720c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800720e:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8007210:	e01f      	b.n	8007252 <_ftoa+0x342>
      --count;
 8007212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007214:	3b01      	subs	r3, #1
 8007216:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8007218:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800721a:	4b67      	ldr	r3, [pc, #412]	; (80073b8 <_ftoa+0x4a8>)
 800721c:	fba3 2301 	umull	r2, r3, r3, r1
 8007220:	08da      	lsrs	r2, r3, #3
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	1aca      	subs	r2, r1, r3
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007230:	1c59      	adds	r1, r3, #1
 8007232:	6579      	str	r1, [r7, #84]	; 0x54
 8007234:	3230      	adds	r2, #48	; 0x30
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	3358      	adds	r3, #88	; 0x58
 800723a:	443b      	add	r3, r7
 800723c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8007240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007242:	4a5d      	ldr	r2, [pc, #372]	; (80073b8 <_ftoa+0x4a8>)
 8007244:	fba2 2303 	umull	r2, r3, r2, r3
 8007248:	08db      	lsrs	r3, r3, #3
 800724a:	64bb      	str	r3, [r7, #72]	; 0x48
 800724c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8007252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007254:	2b1f      	cmp	r3, #31
 8007256:	d9dc      	bls.n	8007212 <_ftoa+0x302>
 8007258:	e009      	b.n	800726e <_ftoa+0x35e>
        break;
 800725a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800725c:	e007      	b.n	800726e <_ftoa+0x35e>
      buf[len++] = '0';
 800725e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	657a      	str	r2, [r7, #84]	; 0x54
 8007264:	3358      	adds	r3, #88	; 0x58
 8007266:	443b      	add	r3, r7
 8007268:	2230      	movs	r2, #48	; 0x30
 800726a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800726e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007270:	2b1f      	cmp	r3, #31
 8007272:	d804      	bhi.n	800727e <_ftoa+0x36e>
 8007274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007276:	1e5a      	subs	r2, r3, #1
 8007278:	647a      	str	r2, [r7, #68]	; 0x44
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1ef      	bne.n	800725e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800727e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007280:	2b1f      	cmp	r3, #31
 8007282:	d829      	bhi.n	80072d8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8007284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	657a      	str	r2, [r7, #84]	; 0x54
 800728a:	3358      	adds	r3, #88	; 0x58
 800728c:	443b      	add	r3, r7
 800728e:	222e      	movs	r2, #46	; 0x2e
 8007290:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8007294:	e020      	b.n	80072d8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8007296:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007298:	4b48      	ldr	r3, [pc, #288]	; (80073bc <_ftoa+0x4ac>)
 800729a:	fb83 1302 	smull	r1, r3, r3, r2
 800729e:	1099      	asrs	r1, r3, #2
 80072a0:	17d3      	asrs	r3, r2, #31
 80072a2:	1ac9      	subs	r1, r1, r3
 80072a4:	460b      	mov	r3, r1
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	1ad1      	subs	r1, r2, r3
 80072ae:	b2ca      	uxtb	r2, r1
 80072b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b2:	1c59      	adds	r1, r3, #1
 80072b4:	6579      	str	r1, [r7, #84]	; 0x54
 80072b6:	3230      	adds	r2, #48	; 0x30
 80072b8:	b2d2      	uxtb	r2, r2
 80072ba:	3358      	adds	r3, #88	; 0x58
 80072bc:	443b      	add	r3, r7
 80072be:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80072c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c4:	4a3d      	ldr	r2, [pc, #244]	; (80073bc <_ftoa+0x4ac>)
 80072c6:	fb82 1203 	smull	r1, r2, r2, r3
 80072ca:	1092      	asrs	r2, r2, #2
 80072cc:	17db      	asrs	r3, r3, #31
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80072d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072da:	2b1f      	cmp	r3, #31
 80072dc:	d9db      	bls.n	8007296 <_ftoa+0x386>
 80072de:	e000      	b.n	80072e2 <_ftoa+0x3d2>
      break;
 80072e0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80072e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d123      	bne.n	8007334 <_ftoa+0x424>
 80072ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d01e      	beq.n	8007334 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80072f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d014      	beq.n	8007326 <_ftoa+0x416>
 80072fc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007300:	2b00      	cmp	r3, #0
 8007302:	d104      	bne.n	800730e <_ftoa+0x3fe>
 8007304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007306:	f003 030c 	and.w	r3, r3, #12
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <_ftoa+0x416>
      width--;
 800730e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007310:	3b01      	subs	r3, #1
 8007312:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8007314:	e007      	b.n	8007326 <_ftoa+0x416>
      buf[len++] = '0';
 8007316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	657a      	str	r2, [r7, #84]	; 0x54
 800731c:	3358      	adds	r3, #88	; 0x58
 800731e:	443b      	add	r3, r7
 8007320:	2230      	movs	r2, #48	; 0x30
 8007322:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8007326:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800732a:	429a      	cmp	r2, r3
 800732c:	d202      	bcs.n	8007334 <_ftoa+0x424>
 800732e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007330:	2b1f      	cmp	r3, #31
 8007332:	d9f0      	bls.n	8007316 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8007334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007336:	2b1f      	cmp	r3, #31
 8007338:	d827      	bhi.n	800738a <_ftoa+0x47a>
    if (negative) {
 800733a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800733e:	2b00      	cmp	r3, #0
 8007340:	d008      	beq.n	8007354 <_ftoa+0x444>
      buf[len++] = '-';
 8007342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	657a      	str	r2, [r7, #84]	; 0x54
 8007348:	3358      	adds	r3, #88	; 0x58
 800734a:	443b      	add	r3, r7
 800734c:	222d      	movs	r2, #45	; 0x2d
 800734e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8007352:	e01a      	b.n	800738a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8007354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b00      	cmp	r3, #0
 800735c:	d008      	beq.n	8007370 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800735e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	657a      	str	r2, [r7, #84]	; 0x54
 8007364:	3358      	adds	r3, #88	; 0x58
 8007366:	443b      	add	r3, r7
 8007368:	222b      	movs	r2, #43	; 0x2b
 800736a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800736e:	e00c      	b.n	800738a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8007370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d007      	beq.n	800738a <_ftoa+0x47a>
      buf[len++] = ' ';
 800737a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	657a      	str	r2, [r7, #84]	; 0x54
 8007380:	3358      	adds	r3, #88	; 0x58
 8007382:	443b      	add	r3, r7
 8007384:	2220      	movs	r2, #32
 8007386:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800738a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800738c:	9303      	str	r3, [sp, #12]
 800738e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007390:	9302      	str	r3, [sp, #8]
 8007392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	f107 0310 	add.w	r3, r7, #16
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f7ff fbb3 	bl	8006b0e <_out_rev>
 80073a8:	4603      	mov	r3, r0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	375c      	adds	r7, #92	; 0x5c
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd90      	pop	{r4, r7, pc}
 80073b2:	bf00      	nop
 80073b4:	3fe00000 	.word	0x3fe00000
 80073b8:	cccccccd 	.word	0xcccccccd
 80073bc:	66666667 	.word	0x66666667

080073c0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	b09d      	sub	sp, #116	; 0x74
 80073c6:	af06      	add	r7, sp, #24
 80073c8:	61f8      	str	r0, [r7, #28]
 80073ca:	61b9      	str	r1, [r7, #24]
 80073cc:	617a      	str	r2, [r7, #20]
 80073ce:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80073d0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80073d4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80073d8:	f7f9 fb52 	bl	8000a80 <__aeabi_dcmpeq>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d014      	beq.n	800740c <_etoa+0x4c>
 80073e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073e6:	4bc4      	ldr	r3, [pc, #784]	; (80076f8 <_etoa+0x338>)
 80073e8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80073ec:	f7f9 fb70 	bl	8000ad0 <__aeabi_dcmpgt>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10a      	bne.n	800740c <_etoa+0x4c>
 80073f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073fa:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80073fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007402:	f7f9 fb47 	bl	8000a94 <__aeabi_dcmplt>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d014      	beq.n	8007436 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800740c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007410:	9304      	str	r3, [sp, #16]
 8007412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007416:	9303      	str	r3, [sp, #12]
 8007418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800741c:	9302      	str	r3, [sp, #8]
 800741e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007422:	e9cd 2300 	strd	r2, r3, [sp]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	69b9      	ldr	r1, [r7, #24]
 800742c:	69f8      	ldr	r0, [r7, #28]
 800742e:	f7ff fd6f 	bl	8006f10 <_ftoa>
 8007432:	4603      	mov	r3, r0
 8007434:	e247      	b.n	80078c6 <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 8007436:	2301      	movs	r3, #1
 8007438:	461e      	mov	r6, r3
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007446:	f7f9 fb25 	bl	8000a94 <__aeabi_dcmplt>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <_etoa+0x94>
 8007450:	2300      	movs	r3, #0
 8007452:	461e      	mov	r6, r3
 8007454:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8007458:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00b      	beq.n	8007478 <_etoa+0xb8>
    value = -value;
 8007460:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007464:	603b      	str	r3, [r7, #0]
 8007466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800746a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800746e:	607b      	str	r3, [r7, #4]
 8007470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007474:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8007478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800747c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007480:	2b00      	cmp	r3, #0
 8007482:	d102      	bne.n	800748a <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8007484:	2306      	movs	r3, #6
 8007486:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800748a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800748e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8007492:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007496:	f04f 0200 	mov.w	r2, #0
 800749a:	f04f 0300 	mov.w	r3, #0
 800749e:	0d0a      	lsrs	r2, r1, #20
 80074a0:	2300      	movs	r3, #0
 80074a2:	4613      	mov	r3, r2
 80074a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80074ac:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80074ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074b2:	4690      	mov	r8, r2
 80074b4:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80074b8:	4644      	mov	r4, r8
 80074ba:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 80074be:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80074c2:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80074c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80074c8:	f7f9 f808 	bl	80004dc <__aeabi_i2d>
 80074cc:	a37e      	add	r3, pc, #504	; (adr r3, 80076c8 <_etoa+0x308>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	f7f9 f86d 	bl	80005b0 <__aeabi_dmul>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4610      	mov	r0, r2
 80074dc:	4619      	mov	r1, r3
 80074de:	a37c      	add	r3, pc, #496	; (adr r3, 80076d0 <_etoa+0x310>)
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f7f8 feae 	bl	8000244 <__adddf3>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4614      	mov	r4, r2
 80074ee:	461d      	mov	r5, r3
 80074f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80074f4:	f04f 0200 	mov.w	r2, #0
 80074f8:	4b80      	ldr	r3, [pc, #512]	; (80076fc <_etoa+0x33c>)
 80074fa:	f7f8 fea1 	bl	8000240 <__aeabi_dsub>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4610      	mov	r0, r2
 8007504:	4619      	mov	r1, r3
 8007506:	a374      	add	r3, pc, #464	; (adr r3, 80076d8 <_etoa+0x318>)
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	f7f9 f850 	bl	80005b0 <__aeabi_dmul>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4620      	mov	r0, r4
 8007516:	4629      	mov	r1, r5
 8007518:	f7f8 fe94 	bl	8000244 <__adddf3>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4610      	mov	r0, r2
 8007522:	4619      	mov	r1, r3
 8007524:	f7f9 fade 	bl	8000ae4 <__aeabi_d2iz>
 8007528:	4603      	mov	r3, r0
 800752a:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800752c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800752e:	f7f8 ffd5 	bl	80004dc <__aeabi_i2d>
 8007532:	a36b      	add	r3, pc, #428	; (adr r3, 80076e0 <_etoa+0x320>)
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	f7f9 f83a 	bl	80005b0 <__aeabi_dmul>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4610      	mov	r0, r2
 8007542:	4619      	mov	r1, r3
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	4b6d      	ldr	r3, [pc, #436]	; (8007700 <_etoa+0x340>)
 800754a:	f7f8 fe7b 	bl	8000244 <__adddf3>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4610      	mov	r0, r2
 8007554:	4619      	mov	r1, r3
 8007556:	f7f9 fac5 	bl	8000ae4 <__aeabi_d2iz>
 800755a:	4603      	mov	r3, r0
 800755c:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800755e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007560:	f7f8 ffbc 	bl	80004dc <__aeabi_i2d>
 8007564:	a360      	add	r3, pc, #384	; (adr r3, 80076e8 <_etoa+0x328>)
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	f7f9 f821 	bl	80005b0 <__aeabi_dmul>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4614      	mov	r4, r2
 8007574:	461d      	mov	r5, r3
 8007576:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007578:	f7f8 ffb0 	bl	80004dc <__aeabi_i2d>
 800757c:	a35c      	add	r3, pc, #368	; (adr r3, 80076f0 <_etoa+0x330>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f7f9 f815 	bl	80005b0 <__aeabi_dmul>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4620      	mov	r0, r4
 800758c:	4629      	mov	r1, r5
 800758e:	f7f8 fe57 	bl	8000240 <__aeabi_dsub>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 800759a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800759e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80075a2:	f7f9 f805 	bl	80005b0 <__aeabi_dmul>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80075ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075b0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80075b4:	17da      	asrs	r2, r3, #31
 80075b6:	469a      	mov	sl, r3
 80075b8:	4693      	mov	fp, r2
 80075ba:	f04f 0200 	mov.w	r2, #0
 80075be:	f04f 0300 	mov.w	r3, #0
 80075c2:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80075c6:	2200      	movs	r2, #0
 80075c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80075cc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80075d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	f7f8 fe34 	bl	8000244 <__adddf3>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4690      	mov	r8, r2
 80075e2:	4699      	mov	r9, r3
 80075e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075e8:	f04f 0000 	mov.w	r0, #0
 80075ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80075f0:	f7f8 fe26 	bl	8000240 <__aeabi_dsub>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4692      	mov	sl, r2
 80075fa:	469b      	mov	fp, r3
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	4b40      	ldr	r3, [pc, #256]	; (8007704 <_etoa+0x344>)
 8007602:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007606:	f7f9 f8fd 	bl	8000804 <__aeabi_ddiv>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4610      	mov	r0, r2
 8007610:	4619      	mov	r1, r3
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	4b3c      	ldr	r3, [pc, #240]	; (8007708 <_etoa+0x348>)
 8007618:	f7f8 fe14 	bl	8000244 <__adddf3>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007624:	f7f9 f8ee 	bl	8000804 <__aeabi_ddiv>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	4610      	mov	r0, r2
 800762e:	4619      	mov	r1, r3
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	4b35      	ldr	r3, [pc, #212]	; (800770c <_etoa+0x34c>)
 8007636:	f7f8 fe05 	bl	8000244 <__adddf3>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007642:	f7f9 f8df 	bl	8000804 <__aeabi_ddiv>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4650      	mov	r0, sl
 800764c:	4659      	mov	r1, fp
 800764e:	f7f8 fdf9 	bl	8000244 <__adddf3>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4640      	mov	r0, r8
 8007658:	4649      	mov	r1, r9
 800765a:	f7f9 f8d3 	bl	8000804 <__aeabi_ddiv>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4610      	mov	r0, r2
 8007664:	4619      	mov	r1, r3
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	4b29      	ldr	r3, [pc, #164]	; (8007710 <_etoa+0x350>)
 800766c:	f7f8 fdea 	bl	8000244 <__adddf3>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4620      	mov	r0, r4
 8007676:	4629      	mov	r1, r5
 8007678:	f7f8 ff9a 	bl	80005b0 <__aeabi_dmul>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8007684:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007688:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800768c:	f7f9 fa02 	bl	8000a94 <__aeabi_dcmplt>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00d      	beq.n	80076b2 <_etoa+0x2f2>
    expval--;
 8007696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007698:	3b01      	subs	r3, #1
 800769a:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 800769c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80076a0:	f04f 0200 	mov.w	r2, #0
 80076a4:	4b18      	ldr	r3, [pc, #96]	; (8007708 <_etoa+0x348>)
 80076a6:	f7f9 f8ad 	bl	8000804 <__aeabi_ddiv>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80076b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076b4:	2b63      	cmp	r3, #99	; 0x63
 80076b6:	dc2d      	bgt.n	8007714 <_etoa+0x354>
 80076b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ba:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80076be:	db29      	blt.n	8007714 <_etoa+0x354>
 80076c0:	2304      	movs	r3, #4
 80076c2:	e028      	b.n	8007716 <_etoa+0x356>
 80076c4:	f3af 8000 	nop.w
 80076c8:	509f79fb 	.word	0x509f79fb
 80076cc:	3fd34413 	.word	0x3fd34413
 80076d0:	8b60c8b3 	.word	0x8b60c8b3
 80076d4:	3fc68a28 	.word	0x3fc68a28
 80076d8:	636f4361 	.word	0x636f4361
 80076dc:	3fd287a7 	.word	0x3fd287a7
 80076e0:	0979a371 	.word	0x0979a371
 80076e4:	400a934f 	.word	0x400a934f
 80076e8:	bbb55516 	.word	0xbbb55516
 80076ec:	40026bb1 	.word	0x40026bb1
 80076f0:	fefa39ef 	.word	0xfefa39ef
 80076f4:	3fe62e42 	.word	0x3fe62e42
 80076f8:	7fefffff 	.word	0x7fefffff
 80076fc:	3ff80000 	.word	0x3ff80000
 8007700:	3fe00000 	.word	0x3fe00000
 8007704:	402c0000 	.word	0x402c0000
 8007708:	40240000 	.word	0x40240000
 800770c:	40180000 	.word	0x40180000
 8007710:	3ff00000 	.word	0x3ff00000
 8007714:	2305      	movs	r3, #5
 8007716:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8007718:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800771c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007720:	2b00      	cmp	r3, #0
 8007722:	d03d      	beq.n	80077a0 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8007724:	a36a      	add	r3, pc, #424	; (adr r3, 80078d0 <_etoa+0x510>)
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800772e:	f7f9 f9c5 	bl	8000abc <__aeabi_dcmpge>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d024      	beq.n	8007782 <_etoa+0x3c2>
 8007738:	a367      	add	r3, pc, #412	; (adr r3, 80078d8 <_etoa+0x518>)
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007742:	f7f9 f9a7 	bl	8000a94 <__aeabi_dcmplt>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01a      	beq.n	8007782 <_etoa+0x3c2>
      if ((int)prec > expval) {
 800774c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007750:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007752:	429a      	cmp	r2, r3
 8007754:	da07      	bge.n	8007766 <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 8007756:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800775a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007764:	e002      	b.n	800776c <_etoa+0x3ac>
      }
      else {
        prec = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800776c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007770:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007774:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	657b      	str	r3, [r7, #84]	; 0x54
 8007780:	e00e      	b.n	80077a0 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8007782:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <_etoa+0x3e0>
 800778a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800778e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <_etoa+0x3e0>
        --prec;
 8007796:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800779a:	3b01      	subs	r3, #1
 800779c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80077a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 80077a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80077aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d904      	bls.n	80077ba <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80077b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077b8:	e001      	b.n	80077be <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80077be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d004      	beq.n	80077d4 <_etoa+0x414>
 80077ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 80077d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d009      	beq.n	80077ee <_etoa+0x42e>
    value /= conv.F;
 80077da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80077e2:	f7f9 f80f 	bl	8000804 <__aeabi_ddiv>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80077f2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d008      	beq.n	800780c <_etoa+0x44c>
 80077fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077fe:	60bb      	str	r3, [r7, #8]
 8007800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007804:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	e003      	b.n	8007814 <_etoa+0x454>
 800780c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8007810:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8007814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800781c:	9304      	str	r3, [sp, #16]
 800781e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007820:	9303      	str	r3, [sp, #12]
 8007822:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007826:	9302      	str	r3, [sp, #8]
 8007828:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800782c:	e9cd 3400 	strd	r3, r4, [sp]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	69b9      	ldr	r1, [r7, #24]
 8007836:	69f8      	ldr	r0, [r7, #28]
 8007838:	f7ff fb6a 	bl	8006f10 <_ftoa>
 800783c:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800783e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007840:	2b00      	cmp	r3, #0
 8007842:	d03f      	beq.n	80078c4 <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8007844:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <_etoa+0x494>
 8007850:	2045      	movs	r0, #69	; 0x45
 8007852:	e000      	b.n	8007856 <_etoa+0x496>
 8007854:	2065      	movs	r0, #101	; 0x65
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	1c53      	adds	r3, r2, #1
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	69fc      	ldr	r4, [r7, #28]
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	69b9      	ldr	r1, [r7, #24]
 8007862:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8007864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007866:	2b00      	cmp	r3, #0
 8007868:	bfb8      	it	lt
 800786a:	425b      	neglt	r3, r3
 800786c:	4618      	mov	r0, r3
 800786e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007870:	0fdb      	lsrs	r3, r3, #31
 8007872:	b2db      	uxtb	r3, r3
 8007874:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007876:	3a01      	subs	r2, #1
 8007878:	2105      	movs	r1, #5
 800787a:	9105      	str	r1, [sp, #20]
 800787c:	9204      	str	r2, [sp, #16]
 800787e:	2200      	movs	r2, #0
 8007880:	9203      	str	r2, [sp, #12]
 8007882:	220a      	movs	r2, #10
 8007884:	9202      	str	r2, [sp, #8]
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	9000      	str	r0, [sp, #0]
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	69b9      	ldr	r1, [r7, #24]
 8007890:	69f8      	ldr	r0, [r7, #28]
 8007892:	f7ff fa68 	bl	8006d66 <_ntoa_long>
 8007896:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8007898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00f      	beq.n	80078c4 <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80078a4:	e007      	b.n	80078b6 <_etoa+0x4f6>
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	1c53      	adds	r3, r2, #1
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	69fc      	ldr	r4, [r7, #28]
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	69b9      	ldr	r1, [r7, #24]
 80078b2:	2020      	movs	r0, #32
 80078b4:	47a0      	blx	r4
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d8f0      	bhi.n	80078a6 <_etoa+0x4e6>
    }
  }
  return idx;
 80078c4:	697b      	ldr	r3, [r7, #20]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	375c      	adds	r7, #92	; 0x5c
 80078ca:	46bd      	mov	sp, r7
 80078cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d0:	eb1c432d 	.word	0xeb1c432d
 80078d4:	3f1a36e2 	.word	0x3f1a36e2
 80078d8:	00000000 	.word	0x00000000
 80078dc:	412e8480 	.word	0x412e8480

080078e0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80078e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	b0a3      	sub	sp, #140	; 0x8c
 80078e6:	af0a      	add	r7, sp, #40	; 0x28
 80078e8:	6178      	str	r0, [r7, #20]
 80078ea:	6139      	str	r1, [r7, #16]
 80078ec:	60fa      	str	r2, [r7, #12]
 80078ee:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f040 84ba 	bne.w	8008270 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 80078fc:	4ba3      	ldr	r3, [pc, #652]	; (8007b8c <_vsnprintf+0x2ac>)
 80078fe:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8007900:	f000 bcb6 	b.w	8008270 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b25      	cmp	r3, #37	; 0x25
 800790a:	d00d      	beq.n	8007928 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	7818      	ldrb	r0, [r3, #0]
 8007910:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007912:	1c53      	adds	r3, r2, #1
 8007914:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007916:	697c      	ldr	r4, [r7, #20]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6939      	ldr	r1, [r7, #16]
 800791c:	47a0      	blx	r4
      format++;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	3301      	adds	r3, #1
 8007922:	60bb      	str	r3, [r7, #8]
      continue;
 8007924:	f000 bca4 	b.w	8008270 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	3301      	adds	r3, #1
 800792c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	3b20      	subs	r3, #32
 8007938:	2b10      	cmp	r3, #16
 800793a:	d857      	bhi.n	80079ec <_vsnprintf+0x10c>
 800793c:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <_vsnprintf+0x64>)
 800793e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007942:	bf00      	nop
 8007944:	080079c5 	.word	0x080079c5
 8007948:	080079ed 	.word	0x080079ed
 800794c:	080079ed 	.word	0x080079ed
 8007950:	080079d9 	.word	0x080079d9
 8007954:	080079ed 	.word	0x080079ed
 8007958:	080079ed 	.word	0x080079ed
 800795c:	080079ed 	.word	0x080079ed
 8007960:	080079ed 	.word	0x080079ed
 8007964:	080079ed 	.word	0x080079ed
 8007968:	080079ed 	.word	0x080079ed
 800796c:	080079ed 	.word	0x080079ed
 8007970:	080079b1 	.word	0x080079b1
 8007974:	080079ed 	.word	0x080079ed
 8007978:	0800799d 	.word	0x0800799d
 800797c:	080079ed 	.word	0x080079ed
 8007980:	080079ed 	.word	0x080079ed
 8007984:	08007989 	.word	0x08007989
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8007988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800798a:	f043 0301 	orr.w	r3, r3, #1
 800798e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	3301      	adds	r3, #1
 8007994:	60bb      	str	r3, [r7, #8]
 8007996:	2301      	movs	r3, #1
 8007998:	653b      	str	r3, [r7, #80]	; 0x50
 800799a:	e02a      	b.n	80079f2 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800799c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800799e:	f043 0302 	orr.w	r3, r3, #2
 80079a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	3301      	adds	r3, #1
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	2301      	movs	r3, #1
 80079ac:	653b      	str	r3, [r7, #80]	; 0x50
 80079ae:	e020      	b.n	80079f2 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80079b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079b2:	f043 0304 	orr.w	r3, r3, #4
 80079b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	3301      	adds	r3, #1
 80079bc:	60bb      	str	r3, [r7, #8]
 80079be:	2301      	movs	r3, #1
 80079c0:	653b      	str	r3, [r7, #80]	; 0x50
 80079c2:	e016      	b.n	80079f2 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80079c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079c6:	f043 0308 	orr.w	r3, r3, #8
 80079ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	3301      	adds	r3, #1
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	2301      	movs	r3, #1
 80079d4:	653b      	str	r3, [r7, #80]	; 0x50
 80079d6:	e00c      	b.n	80079f2 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80079d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079da:	f043 0310 	orr.w	r3, r3, #16
 80079de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	3301      	adds	r3, #1
 80079e4:	60bb      	str	r3, [r7, #8]
 80079e6:	2301      	movs	r3, #1
 80079e8:	653b      	str	r3, [r7, #80]	; 0x50
 80079ea:	e002      	b.n	80079f2 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80079ec:	2300      	movs	r3, #0
 80079ee:	653b      	str	r3, [r7, #80]	; 0x50
 80079f0:	bf00      	nop
      }
    } while (n);
 80079f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d19c      	bne.n	8007932 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff f84a 	bl	8006a9a <_is_digit>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d006      	beq.n	8007a1a <_vsnprintf+0x13a>
      width = _atoi(&format);
 8007a0c:	f107 0308 	add.w	r3, r7, #8
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff f858 	bl	8006ac6 <_atoi>
 8007a16:	65b8      	str	r0, [r7, #88]	; 0x58
 8007a18:	e01a      	b.n	8007a50 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a20:	d116      	bne.n	8007a50 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8007a22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a26:	1d1a      	adds	r2, r3, #4
 8007a28:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8007a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	da07      	bge.n	8007a46 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8007a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a38:	f043 0302 	orr.w	r3, r3, #2
 8007a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a40:	425b      	negs	r3, r3
 8007a42:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a44:	e001      	b.n	8007a4a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b2e      	cmp	r3, #46	; 0x2e
 8007a5a:	d127      	bne.n	8007aac <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8007a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a62:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff f813 	bl	8006a9a <_is_digit>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d006      	beq.n	8007a88 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8007a7a:	f107 0308 	add.w	r3, r7, #8
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff f821 	bl	8006ac6 <_atoi>
 8007a84:	6578      	str	r0, [r7, #84]	; 0x54
 8007a86:	e011      	b.n	8007aac <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a8e:	d10d      	bne.n	8007aac <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8007a90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a94:	1d1a      	adds	r2, r3, #4
 8007a96:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007aa4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	3b68      	subs	r3, #104	; 0x68
 8007ab2:	2b12      	cmp	r3, #18
 8007ab4:	d866      	bhi.n	8007b84 <_vsnprintf+0x2a4>
 8007ab6:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <_vsnprintf+0x1dc>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007b2f 	.word	0x08007b2f
 8007ac0:	08007b85 	.word	0x08007b85
 8007ac4:	08007b65 	.word	0x08007b65
 8007ac8:	08007b85 	.word	0x08007b85
 8007acc:	08007b09 	.word	0x08007b09
 8007ad0:	08007b85 	.word	0x08007b85
 8007ad4:	08007b85 	.word	0x08007b85
 8007ad8:	08007b85 	.word	0x08007b85
 8007adc:	08007b85 	.word	0x08007b85
 8007ae0:	08007b85 	.word	0x08007b85
 8007ae4:	08007b85 	.word	0x08007b85
 8007ae8:	08007b85 	.word	0x08007b85
 8007aec:	08007b55 	.word	0x08007b55
 8007af0:	08007b85 	.word	0x08007b85
 8007af4:	08007b85 	.word	0x08007b85
 8007af8:	08007b85 	.word	0x08007b85
 8007afc:	08007b85 	.word	0x08007b85
 8007b00:	08007b85 	.word	0x08007b85
 8007b04:	08007b75 	.word	0x08007b75
      case 'l' :
        flags |= FLAGS_LONG;
 8007b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	3301      	adds	r3, #1
 8007b14:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b6c      	cmp	r3, #108	; 0x6c
 8007b1c:	d134      	bne.n	8007b88 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8007b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b24:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	60bb      	str	r3, [r7, #8]
        }
        break;
 8007b2c:	e02c      	b.n	8007b88 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8007b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b34:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	2b68      	cmp	r3, #104	; 0x68
 8007b42:	d125      	bne.n	8007b90 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8007b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60bb      	str	r3, [r7, #8]
        }
        break;
 8007b52:	e01d      	b.n	8007b90 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8007b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	60bb      	str	r3, [r7, #8]
        break;
 8007b62:	e016      	b.n	8007b92 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8007b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60bb      	str	r3, [r7, #8]
        break;
 8007b72:	e00e      	b.n	8007b92 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8007b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	60bb      	str	r3, [r7, #8]
        break;
 8007b82:	e006      	b.n	8007b92 <_vsnprintf+0x2b2>
      default :
        break;
 8007b84:	bf00      	nop
 8007b86:	e004      	b.n	8007b92 <_vsnprintf+0x2b2>
        break;
 8007b88:	bf00      	nop
 8007b8a:	e002      	b.n	8007b92 <_vsnprintf+0x2b2>
 8007b8c:	08006a49 	.word	0x08006a49
        break;
 8007b90:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	3b25      	subs	r3, #37	; 0x25
 8007b98:	2b53      	cmp	r3, #83	; 0x53
 8007b9a:	f200 835c 	bhi.w	8008256 <_vsnprintf+0x976>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <_vsnprintf+0x2c4>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	0800823f 	.word	0x0800823f
 8007ba8:	08008257 	.word	0x08008257
 8007bac:	08008257 	.word	0x08008257
 8007bb0:	08008257 	.word	0x08008257
 8007bb4:	08008257 	.word	0x08008257
 8007bb8:	08008257 	.word	0x08008257
 8007bbc:	08008257 	.word	0x08008257
 8007bc0:	08008257 	.word	0x08008257
 8007bc4:	08008257 	.word	0x08008257
 8007bc8:	08008257 	.word	0x08008257
 8007bcc:	08008257 	.word	0x08008257
 8007bd0:	08008257 	.word	0x08008257
 8007bd4:	08008257 	.word	0x08008257
 8007bd8:	08008257 	.word	0x08008257
 8007bdc:	08008257 	.word	0x08008257
 8007be0:	08008257 	.word	0x08008257
 8007be4:	08008257 	.word	0x08008257
 8007be8:	08008257 	.word	0x08008257
 8007bec:	08008257 	.word	0x08008257
 8007bf0:	08008257 	.word	0x08008257
 8007bf4:	08008257 	.word	0x08008257
 8007bf8:	08008257 	.word	0x08008257
 8007bfc:	08008257 	.word	0x08008257
 8007c00:	08008257 	.word	0x08008257
 8007c04:	08008257 	.word	0x08008257
 8007c08:	08008257 	.word	0x08008257
 8007c0c:	08008257 	.word	0x08008257
 8007c10:	08008257 	.word	0x08008257
 8007c14:	08008257 	.word	0x08008257
 8007c18:	08008257 	.word	0x08008257
 8007c1c:	08008257 	.word	0x08008257
 8007c20:	08008257 	.word	0x08008257
 8007c24:	08007ff7 	.word	0x08007ff7
 8007c28:	08007fab 	.word	0x08007fab
 8007c2c:	08007ff7 	.word	0x08007ff7
 8007c30:	08008257 	.word	0x08008257
 8007c34:	08008257 	.word	0x08008257
 8007c38:	08008257 	.word	0x08008257
 8007c3c:	08008257 	.word	0x08008257
 8007c40:	08008257 	.word	0x08008257
 8007c44:	08008257 	.word	0x08008257
 8007c48:	08008257 	.word	0x08008257
 8007c4c:	08008257 	.word	0x08008257
 8007c50:	08008257 	.word	0x08008257
 8007c54:	08008257 	.word	0x08008257
 8007c58:	08008257 	.word	0x08008257
 8007c5c:	08008257 	.word	0x08008257
 8007c60:	08008257 	.word	0x08008257
 8007c64:	08008257 	.word	0x08008257
 8007c68:	08008257 	.word	0x08008257
 8007c6c:	08008257 	.word	0x08008257
 8007c70:	08007cf5 	.word	0x08007cf5
 8007c74:	08008257 	.word	0x08008257
 8007c78:	08008257 	.word	0x08008257
 8007c7c:	08008257 	.word	0x08008257
 8007c80:	08008257 	.word	0x08008257
 8007c84:	08008257 	.word	0x08008257
 8007c88:	08008257 	.word	0x08008257
 8007c8c:	08008257 	.word	0x08008257
 8007c90:	08008257 	.word	0x08008257
 8007c94:	08008257 	.word	0x08008257
 8007c98:	08007cf5 	.word	0x08007cf5
 8007c9c:	08008063 	.word	0x08008063
 8007ca0:	08007cf5 	.word	0x08007cf5
 8007ca4:	08007ff7 	.word	0x08007ff7
 8007ca8:	08007fab 	.word	0x08007fab
 8007cac:	08007ff7 	.word	0x08007ff7
 8007cb0:	08008257 	.word	0x08008257
 8007cb4:	08007cf5 	.word	0x08007cf5
 8007cb8:	08008257 	.word	0x08008257
 8007cbc:	08008257 	.word	0x08008257
 8007cc0:	08008257 	.word	0x08008257
 8007cc4:	08008257 	.word	0x08008257
 8007cc8:	08008257 	.word	0x08008257
 8007ccc:	08007cf5 	.word	0x08007cf5
 8007cd0:	080081a3 	.word	0x080081a3
 8007cd4:	08008257 	.word	0x08008257
 8007cd8:	08008257 	.word	0x08008257
 8007cdc:	080080db 	.word	0x080080db
 8007ce0:	08008257 	.word	0x08008257
 8007ce4:	08007cf5 	.word	0x08007cf5
 8007ce8:	08008257 	.word	0x08008257
 8007cec:	08008257 	.word	0x08008257
 8007cf0:	08007cf5 	.word	0x08007cf5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	2b78      	cmp	r3, #120	; 0x78
 8007cfa:	d003      	beq.n	8007d04 <_vsnprintf+0x424>
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b58      	cmp	r3, #88	; 0x58
 8007d02:	d102      	bne.n	8007d0a <_vsnprintf+0x42a>
          base = 16U;
 8007d04:	2310      	movs	r3, #16
 8007d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d08:	e013      	b.n	8007d32 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2b6f      	cmp	r3, #111	; 0x6f
 8007d10:	d102      	bne.n	8007d18 <_vsnprintf+0x438>
          base =  8U;
 8007d12:	2308      	movs	r3, #8
 8007d14:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d16:	e00c      	b.n	8007d32 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b62      	cmp	r3, #98	; 0x62
 8007d1e:	d102      	bne.n	8007d26 <_vsnprintf+0x446>
          base =  2U;
 8007d20:	2302      	movs	r3, #2
 8007d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d24:	e005      	b.n	8007d32 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8007d26:	230a      	movs	r3, #10
 8007d28:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8007d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d2c:	f023 0310 	bic.w	r3, r3, #16
 8007d30:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b58      	cmp	r3, #88	; 0x58
 8007d38:	d103      	bne.n	8007d42 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8007d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d3c:	f043 0320 	orr.w	r3, r3, #32
 8007d40:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b69      	cmp	r3, #105	; 0x69
 8007d48:	d007      	beq.n	8007d5a <_vsnprintf+0x47a>
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	2b64      	cmp	r3, #100	; 0x64
 8007d50:	d003      	beq.n	8007d5a <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8007d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d54:	f023 030c 	bic.w	r3, r3, #12
 8007d58:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8007d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d003      	beq.n	8007d6c <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8007d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d66:	f023 0301 	bic.w	r3, r3, #1
 8007d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b69      	cmp	r3, #105	; 0x69
 8007d72:	d004      	beq.n	8007d7e <_vsnprintf+0x49e>
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b64      	cmp	r3, #100	; 0x64
 8007d7a:	f040 8098 	bne.w	8007eae <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8007d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d031      	beq.n	8007dec <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8007d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d8c:	3307      	adds	r3, #7
 8007d8e:	f023 0307 	bic.w	r3, r3, #7
 8007d92:	f103 0208 	add.w	r2, r3, #8
 8007d96:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8007da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	da06      	bge.n	8007db8 <_vsnprintf+0x4d8>
 8007daa:	2100      	movs	r1, #0
 8007dac:	f1d2 0800 	rsbs	r8, r2, #0
 8007db0:	eb61 0903 	sbc.w	r9, r1, r3
 8007db4:	4642      	mov	r2, r8
 8007db6:	464b      	mov	r3, r9
 8007db8:	69f9      	ldr	r1, [r7, #28]
 8007dba:	0fc9      	lsrs	r1, r1, #31
 8007dbc:	b2c9      	uxtb	r1, r1
 8007dbe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007dc0:	2400      	movs	r4, #0
 8007dc2:	4682      	mov	sl, r0
 8007dc4:	46a3      	mov	fp, r4
 8007dc6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007dc8:	9008      	str	r0, [sp, #32]
 8007dca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007dcc:	9007      	str	r0, [sp, #28]
 8007dce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007dd0:	9006      	str	r0, [sp, #24]
 8007dd2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8007dd6:	9102      	str	r1, [sp, #8]
 8007dd8:	e9cd 2300 	strd	r2, r3, [sp]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007de0:	6939      	ldr	r1, [r7, #16]
 8007de2:	6978      	ldr	r0, [r7, #20]
 8007de4:	f7ff f825 	bl	8006e32 <_ntoa_long_long>
 8007de8:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8007dea:	e0da      	b.n	8007fa2 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8007dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d020      	beq.n	8007e38 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8007df6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dfa:	1d1a      	adds	r2, r3, #4
 8007dfc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	bfb8      	it	lt
 8007e0a:	425b      	neglt	r3, r3
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	0fdb      	lsrs	r3, r3, #31
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e16:	9205      	str	r2, [sp, #20]
 8007e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e1a:	9204      	str	r2, [sp, #16]
 8007e1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e1e:	9203      	str	r2, [sp, #12]
 8007e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e22:	9202      	str	r2, [sp, #8]
 8007e24:	9301      	str	r3, [sp, #4]
 8007e26:	9100      	str	r1, [sp, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e2c:	6939      	ldr	r1, [r7, #16]
 8007e2e:	6978      	ldr	r0, [r7, #20]
 8007e30:	f7fe ff99 	bl	8006d66 <_ntoa_long>
 8007e34:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8007e36:	e0b4      	b.n	8007fa2 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8007e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d007      	beq.n	8007e52 <_vsnprintf+0x572>
 8007e42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e46:	1d1a      	adds	r2, r3, #4
 8007e48:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	e012      	b.n	8007e78 <_vsnprintf+0x598>
 8007e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <_vsnprintf+0x58c>
 8007e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e60:	1d1a      	adds	r2, r3, #4
 8007e62:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	b21b      	sxth	r3, r3
 8007e6a:	e005      	b.n	8007e78 <_vsnprintf+0x598>
 8007e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e70:	1d1a      	adds	r2, r3, #4
 8007e72:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bfb8      	it	lt
 8007e80:	425b      	neglt	r3, r3
 8007e82:	4619      	mov	r1, r3
 8007e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e86:	0fdb      	lsrs	r3, r3, #31
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e8c:	9205      	str	r2, [sp, #20]
 8007e8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e90:	9204      	str	r2, [sp, #16]
 8007e92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e94:	9203      	str	r2, [sp, #12]
 8007e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e98:	9202      	str	r2, [sp, #8]
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	9100      	str	r1, [sp, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ea2:	6939      	ldr	r1, [r7, #16]
 8007ea4:	6978      	ldr	r0, [r7, #20]
 8007ea6:	f7fe ff5e 	bl	8006d66 <_ntoa_long>
 8007eaa:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8007eac:	e079      	b.n	8007fa2 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8007eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d022      	beq.n	8007efe <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8007eb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ebc:	3307      	adds	r3, #7
 8007ebe:	f023 0307 	bic.w	r3, r3, #7
 8007ec2:	f103 0208 	add.w	r2, r3, #8
 8007ec6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	460d      	mov	r5, r1
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007ed8:	9108      	str	r1, [sp, #32]
 8007eda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007edc:	9107      	str	r1, [sp, #28]
 8007ede:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ee0:	9106      	str	r1, [sp, #24]
 8007ee2:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	9102      	str	r1, [sp, #8]
 8007eea:	e9cd 2300 	strd	r2, r3, [sp]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ef2:	6939      	ldr	r1, [r7, #16]
 8007ef4:	6978      	ldr	r0, [r7, #20]
 8007ef6:	f7fe ff9c 	bl	8006e32 <_ntoa_long_long>
 8007efa:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007efc:	e051      	b.n	8007fa2 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8007efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d018      	beq.n	8007f3a <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8007f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f0c:	1d1a      	adds	r2, r3, #4
 8007f0e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f16:	9205      	str	r2, [sp, #20]
 8007f18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f1a:	9204      	str	r2, [sp, #16]
 8007f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f1e:	9203      	str	r2, [sp, #12]
 8007f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f22:	9202      	str	r2, [sp, #8]
 8007f24:	2200      	movs	r2, #0
 8007f26:	9201      	str	r2, [sp, #4]
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f2e:	6939      	ldr	r1, [r7, #16]
 8007f30:	6978      	ldr	r0, [r7, #20]
 8007f32:	f7fe ff18 	bl	8006d66 <_ntoa_long>
 8007f36:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007f38:	e033      	b.n	8007fa2 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8007f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d007      	beq.n	8007f54 <_vsnprintf+0x674>
 8007f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f48:	1d1a      	adds	r2, r3, #4
 8007f4a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	e012      	b.n	8007f7a <_vsnprintf+0x69a>
 8007f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <_vsnprintf+0x68e>
 8007f5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f62:	1d1a      	adds	r2, r3, #4
 8007f64:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	e005      	b.n	8007f7a <_vsnprintf+0x69a>
 8007f6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f72:	1d1a      	adds	r2, r3, #4
 8007f74:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8007f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f7e:	9305      	str	r3, [sp, #20]
 8007f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f82:	9304      	str	r3, [sp, #16]
 8007f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f86:	9303      	str	r3, [sp, #12]
 8007f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f8a:	9302      	str	r3, [sp, #8]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f98:	6939      	ldr	r1, [r7, #16]
 8007f9a:	6978      	ldr	r0, [r7, #20]
 8007f9c:	f7fe fee3 	bl	8006d66 <_ntoa_long>
 8007fa0:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	60bb      	str	r3, [r7, #8]
        break;
 8007fa8:	e162      	b.n	8008270 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b46      	cmp	r3, #70	; 0x46
 8007fb0:	d103      	bne.n	8007fba <_vsnprintf+0x6da>
 8007fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fb4:	f043 0320 	orr.w	r3, r3, #32
 8007fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8007fba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fbe:	3307      	adds	r3, #7
 8007fc0:	f023 0307 	bic.w	r3, r3, #7
 8007fc4:	f103 0208 	add.w	r2, r3, #8
 8007fc8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007fd2:	9104      	str	r1, [sp, #16]
 8007fd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fd6:	9103      	str	r1, [sp, #12]
 8007fd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fda:	9102      	str	r1, [sp, #8]
 8007fdc:	e9cd 2300 	strd	r2, r3, [sp]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fe4:	6939      	ldr	r1, [r7, #16]
 8007fe6:	6978      	ldr	r0, [r7, #20]
 8007fe8:	f7fe ff92 	bl	8006f10 <_ftoa>
 8007fec:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	60bb      	str	r3, [r7, #8]
        break;
 8007ff4:	e13c      	b.n	8008270 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b67      	cmp	r3, #103	; 0x67
 8007ffc:	d003      	beq.n	8008006 <_vsnprintf+0x726>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b47      	cmp	r3, #71	; 0x47
 8008004:	d103      	bne.n	800800e <_vsnprintf+0x72e>
 8008006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800800c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b45      	cmp	r3, #69	; 0x45
 8008014:	d003      	beq.n	800801e <_vsnprintf+0x73e>
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b47      	cmp	r3, #71	; 0x47
 800801c:	d103      	bne.n	8008026 <_vsnprintf+0x746>
 800801e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008020:	f043 0320 	orr.w	r3, r3, #32
 8008024:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8008026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800802a:	3307      	adds	r3, #7
 800802c:	f023 0307 	bic.w	r3, r3, #7
 8008030:	f103 0208 	add.w	r2, r3, #8
 8008034:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800803e:	9104      	str	r1, [sp, #16]
 8008040:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008042:	9103      	str	r1, [sp, #12]
 8008044:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008046:	9102      	str	r1, [sp, #8]
 8008048:	e9cd 2300 	strd	r2, r3, [sp]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008050:	6939      	ldr	r1, [r7, #16]
 8008052:	6978      	ldr	r0, [r7, #20]
 8008054:	f7ff f9b4 	bl	80073c0 <_etoa>
 8008058:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	3301      	adds	r3, #1
 800805e:	60bb      	str	r3, [r7, #8]
        break;
 8008060:	e106      	b.n	8008270 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8008062:	2301      	movs	r3, #1
 8008064:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8008066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10e      	bne.n	800808e <_vsnprintf+0x7ae>
          while (l++ < width) {
 8008070:	e007      	b.n	8008082 <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 8008072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008074:	1c53      	adds	r3, r2, #1
 8008076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008078:	697c      	ldr	r4, [r7, #20]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6939      	ldr	r1, [r7, #16]
 800807e:	2020      	movs	r0, #32
 8008080:	47a0      	blx	r4
          while (l++ < width) {
 8008082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	647a      	str	r2, [r7, #68]	; 0x44
 8008088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800808a:	429a      	cmp	r2, r3
 800808c:	d8f1      	bhi.n	8008072 <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800808e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008092:	1d1a      	adds	r2, r3, #4
 8008094:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	b2d8      	uxtb	r0, r3
 800809c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800809e:	1c53      	adds	r3, r2, #1
 80080a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080a2:	697c      	ldr	r4, [r7, #20]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6939      	ldr	r1, [r7, #16]
 80080a8:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80080aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080ac:	f003 0302 	and.w	r3, r3, #2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00e      	beq.n	80080d2 <_vsnprintf+0x7f2>
          while (l++ < width) {
 80080b4:	e007      	b.n	80080c6 <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 80080b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080b8:	1c53      	adds	r3, r2, #1
 80080ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080bc:	697c      	ldr	r4, [r7, #20]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6939      	ldr	r1, [r7, #16]
 80080c2:	2020      	movs	r0, #32
 80080c4:	47a0      	blx	r4
          while (l++ < width) {
 80080c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	647a      	str	r2, [r7, #68]	; 0x44
 80080cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d8f1      	bhi.n	80080b6 <_vsnprintf+0x7d6>
          }
        }
        format++;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	3301      	adds	r3, #1
 80080d6:	60bb      	str	r3, [r7, #8]
        break;
 80080d8:	e0ca      	b.n	8008270 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80080da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080de:	1d1a      	adds	r2, r3, #4
 80080e0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80080e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <_vsnprintf+0x812>
 80080ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080f0:	e001      	b.n	80080f6 <_vsnprintf+0x816>
 80080f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080f6:	4619      	mov	r1, r3
 80080f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80080fa:	f7fe fcb2 	bl	8006a62 <_strnlen_s>
 80080fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8008100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008106:	2b00      	cmp	r3, #0
 8008108:	d005      	beq.n	8008116 <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 800810a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800810c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800810e:	4293      	cmp	r3, r2
 8008110:	bf28      	it	cs
 8008112:	4613      	movcs	r3, r2
 8008114:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8008116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d11a      	bne.n	8008156 <_vsnprintf+0x876>
          while (l++ < width) {
 8008120:	e007      	b.n	8008132 <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 8008122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008124:	1c53      	adds	r3, r2, #1
 8008126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008128:	697c      	ldr	r4, [r7, #20]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6939      	ldr	r1, [r7, #16]
 800812e:	2020      	movs	r0, #32
 8008130:	47a0      	blx	r4
          while (l++ < width) {
 8008132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008138:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800813a:	429a      	cmp	r2, r3
 800813c:	d8f1      	bhi.n	8008122 <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800813e:	e00a      	b.n	8008156 <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 8008140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	643a      	str	r2, [r7, #64]	; 0x40
 8008146:	7818      	ldrb	r0, [r3, #0]
 8008148:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800814a:	1c53      	adds	r3, r2, #1
 800814c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800814e:	697c      	ldr	r4, [r7, #20]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6939      	ldr	r1, [r7, #16]
 8008154:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8008156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <_vsnprintf+0x892>
 800815e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0eb      	beq.n	8008140 <_vsnprintf+0x860>
 8008168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800816a:	1e5a      	subs	r2, r3, #1
 800816c:	657a      	str	r2, [r7, #84]	; 0x54
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e6      	bne.n	8008140 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8008172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008174:	f003 0302 	and.w	r3, r3, #2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00e      	beq.n	800819a <_vsnprintf+0x8ba>
          while (l++ < width) {
 800817c:	e007      	b.n	800818e <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 800817e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008180:	1c53      	adds	r3, r2, #1
 8008182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008184:	697c      	ldr	r4, [r7, #20]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6939      	ldr	r1, [r7, #16]
 800818a:	2020      	movs	r0, #32
 800818c:	47a0      	blx	r4
          while (l++ < width) {
 800818e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008196:	429a      	cmp	r2, r3
 8008198:	d8f1      	bhi.n	800817e <_vsnprintf+0x89e>
          }
        }
        format++;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	3301      	adds	r3, #1
 800819e:	60bb      	str	r3, [r7, #8]
        break;
 80081a0:	e066      	b.n	8008270 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80081a2:	2308      	movs	r3, #8
 80081a4:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80081a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80081ac:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80081ae:	2300      	movs	r3, #0
 80081b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 80081b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d023      	beq.n	8008204 <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80081bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081c0:	1d1a      	adds	r2, r3, #4
 80081c2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	2300      	movs	r3, #0
 80081cc:	603a      	str	r2, [r7, #0]
 80081ce:	607b      	str	r3, [r7, #4]
 80081d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081d2:	9308      	str	r3, [sp, #32]
 80081d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081d6:	9307      	str	r3, [sp, #28]
 80081d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081da:	9306      	str	r3, [sp, #24]
 80081dc:	f04f 0210 	mov.w	r2, #16
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081e8:	2300      	movs	r3, #0
 80081ea:	9302      	str	r3, [sp, #8]
 80081ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80081f0:	e9cd 3400 	strd	r3, r4, [sp]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081f8:	6939      	ldr	r1, [r7, #16]
 80081fa:	6978      	ldr	r0, [r7, #20]
 80081fc:	f7fe fe19 	bl	8006e32 <_ntoa_long_long>
 8008200:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008202:	e018      	b.n	8008236 <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8008204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008208:	1d1a      	adds	r2, r3, #4
 800820a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008214:	9305      	str	r3, [sp, #20]
 8008216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821c:	9303      	str	r3, [sp, #12]
 800821e:	2310      	movs	r3, #16
 8008220:	9302      	str	r3, [sp, #8]
 8008222:	2300      	movs	r3, #0
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	9200      	str	r2, [sp, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800822c:	6939      	ldr	r1, [r7, #16]
 800822e:	6978      	ldr	r0, [r7, #20]
 8008230:	f7fe fd99 	bl	8006d66 <_ntoa_long>
 8008234:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	3301      	adds	r3, #1
 800823a:	60bb      	str	r3, [r7, #8]
        break;
 800823c:	e018      	b.n	8008270 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800823e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008240:	1c53      	adds	r3, r2, #1
 8008242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008244:	697c      	ldr	r4, [r7, #20]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6939      	ldr	r1, [r7, #16]
 800824a:	2025      	movs	r0, #37	; 0x25
 800824c:	47a0      	blx	r4
        format++;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	3301      	adds	r3, #1
 8008252:	60bb      	str	r3, [r7, #8]
        break;
 8008254:	e00c      	b.n	8008270 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	7818      	ldrb	r0, [r3, #0]
 800825a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800825c:	1c53      	adds	r3, r2, #1
 800825e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008260:	697c      	ldr	r4, [r7, #20]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6939      	ldr	r1, [r7, #16]
 8008266:	47a0      	blx	r4
        format++;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	3301      	adds	r3, #1
 800826c:	60bb      	str	r3, [r7, #8]
        break;
 800826e:	bf00      	nop
  while (*format)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	f47f ab45 	bne.w	8007904 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800827a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	429a      	cmp	r2, r3
 8008280:	d302      	bcc.n	8008288 <_vsnprintf+0x9a8>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1e5a      	subs	r2, r3, #1
 8008286:	e000      	b.n	800828a <_vsnprintf+0x9aa>
 8008288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800828a:	697c      	ldr	r4, [r7, #20]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6939      	ldr	r1, [r7, #16]
 8008290:	2000      	movs	r0, #0
 8008292:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8008294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008296:	4618      	mov	r0, r3
 8008298:	3764      	adds	r7, #100	; 0x64
 800829a:	46bd      	mov	sp, r7
 800829c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080082a0 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 80082a0:	b40e      	push	{r1, r2, r3}
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b087      	sub	sp, #28
 80082a6:	af02      	add	r7, sp, #8
 80082a8:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 80082aa:	f107 0320 	add.w	r3, r7, #32
 80082ae:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082ba:	6879      	ldr	r1, [r7, #4]
 80082bc:	4805      	ldr	r0, [pc, #20]	; (80082d4 <sprintf_+0x34>)
 80082be:	f7ff fb0f 	bl	80078e0 <_vsnprintf>
 80082c2:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80082c4:	68fb      	ldr	r3, [r7, #12]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082d0:	b003      	add	sp, #12
 80082d2:	4770      	bx	lr
 80082d4:	08006a1d 	.word	0x08006a1d

080082d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80082de:	4b15      	ldr	r3, [pc, #84]	; (8008334 <HAL_MspInit+0x5c>)
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	4a14      	ldr	r2, [pc, #80]	; (8008334 <HAL_MspInit+0x5c>)
 80082e4:	f043 0301 	orr.w	r3, r3, #1
 80082e8:	6193      	str	r3, [r2, #24]
 80082ea:	4b12      	ldr	r3, [pc, #72]	; (8008334 <HAL_MspInit+0x5c>)
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	60bb      	str	r3, [r7, #8]
 80082f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082f6:	4b0f      	ldr	r3, [pc, #60]	; (8008334 <HAL_MspInit+0x5c>)
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	4a0e      	ldr	r2, [pc, #56]	; (8008334 <HAL_MspInit+0x5c>)
 80082fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008300:	61d3      	str	r3, [r2, #28]
 8008302:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <HAL_MspInit+0x5c>)
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800830a:	607b      	str	r3, [r7, #4]
 800830c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800830e:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <HAL_MspInit+0x60>)
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	4a04      	ldr	r2, [pc, #16]	; (8008338 <HAL_MspInit+0x60>)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr
 8008334:	40021000 	.word	0x40021000
 8008338:	40010000 	.word	0x40010000

0800833c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008340:	bf00      	nop
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr

08008348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008348:	b480      	push	{r7}
 800834a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800834c:	e7fe      	b.n	800834c <HardFault_Handler+0x4>

0800834e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800834e:	b480      	push	{r7}
 8008350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008352:	e7fe      	b.n	8008352 <MemManage_Handler+0x4>

08008354 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008358:	e7fe      	b.n	8008358 <BusFault_Handler+0x4>

0800835a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800835a:	b480      	push	{r7}
 800835c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800835e:	e7fe      	b.n	800835e <UsageFault_Handler+0x4>

08008360 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008364:	bf00      	nop
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr

0800836c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008370:	bf00      	nop
 8008372:	46bd      	mov	sp, r7
 8008374:	bc80      	pop	{r7}
 8008376:	4770      	bx	lr

08008378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800837c:	bf00      	nop
 800837e:	46bd      	mov	sp, r7
 8008380:	bc80      	pop	{r7}
 8008382:	4770      	bx	lr

08008384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern uint16_t timeout_rb;
  if(timeout_rb >0)  timeout_rb--;
 8008388:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <SysTick_Handler+0x20>)
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d005      	beq.n	800839c <SysTick_Handler+0x18>
 8008390:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <SysTick_Handler+0x20>)
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	3b01      	subs	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <SysTick_Handler+0x20>)
 800839a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800839c:	f001 fa06 	bl	80097ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083a0:	bf00      	nop
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	2000db10 	.word	0x2000db10

080083a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  setActiveScreen0();
 80083ac:	f7fc fdb6 	bl	8004f1c <setActiveScreen0>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80083b0:	2001      	movs	r0, #1
 80083b2:	f002 fb71 	bl	800aa98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80083b6:	bf00      	nop
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80083c0:	4b09      	ldr	r3, [pc, #36]	; (80083e8 <EXTI4_IRQHandler+0x2c>)
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	f003 0310 	and.w	r3, r3, #16
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d008      	beq.n	80083de <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 80083cc:	4b07      	ldr	r3, [pc, #28]	; (80083ec <EXTI4_IRQHandler+0x30>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80083d2:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <EXTI4_IRQHandler+0x2c>)
 80083d4:	2210      	movs	r2, #16
 80083d6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 80083d8:	2010      	movs	r0, #16
 80083da:	f002 fb75 	bl	800aac8 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80083de:	2010      	movs	r0, #16
 80083e0:	f002 fb5a 	bl	800aa98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80083e4:	bf00      	nop
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	40010400 	.word	0x40010400
 80083ec:	2000de28 	.word	0x2000de28

080083f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 80083f4:	2100      	movs	r1, #0
 80083f6:	4809      	ldr	r0, [pc, #36]	; (800841c <DMA1_Channel1_IRQHandler+0x2c>)
 80083f8:	f003 fae0 	bl	800b9bc <HAL_TIM_PWM_Stop_DMA>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80083fc:	4b07      	ldr	r3, [pc, #28]	; (800841c <DMA1_Channel1_IRQHandler+0x2c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2200      	movs	r2, #0
 8008402:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8008404:	2100      	movs	r1, #0
 8008406:	4805      	ldr	r0, [pc, #20]	; (800841c <DMA1_Channel1_IRQHandler+0x2c>)
 8008408:	f003 f96a 	bl	800b6e0 <HAL_TIM_PWM_Start>
  yStepCompleted = 1;
 800840c:	4b04      	ldr	r3, [pc, #16]	; (8008420 <DMA1_Channel1_IRQHandler+0x30>)
 800840e:	2201      	movs	r2, #1
 8008410:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8008412:	4804      	ldr	r0, [pc, #16]	; (8008424 <DMA1_Channel1_IRQHandler+0x34>)
 8008414:	f001 ff0e 	bl	800a234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008418:	bf00      	nop
 800841a:	bd80      	pop	{r7, pc}
 800841c:	2000dbd4 	.word	0x2000dbd4
 8008420:	20000329 	.word	0x20000329
 8008424:	2000dd1c 	.word	0x2000dd1c

08008428 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800842c:	2100      	movs	r1, #0
 800842e:	4809      	ldr	r0, [pc, #36]	; (8008454 <DMA1_Channel2_IRQHandler+0x2c>)
 8008430:	f003 fac4 	bl	800b9bc <HAL_TIM_PWM_Stop_DMA>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8008434:	4b07      	ldr	r3, [pc, #28]	; (8008454 <DMA1_Channel2_IRQHandler+0x2c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2200      	movs	r2, #0
 800843a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800843c:	2100      	movs	r1, #0
 800843e:	4805      	ldr	r0, [pc, #20]	; (8008454 <DMA1_Channel2_IRQHandler+0x2c>)
 8008440:	f003 f94e 	bl	800b6e0 <HAL_TIM_PWM_Start>
  zStepCompleted = 1;
 8008444:	4b04      	ldr	r3, [pc, #16]	; (8008458 <DMA1_Channel2_IRQHandler+0x30>)
 8008446:	2201      	movs	r2, #1
 8008448:	701a      	strb	r2, [r3, #0]

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800844a:	4804      	ldr	r0, [pc, #16]	; (800845c <DMA1_Channel2_IRQHandler+0x34>)
 800844c:	f001 fef2 	bl	800a234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008450:	bf00      	nop
 8008452:	bd80      	pop	{r7, pc}
 8008454:	2000db14 	.word	0x2000db14
 8008458:	2000032a 	.word	0x2000032a
 800845c:	2000dc94 	.word	0x2000dc94

08008460 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8008464:	2100      	movs	r1, #0
 8008466:	4809      	ldr	r0, [pc, #36]	; (800848c <DMA1_Channel6_IRQHandler+0x2c>)
 8008468:	f003 faa8 	bl	800b9bc <HAL_TIM_PWM_Stop_DMA>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800846c:	4b07      	ldr	r3, [pc, #28]	; (800848c <DMA1_Channel6_IRQHandler+0x2c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2200      	movs	r2, #0
 8008472:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8008474:	2100      	movs	r1, #0
 8008476:	4805      	ldr	r0, [pc, #20]	; (800848c <DMA1_Channel6_IRQHandler+0x2c>)
 8008478:	f003 f932 	bl	800b6e0 <HAL_TIM_PWM_Start>
  xStepCompleted = 1;
 800847c:	4b04      	ldr	r3, [pc, #16]	; (8008490 <DMA1_Channel6_IRQHandler+0x30>)
 800847e:	2201      	movs	r2, #1
 8008480:	701a      	strb	r2, [r3, #0]

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8008482:	4804      	ldr	r0, [pc, #16]	; (8008494 <DMA1_Channel6_IRQHandler+0x34>)
 8008484:	f001 fed6 	bl	800a234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8008488:	bf00      	nop
 800848a:	bd80      	pop	{r7, pc}
 800848c:	2000db94 	.word	0x2000db94
 8008490:	20000328 	.word	0x20000328
 8008494:	2000dcd8 	.word	0x2000dcd8

08008498 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 800849c:	4b0d      	ldr	r3, [pc, #52]	; (80084d4 <TIM3_IRQHandler+0x3c>)
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	3b01      	subs	r3, #1
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <TIM3_IRQHandler+0x3c>)
 80084a6:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 80084a8:	4b0a      	ldr	r3, [pc, #40]	; (80084d4 <TIM3_IRQHandler+0x3c>)
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10c      	bne.n	80084ca <TIM3_IRQHandler+0x32>
 80084b0:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <TIM3_IRQHandler+0x40>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d108      	bne.n	80084ca <TIM3_IRQHandler+0x32>
		/*Timer Ends, Handle the water drinking progress*/
		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 80084b8:	4808      	ldr	r0, [pc, #32]	; (80084dc <TIM3_IRQHandler+0x44>)
 80084ba:	f003 f86e 	bl	800b59a <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 80084be:	4807      	ldr	r0, [pc, #28]	; (80084dc <TIM3_IRQHandler+0x44>)
 80084c0:	f003 f8af 	bl	800b622 <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 80084c4:	4b04      	ldr	r3, [pc, #16]	; (80084d8 <TIM3_IRQHandler+0x40>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80084ca:	4804      	ldr	r0, [pc, #16]	; (80084dc <TIM3_IRQHandler+0x44>)
 80084cc:	f003 fb14 	bl	800baf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80084d0:	bf00      	nop
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	2000dda4 	.word	0x2000dda4
 80084d8:	2000dda5 	.word	0x2000dda5
 80084dc:	2000db94 	.word	0x2000db94

080084e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    uint8_t ch = 1;
 80084e6:	2301      	movs	r3, #1
 80084e8:	71fb      	strb	r3, [r7, #7]
    if (__HAL_UART_GET_FLAG( &DebugUartHandle, UART_FLAG_RXNE ) != RESET)
 80084ea:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <USART1_IRQHandler+0x38>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0320 	and.w	r3, r3, #32
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	d107      	bne.n	8008508 <USART1_IRQHandler+0x28>
    {
        ch=( uint16_t)READ_REG(DebugUartHandle.Instance->DR);
 80084f8:	4b07      	ldr	r3, [pc, #28]	; (8008518 <USART1_IRQHandler+0x38>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	71fb      	strb	r3, [r7, #7]

        WRITE_REG ( WifiUartHandle.Instance->DR,ch);
 8008500:	4b06      	ldr	r3, [pc, #24]	; (800851c <USART1_IRQHandler+0x3c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	79fa      	ldrb	r2, [r7, #7]
 8008506:	605a      	str	r2, [r3, #4]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008508:	4805      	ldr	r0, [pc, #20]	; (8008520 <USART1_IRQHandler+0x40>)
 800850a:	f004 fa33 	bl	800c974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800850e:	bf00      	nop
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	2000241c 	.word	0x2000241c
 800851c:	2000245c 	.word	0x2000245c
 8008520:	2000dda8 	.word	0x2000dda8

08008524 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  setActiveScreen1();
 8008528:	f7fc fd02 	bl	8004f30 <setActiveScreen1>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800852c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008530:	f002 fab2 	bl	800aa98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008534:	bf00      	nop
 8008536:	bd80      	pop	{r7, pc}

08008538 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 800853c:	4b03      	ldr	r3, [pc, #12]	; (800854c <TIM5_IRQHandler+0x14>)
 800853e:	2201      	movs	r2, #1
 8008540:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8008542:	4803      	ldr	r0, [pc, #12]	; (8008550 <TIM5_IRQHandler+0x18>)
 8008544:	f003 fad8 	bl	800baf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8008548:	bf00      	nop
 800854a:	bd80      	pop	{r7, pc}
 800854c:	20000020 	.word	0x20000020
 8008550:	2000dc14 	.word	0x2000dc14

08008554 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */
  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8008558:	4802      	ldr	r0, [pc, #8]	; (8008564 <DMA2_Channel3_IRQHandler+0x10>)
 800855a:	f001 fe6b 	bl	800a234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800855e:	bf00      	nop
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	2000dd60 	.word	0x2000dd60

08008568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
	return 1;
 800856c:	2301      	movs	r3, #1
}
 800856e:	4618      	mov	r0, r3
 8008570:	46bd      	mov	sp, r7
 8008572:	bc80      	pop	{r7}
 8008574:	4770      	bx	lr

08008576 <_kill>:

int _kill(int pid, int sig)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008580:	f004 ff38 	bl	800d3f4 <__errno>
 8008584:	4603      	mov	r3, r0
 8008586:	2216      	movs	r2, #22
 8008588:	601a      	str	r2, [r3, #0]
	return -1;
 800858a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <_exit>:

void _exit (int status)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800859e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff ffe7 	bl	8008576 <_kill>
	while (1) {}		/* Make sure we hang here */
 80085a8:	e7fe      	b.n	80085a8 <_exit+0x12>
	...

080085ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80085ac:	b480      	push	{r7}
 80085ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80085b0:	4b15      	ldr	r3, [pc, #84]	; (8008608 <SystemInit+0x5c>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a14      	ldr	r2, [pc, #80]	; (8008608 <SystemInit+0x5c>)
 80085b6:	f043 0301 	orr.w	r3, r3, #1
 80085ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80085bc:	4b12      	ldr	r3, [pc, #72]	; (8008608 <SystemInit+0x5c>)
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	4911      	ldr	r1, [pc, #68]	; (8008608 <SystemInit+0x5c>)
 80085c2:	4b12      	ldr	r3, [pc, #72]	; (800860c <SystemInit+0x60>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80085c8:	4b0f      	ldr	r3, [pc, #60]	; (8008608 <SystemInit+0x5c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a0e      	ldr	r2, [pc, #56]	; (8008608 <SystemInit+0x5c>)
 80085ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80085d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80085d8:	4b0b      	ldr	r3, [pc, #44]	; (8008608 <SystemInit+0x5c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a0a      	ldr	r2, [pc, #40]	; (8008608 <SystemInit+0x5c>)
 80085de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80085e4:	4b08      	ldr	r3, [pc, #32]	; (8008608 <SystemInit+0x5c>)
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	4a07      	ldr	r2, [pc, #28]	; (8008608 <SystemInit+0x5c>)
 80085ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80085ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80085f0:	4b05      	ldr	r3, [pc, #20]	; (8008608 <SystemInit+0x5c>)
 80085f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80085f6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80085f8:	4b05      	ldr	r3, [pc, #20]	; (8008610 <SystemInit+0x64>)
 80085fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80085fe:	609a      	str	r2, [r3, #8]
#endif 
}
 8008600:	bf00      	nop
 8008602:	46bd      	mov	sp, r7
 8008604:	bc80      	pop	{r7}
 8008606:	4770      	bx	lr
 8008608:	40021000 	.word	0x40021000
 800860c:	f8ff0000 	.word	0xf8ff0000
 8008610:	e000ed00 	.word	0xe000ed00

08008614 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim4_ch1;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b094      	sub	sp, #80	; 0x50
 8008618:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800861a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	605a      	str	r2, [r3, #4]
 8008624:	609a      	str	r2, [r3, #8]
 8008626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008628:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800862c:	2200      	movs	r2, #0
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008632:	f107 031c 	add.w	r3, r7, #28
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	605a      	str	r2, [r3, #4]
 800863c:	609a      	str	r2, [r3, #8]
 800863e:	60da      	str	r2, [r3, #12]
 8008640:	611a      	str	r2, [r3, #16]
 8008642:	615a      	str	r2, [r3, #20]
 8008644:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008646:	463b      	mov	r3, r7
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	605a      	str	r2, [r3, #4]
 800864e:	609a      	str	r2, [r3, #8]
 8008650:	60da      	str	r2, [r3, #12]
 8008652:	611a      	str	r2, [r3, #16]
 8008654:	615a      	str	r2, [r3, #20]
 8008656:	619a      	str	r2, [r3, #24]

  htim1.Instance = TIM1;
 8008658:	4b3e      	ldr	r3, [pc, #248]	; (8008754 <MX_TIM1_Init+0x140>)
 800865a:	4a3f      	ldr	r2, [pc, #252]	; (8008758 <MX_TIM1_Init+0x144>)
 800865c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 800865e:	4b3d      	ldr	r3, [pc, #244]	; (8008754 <MX_TIM1_Init+0x140>)
 8008660:	f242 720f 	movw	r2, #9999	; 0x270f
 8008664:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008666:	4b3b      	ldr	r3, [pc, #236]	; (8008754 <MX_TIM1_Init+0x140>)
 8008668:	2200      	movs	r2, #0
 800866a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72-1;
 800866c:	4b39      	ldr	r3, [pc, #228]	; (8008754 <MX_TIM1_Init+0x140>)
 800866e:	2247      	movs	r2, #71	; 0x47
 8008670:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008672:	4b38      	ldr	r3, [pc, #224]	; (8008754 <MX_TIM1_Init+0x140>)
 8008674:	2200      	movs	r2, #0
 8008676:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008678:	4b36      	ldr	r3, [pc, #216]	; (8008754 <MX_TIM1_Init+0x140>)
 800867a:	2200      	movs	r2, #0
 800867c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800867e:	4b35      	ldr	r3, [pc, #212]	; (8008754 <MX_TIM1_Init+0x140>)
 8008680:	2280      	movs	r2, #128	; 0x80
 8008682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008684:	4833      	ldr	r0, [pc, #204]	; (8008754 <MX_TIM1_Init+0x140>)
 8008686:	f002 ff43 	bl	800b510 <HAL_TIM_Base_Init>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8008690:	f7fe f9be 	bl	8006a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008698:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800869a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800869e:	4619      	mov	r1, r3
 80086a0:	482c      	ldr	r0, [pc, #176]	; (8008754 <MX_TIM1_Init+0x140>)
 80086a2:	f003 fbf7 	bl	800be94 <HAL_TIM_ConfigClockSource>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80086ac:	f7fe f9b0 	bl	8006a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80086b0:	4828      	ldr	r0, [pc, #160]	; (8008754 <MX_TIM1_Init+0x140>)
 80086b2:	f002 ffe0 	bl	800b676 <HAL_TIM_PWM_Init>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80086bc:	f7fe f9a8 	bl	8006a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086c0:	2300      	movs	r3, #0
 80086c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086c4:	2300      	movs	r3, #0
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80086c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80086cc:	4619      	mov	r1, r3
 80086ce:	4821      	ldr	r0, [pc, #132]	; (8008754 <MX_TIM1_Init+0x140>)
 80086d0:	f004 f8ad 	bl	800c82e <HAL_TIMEx_MasterConfigSynchronization>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80086da:	f7fe f999 	bl	8006a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80086de:	2360      	movs	r3, #96	; 0x60
 80086e0:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 36;
 80086e2:	2324      	movs	r3, #36	; 0x24
 80086e4:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80086e6:	2300      	movs	r3, #0
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80086ea:	2300      	movs	r3, #0
 80086ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80086ee:	2300      	movs	r3, #0
 80086f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80086f2:	2300      	movs	r3, #0
 80086f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80086f6:	2300      	movs	r3, #0
 80086f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80086fa:	f107 031c 	add.w	r3, r7, #28
 80086fe:	2200      	movs	r2, #0
 8008700:	4619      	mov	r1, r3
 8008702:	4814      	ldr	r0, [pc, #80]	; (8008754 <MX_TIM1_Init+0x140>)
 8008704:	f003 fb00 	bl	800bd08 <HAL_TIM_PWM_ConfigChannel>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800870e:	f7fe f97f 	bl	8006a10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008712:	2300      	movs	r3, #0
 8008714:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008716:	2300      	movs	r3, #0
 8008718:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800871a:	2300      	movs	r3, #0
 800871c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008722:	2300      	movs	r3, #0
 8008724:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800872a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800872c:	2300      	movs	r3, #0
 800872e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008730:	463b      	mov	r3, r7
 8008732:	4619      	mov	r1, r3
 8008734:	4807      	ldr	r0, [pc, #28]	; (8008754 <MX_TIM1_Init+0x140>)
 8008736:	f004 f822 	bl	800c77e <HAL_TIMEx_ConfigBreakDeadTime>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8008740:	f7fe f966 	bl	8006a10 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8008744:	4803      	ldr	r0, [pc, #12]	; (8008754 <MX_TIM1_Init+0x140>)
 8008746:	f000 fb7b 	bl	8008e40 <HAL_TIM_MspPostInit>

}
 800874a:	bf00      	nop
 800874c:	3750      	adds	r7, #80	; 0x50
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	2000db14 	.word	0x2000db14
 8008758:	40012c00 	.word	0x40012c00

0800875c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008762:	f107 0308 	add.w	r3, r7, #8
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	605a      	str	r2, [r3, #4]
 800876c:	609a      	str	r2, [r3, #8]
 800876e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008770:	463b      	mov	r3, r7
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8008778:	4b1d      	ldr	r3, [pc, #116]	; (80087f0 <MX_TIM2_Init+0x94>)
 800877a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800877e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18-1;
 8008780:	4b1b      	ldr	r3, [pc, #108]	; (80087f0 <MX_TIM2_Init+0x94>)
 8008782:	2211      	movs	r2, #17
 8008784:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008786:	4b1a      	ldr	r3, [pc, #104]	; (80087f0 <MX_TIM2_Init+0x94>)
 8008788:	2200      	movs	r2, #0
 800878a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5-1;
 800878c:	4b18      	ldr	r3, [pc, #96]	; (80087f0 <MX_TIM2_Init+0x94>)
 800878e:	2204      	movs	r2, #4
 8008790:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008792:	4b17      	ldr	r3, [pc, #92]	; (80087f0 <MX_TIM2_Init+0x94>)
 8008794:	2200      	movs	r2, #0
 8008796:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008798:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <MX_TIM2_Init+0x94>)
 800879a:	2280      	movs	r2, #128	; 0x80
 800879c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800879e:	4814      	ldr	r0, [pc, #80]	; (80087f0 <MX_TIM2_Init+0x94>)
 80087a0:	f002 feb6 	bl	800b510 <HAL_TIM_Base_Init>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80087aa:	f7fe f931 	bl	8006a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80087ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80087b4:	f107 0308 	add.w	r3, r7, #8
 80087b8:	4619      	mov	r1, r3
 80087ba:	480d      	ldr	r0, [pc, #52]	; (80087f0 <MX_TIM2_Init+0x94>)
 80087bc:	f003 fb6a 	bl	800be94 <HAL_TIM_ConfigClockSource>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80087c6:	f7fe f923 	bl	8006a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80087ca:	2300      	movs	r3, #0
 80087cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087ce:	2300      	movs	r3, #0
 80087d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80087d2:	463b      	mov	r3, r7
 80087d4:	4619      	mov	r1, r3
 80087d6:	4806      	ldr	r0, [pc, #24]	; (80087f0 <MX_TIM2_Init+0x94>)
 80087d8:	f004 f829 	bl	800c82e <HAL_TIMEx_MasterConfigSynchronization>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80087e2:	f7fe f915 	bl	8006a10 <Error_Handler>
  }

}
 80087e6:	bf00      	nop
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	2000db54 	.word	0x2000db54

080087f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08e      	sub	sp, #56	; 0x38
 80087f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80087fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	605a      	str	r2, [r3, #4]
 8008804:	609a      	str	r2, [r3, #8]
 8008806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008808:	f107 0320 	add.w	r3, r7, #32
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008812:	1d3b      	adds	r3, r7, #4
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	605a      	str	r2, [r3, #4]
 800881a:	609a      	str	r2, [r3, #8]
 800881c:	60da      	str	r2, [r3, #12]
 800881e:	611a      	str	r2, [r3, #16]
 8008820:	615a      	str	r2, [r3, #20]
 8008822:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8008824:	4b2c      	ldr	r3, [pc, #176]	; (80088d8 <MX_TIM3_Init+0xe4>)
 8008826:	4a2d      	ldr	r2, [pc, #180]	; (80088dc <MX_TIM3_Init+0xe8>)
 8008828:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 800882a:	4b2b      	ldr	r3, [pc, #172]	; (80088d8 <MX_TIM3_Init+0xe4>)
 800882c:	f242 720f 	movw	r2, #9999	; 0x270f
 8008830:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008832:	4b29      	ldr	r3, [pc, #164]	; (80088d8 <MX_TIM3_Init+0xe4>)
 8008834:	2200      	movs	r2, #0
 8008836:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 72-1;
 8008838:	4b27      	ldr	r3, [pc, #156]	; (80088d8 <MX_TIM3_Init+0xe4>)
 800883a:	2247      	movs	r2, #71	; 0x47
 800883c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800883e:	4b26      	ldr	r3, [pc, #152]	; (80088d8 <MX_TIM3_Init+0xe4>)
 8008840:	2200      	movs	r2, #0
 8008842:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008844:	4b24      	ldr	r3, [pc, #144]	; (80088d8 <MX_TIM3_Init+0xe4>)
 8008846:	2280      	movs	r2, #128	; 0x80
 8008848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800884a:	4823      	ldr	r0, [pc, #140]	; (80088d8 <MX_TIM3_Init+0xe4>)
 800884c:	f002 fe60 	bl	800b510 <HAL_TIM_Base_Init>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8008856:	f7fe f8db 	bl	8006a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800885a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800885e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008864:	4619      	mov	r1, r3
 8008866:	481c      	ldr	r0, [pc, #112]	; (80088d8 <MX_TIM3_Init+0xe4>)
 8008868:	f003 fb14 	bl	800be94 <HAL_TIM_ConfigClockSource>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8008872:	f7fe f8cd 	bl	8006a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008876:	4818      	ldr	r0, [pc, #96]	; (80088d8 <MX_TIM3_Init+0xe4>)
 8008878:	f002 fefd 	bl	800b676 <HAL_TIM_PWM_Init>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8008882:	f7fe f8c5 	bl	8006a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008886:	2300      	movs	r3, #0
 8008888:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800888a:	2380      	movs	r3, #128	; 0x80
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800888e:	f107 0320 	add.w	r3, r7, #32
 8008892:	4619      	mov	r1, r3
 8008894:	4810      	ldr	r0, [pc, #64]	; (80088d8 <MX_TIM3_Init+0xe4>)
 8008896:	f003 ffca 	bl	800c82e <HAL_TIMEx_MasterConfigSynchronization>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80088a0:	f7fe f8b6 	bl	8006a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80088a4:	2360      	movs	r3, #96	; 0x60
 80088a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 80088a8:	2324      	movs	r3, #36	; 0x24
 80088aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80088b0:	2300      	movs	r3, #0
 80088b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80088b4:	1d3b      	adds	r3, r7, #4
 80088b6:	2200      	movs	r2, #0
 80088b8:	4619      	mov	r1, r3
 80088ba:	4807      	ldr	r0, [pc, #28]	; (80088d8 <MX_TIM3_Init+0xe4>)
 80088bc:	f003 fa24 	bl	800bd08 <HAL_TIM_PWM_ConfigChannel>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80088c6:	f7fe f8a3 	bl	8006a10 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80088ca:	4803      	ldr	r0, [pc, #12]	; (80088d8 <MX_TIM3_Init+0xe4>)
 80088cc:	f000 fab8 	bl	8008e40 <HAL_TIM_MspPostInit>

}
 80088d0:	bf00      	nop
 80088d2:	3738      	adds	r7, #56	; 0x38
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	2000db94 	.word	0x2000db94
 80088dc:	40000400 	.word	0x40000400

080088e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08e      	sub	sp, #56	; 0x38
 80088e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80088e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	605a      	str	r2, [r3, #4]
 80088f0:	609a      	str	r2, [r3, #8]
 80088f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80088f4:	f107 0320 	add.w	r3, r7, #32
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80088fe:	1d3b      	adds	r3, r7, #4
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	605a      	str	r2, [r3, #4]
 8008906:	609a      	str	r2, [r3, #8]
 8008908:	60da      	str	r2, [r3, #12]
 800890a:	611a      	str	r2, [r3, #16]
 800890c:	615a      	str	r2, [r3, #20]
 800890e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8008910:	4b2c      	ldr	r3, [pc, #176]	; (80089c4 <MX_TIM4_Init+0xe4>)
 8008912:	4a2d      	ldr	r2, [pc, #180]	; (80089c8 <MX_TIM4_Init+0xe8>)
 8008914:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8008916:	4b2b      	ldr	r3, [pc, #172]	; (80089c4 <MX_TIM4_Init+0xe4>)
 8008918:	f242 720f 	movw	r2, #9999	; 0x270f
 800891c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800891e:	4b29      	ldr	r3, [pc, #164]	; (80089c4 <MX_TIM4_Init+0xe4>)
 8008920:	2200      	movs	r2, #0
 8008922:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 72-1;
 8008924:	4b27      	ldr	r3, [pc, #156]	; (80089c4 <MX_TIM4_Init+0xe4>)
 8008926:	2247      	movs	r2, #71	; 0x47
 8008928:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800892a:	4b26      	ldr	r3, [pc, #152]	; (80089c4 <MX_TIM4_Init+0xe4>)
 800892c:	2200      	movs	r2, #0
 800892e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008930:	4b24      	ldr	r3, [pc, #144]	; (80089c4 <MX_TIM4_Init+0xe4>)
 8008932:	2280      	movs	r2, #128	; 0x80
 8008934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008936:	4823      	ldr	r0, [pc, #140]	; (80089c4 <MX_TIM4_Init+0xe4>)
 8008938:	f002 fdea 	bl	800b510 <HAL_TIM_Base_Init>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8008942:	f7fe f865 	bl	8006a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800894a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800894c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008950:	4619      	mov	r1, r3
 8008952:	481c      	ldr	r0, [pc, #112]	; (80089c4 <MX_TIM4_Init+0xe4>)
 8008954:	f003 fa9e 	bl	800be94 <HAL_TIM_ConfigClockSource>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800895e:	f7fe f857 	bl	8006a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008962:	4818      	ldr	r0, [pc, #96]	; (80089c4 <MX_TIM4_Init+0xe4>)
 8008964:	f002 fe87 	bl	800b676 <HAL_TIM_PWM_Init>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800896e:	f7fe f84f 	bl	8006a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008972:	2300      	movs	r3, #0
 8008974:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008976:	2300      	movs	r3, #0
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800897a:	f107 0320 	add.w	r3, r7, #32
 800897e:	4619      	mov	r1, r3
 8008980:	4810      	ldr	r0, [pc, #64]	; (80089c4 <MX_TIM4_Init+0xe4>)
 8008982:	f003 ff54 	bl	800c82e <HAL_TIMEx_MasterConfigSynchronization>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800898c:	f7fe f840 	bl	8006a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008990:	2360      	movs	r3, #96	; 0x60
 8008992:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 8008994:	2324      	movs	r3, #36	; 0x24
 8008996:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008998:	2300      	movs	r3, #0
 800899a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80089a0:	1d3b      	adds	r3, r7, #4
 80089a2:	2200      	movs	r2, #0
 80089a4:	4619      	mov	r1, r3
 80089a6:	4807      	ldr	r0, [pc, #28]	; (80089c4 <MX_TIM4_Init+0xe4>)
 80089a8:	f003 f9ae 	bl	800bd08 <HAL_TIM_PWM_ConfigChannel>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80089b2:	f7fe f82d 	bl	8006a10 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80089b6:	4803      	ldr	r0, [pc, #12]	; (80089c4 <MX_TIM4_Init+0xe4>)
 80089b8:	f000 fa42 	bl	8008e40 <HAL_TIM_MspPostInit>

}
 80089bc:	bf00      	nop
 80089be:	3738      	adds	r7, #56	; 0x38
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	2000dbd4 	.word	0x2000dbd4
 80089c8:	40000800 	.word	0x40000800

080089cc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80089d2:	f107 0308 	add.w	r3, r7, #8
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	605a      	str	r2, [r3, #4]
 80089dc:	609a      	str	r2, [r3, #8]
 80089de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089e0:	463b      	mov	r3, r7
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80089e8:	4b1d      	ldr	r3, [pc, #116]	; (8008a60 <MX_TIM5_Init+0x94>)
 80089ea:	4a1e      	ldr	r2, [pc, #120]	; (8008a64 <MX_TIM5_Init+0x98>)
 80089ec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 80089ee:	4b1c      	ldr	r3, [pc, #112]	; (8008a60 <MX_TIM5_Init+0x94>)
 80089f0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80089f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089f6:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <MX_TIM5_Init+0x94>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 80089fc:	4b18      	ldr	r3, [pc, #96]	; (8008a60 <MX_TIM5_Init+0x94>)
 80089fe:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8008a02:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a04:	4b16      	ldr	r3, [pc, #88]	; (8008a60 <MX_TIM5_Init+0x94>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008a0a:	4b15      	ldr	r3, [pc, #84]	; (8008a60 <MX_TIM5_Init+0x94>)
 8008a0c:	2280      	movs	r2, #128	; 0x80
 8008a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008a10:	4813      	ldr	r0, [pc, #76]	; (8008a60 <MX_TIM5_Init+0x94>)
 8008a12:	f002 fd7d 	bl	800b510 <HAL_TIM_Base_Init>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d001      	beq.n	8008a20 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008a1c:	f7fd fff8 	bl	8006a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008a26:	f107 0308 	add.w	r3, r7, #8
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	480c      	ldr	r0, [pc, #48]	; (8008a60 <MX_TIM5_Init+0x94>)
 8008a2e:	f003 fa31 	bl	800be94 <HAL_TIM_ConfigClockSource>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8008a38:	f7fd ffea 	bl	8006a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008a44:	463b      	mov	r3, r7
 8008a46:	4619      	mov	r1, r3
 8008a48:	4805      	ldr	r0, [pc, #20]	; (8008a60 <MX_TIM5_Init+0x94>)
 8008a4a:	f003 fef0 	bl	800c82e <HAL_TIMEx_MasterConfigSynchronization>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008a54:	f7fd ffdc 	bl	8006a10 <Error_Handler>
  }

}
 8008a58:	bf00      	nop
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	2000dc14 	.word	0x2000dc14
 8008a64:	40000c00 	.word	0x40000c00

08008a68 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b094      	sub	sp, #80	; 0x50
 8008a6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a72:	2200      	movs	r2, #0
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	605a      	str	r2, [r3, #4]
 8008a78:	609a      	str	r2, [r3, #8]
 8008a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a80:	2200      	movs	r2, #0
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008a86:	f107 031c 	add.w	r3, r7, #28
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	605a      	str	r2, [r3, #4]
 8008a90:	609a      	str	r2, [r3, #8]
 8008a92:	60da      	str	r2, [r3, #12]
 8008a94:	611a      	str	r2, [r3, #16]
 8008a96:	615a      	str	r2, [r3, #20]
 8008a98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008a9a:	463b      	mov	r3, r7
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	605a      	str	r2, [r3, #4]
 8008aa2:	609a      	str	r2, [r3, #8]
 8008aa4:	60da      	str	r2, [r3, #12]
 8008aa6:	611a      	str	r2, [r3, #16]
 8008aa8:	615a      	str	r2, [r3, #20]
 8008aaa:	619a      	str	r2, [r3, #24]

  htim8.Instance = TIM8;
 8008aac:	4b3d      	ldr	r3, [pc, #244]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008aae:	4a3e      	ldr	r2, [pc, #248]	; (8008ba8 <MX_TIM8_Init+0x140>)
 8008ab0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 18-1;
 8008ab2:	4b3c      	ldr	r3, [pc, #240]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008ab4:	2211      	movs	r2, #17
 8008ab6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ab8:	4b3a      	ldr	r3, [pc, #232]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 5-1;
 8008abe:	4b39      	ldr	r3, [pc, #228]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008ac0:	2204      	movs	r2, #4
 8008ac2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ac4:	4b37      	ldr	r3, [pc, #220]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008aca:	4b36      	ldr	r3, [pc, #216]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008ad0:	4b34      	ldr	r3, [pc, #208]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008ad2:	2280      	movs	r2, #128	; 0x80
 8008ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008ad6:	4833      	ldr	r0, [pc, #204]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008ad8:	f002 fd1a 	bl	800b510 <HAL_TIM_Base_Init>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8008ae2:	f7fd ff95 	bl	8006a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aea:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008aec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008af0:	4619      	mov	r1, r3
 8008af2:	482c      	ldr	r0, [pc, #176]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008af4:	f003 f9ce 	bl	800be94 <HAL_TIM_ConfigClockSource>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8008afe:	f7fd ff87 	bl	8006a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8008b02:	4828      	ldr	r0, [pc, #160]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008b04:	f002 fdb7 	bl	800b676 <HAL_TIM_PWM_Init>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8008b0e:	f7fd ff7f 	bl	8006a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b12:	2300      	movs	r3, #0
 8008b14:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b16:	2300      	movs	r3, #0
 8008b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008b1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4820      	ldr	r0, [pc, #128]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008b22:	f003 fe84 	bl	800c82e <HAL_TIMEx_MasterConfigSynchronization>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8008b2c:	f7fd ff70 	bl	8006a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008b30:	2360      	movs	r3, #96	; 0x60
 8008b32:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008b44:	2300      	movs	r3, #0
 8008b46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008b4c:	f107 031c 	add.w	r3, r7, #28
 8008b50:	2200      	movs	r2, #0
 8008b52:	4619      	mov	r1, r3
 8008b54:	4813      	ldr	r0, [pc, #76]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008b56:	f003 f8d7 	bl	800bd08 <HAL_TIM_PWM_ConfigChannel>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8008b60:	f7fd ff56 	bl	8006a10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008b74:	2300      	movs	r3, #0
 8008b76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008b82:	463b      	mov	r3, r7
 8008b84:	4619      	mov	r1, r3
 8008b86:	4807      	ldr	r0, [pc, #28]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008b88:	f003 fdf9 	bl	800c77e <HAL_TIMEx_ConfigBreakDeadTime>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d001      	beq.n	8008b96 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8008b92:	f7fd ff3d 	bl	8006a10 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8008b96:	4803      	ldr	r0, [pc, #12]	; (8008ba4 <MX_TIM8_Init+0x13c>)
 8008b98:	f000 f952 	bl	8008e40 <HAL_TIM_MspPostInit>

}
 8008b9c:	bf00      	nop
 8008b9e:	3750      	adds	r7, #80	; 0x50
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	2000dc54 	.word	0x2000dc54
 8008ba8:	40013400 	.word	0x40013400

08008bac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a93      	ldr	r2, [pc, #588]	; (8008e08 <HAL_TIM_Base_MspInit+0x25c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d135      	bne.n	8008c2a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008bbe:	4b93      	ldr	r3, [pc, #588]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	4a92      	ldr	r2, [pc, #584]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008bc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008bc8:	6193      	str	r3, [r2, #24]
 8008bca:	4b90      	ldr	r3, [pc, #576]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bd2:	61fb      	str	r3, [r7, #28]
 8008bd4:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8008bd6:	4b8e      	ldr	r3, [pc, #568]	; (8008e10 <HAL_TIM_Base_MspInit+0x264>)
 8008bd8:	4a8e      	ldr	r2, [pc, #568]	; (8008e14 <HAL_TIM_Base_MspInit+0x268>)
 8008bda:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008bdc:	4b8c      	ldr	r3, [pc, #560]	; (8008e10 <HAL_TIM_Base_MspInit+0x264>)
 8008bde:	2210      	movs	r2, #16
 8008be0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008be2:	4b8b      	ldr	r3, [pc, #556]	; (8008e10 <HAL_TIM_Base_MspInit+0x264>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008be8:	4b89      	ldr	r3, [pc, #548]	; (8008e10 <HAL_TIM_Base_MspInit+0x264>)
 8008bea:	2280      	movs	r2, #128	; 0x80
 8008bec:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008bee:	4b88      	ldr	r3, [pc, #544]	; (8008e10 <HAL_TIM_Base_MspInit+0x264>)
 8008bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bf4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008bf6:	4b86      	ldr	r3, [pc, #536]	; (8008e10 <HAL_TIM_Base_MspInit+0x264>)
 8008bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bfc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8008bfe:	4b84      	ldr	r3, [pc, #528]	; (8008e10 <HAL_TIM_Base_MspInit+0x264>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008c04:	4b82      	ldr	r3, [pc, #520]	; (8008e10 <HAL_TIM_Base_MspInit+0x264>)
 8008c06:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008c0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8008c0c:	4880      	ldr	r0, [pc, #512]	; (8008e10 <HAL_TIM_Base_MspInit+0x264>)
 8008c0e:	f001 f933 	bl	8009e78 <HAL_DMA_Init>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8008c18:	f7fd fefa 	bl	8006a10 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a7c      	ldr	r2, [pc, #496]	; (8008e10 <HAL_TIM_Base_MspInit+0x264>)
 8008c20:	625a      	str	r2, [r3, #36]	; 0x24
 8008c22:	4a7b      	ldr	r2, [pc, #492]	; (8008e10 <HAL_TIM_Base_MspInit+0x264>)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008c28:	e0e9      	b.n	8008dfe <HAL_TIM_Base_MspInit+0x252>
  else if(tim_baseHandle->Instance==TIM2)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c32:	d10c      	bne.n	8008c4e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008c34:	4b75      	ldr	r3, [pc, #468]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	4a74      	ldr	r2, [pc, #464]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008c3a:	f043 0301 	orr.w	r3, r3, #1
 8008c3e:	61d3      	str	r3, [r2, #28]
 8008c40:	4b72      	ldr	r3, [pc, #456]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	61bb      	str	r3, [r7, #24]
 8008c4a:	69bb      	ldr	r3, [r7, #24]
}
 8008c4c:	e0d7      	b.n	8008dfe <HAL_TIM_Base_MspInit+0x252>
  else if(tim_baseHandle->Instance==TIM3)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a71      	ldr	r2, [pc, #452]	; (8008e18 <HAL_TIM_Base_MspInit+0x26c>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d143      	bne.n	8008ce0 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008c58:	4b6c      	ldr	r3, [pc, #432]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	4a6b      	ldr	r2, [pc, #428]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008c5e:	f043 0302 	orr.w	r3, r3, #2
 8008c62:	61d3      	str	r3, [r2, #28]
 8008c64:	4b69      	ldr	r3, [pc, #420]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	f003 0302 	and.w	r3, r3, #2
 8008c6c:	617b      	str	r3, [r7, #20]
 8008c6e:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8008c70:	4b6a      	ldr	r3, [pc, #424]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008c72:	4a6b      	ldr	r2, [pc, #428]	; (8008e20 <HAL_TIM_Base_MspInit+0x274>)
 8008c74:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008c76:	4b69      	ldr	r3, [pc, #420]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008c78:	2210      	movs	r2, #16
 8008c7a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c7c:	4b67      	ldr	r3, [pc, #412]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8008c82:	4b66      	ldr	r3, [pc, #408]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008c84:	2280      	movs	r2, #128	; 0x80
 8008c86:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008c88:	4b64      	ldr	r3, [pc, #400]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c8e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008c90:	4b62      	ldr	r3, [pc, #392]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008c92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c96:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8008c98:	4b60      	ldr	r3, [pc, #384]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008c9e:	4b5f      	ldr	r3, [pc, #380]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008ca0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008ca4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8008ca6:	485d      	ldr	r0, [pc, #372]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008ca8:	f001 f8e6 	bl	8009e78 <HAL_DMA_Init>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <HAL_TIM_Base_MspInit+0x10a>
      Error_Handler();
 8008cb2:	f7fd fead 	bl	8006a10 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a58      	ldr	r2, [pc, #352]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008cba:	625a      	str	r2, [r3, #36]	; 0x24
 8008cbc:	4a57      	ldr	r2, [pc, #348]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a55      	ldr	r2, [pc, #340]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8008cc8:	4a54      	ldr	r2, [pc, #336]	; (8008e1c <HAL_TIM_Base_MspInit+0x270>)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	201d      	movs	r0, #29
 8008cd4:	f001 f899 	bl	8009e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008cd8:	201d      	movs	r0, #29
 8008cda:	f001 f8b2 	bl	8009e42 <HAL_NVIC_EnableIRQ>
}
 8008cde:	e08e      	b.n	8008dfe <HAL_TIM_Base_MspInit+0x252>
  else if(tim_baseHandle->Instance==TIM4)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a4f      	ldr	r2, [pc, #316]	; (8008e24 <HAL_TIM_Base_MspInit+0x278>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d135      	bne.n	8008d56 <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008cea:	4b48      	ldr	r3, [pc, #288]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	4a47      	ldr	r2, [pc, #284]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008cf0:	f043 0304 	orr.w	r3, r3, #4
 8008cf4:	61d3      	str	r3, [r2, #28]
 8008cf6:	4b45      	ldr	r3, [pc, #276]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	613b      	str	r3, [r7, #16]
 8008d00:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8008d02:	4b49      	ldr	r3, [pc, #292]	; (8008e28 <HAL_TIM_Base_MspInit+0x27c>)
 8008d04:	4a49      	ldr	r2, [pc, #292]	; (8008e2c <HAL_TIM_Base_MspInit+0x280>)
 8008d06:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008d08:	4b47      	ldr	r3, [pc, #284]	; (8008e28 <HAL_TIM_Base_MspInit+0x27c>)
 8008d0a:	2210      	movs	r2, #16
 8008d0c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d0e:	4b46      	ldr	r3, [pc, #280]	; (8008e28 <HAL_TIM_Base_MspInit+0x27c>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008d14:	4b44      	ldr	r3, [pc, #272]	; (8008e28 <HAL_TIM_Base_MspInit+0x27c>)
 8008d16:	2280      	movs	r2, #128	; 0x80
 8008d18:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008d1a:	4b43      	ldr	r3, [pc, #268]	; (8008e28 <HAL_TIM_Base_MspInit+0x27c>)
 8008d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d20:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008d22:	4b41      	ldr	r3, [pc, #260]	; (8008e28 <HAL_TIM_Base_MspInit+0x27c>)
 8008d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d28:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8008d2a:	4b3f      	ldr	r3, [pc, #252]	; (8008e28 <HAL_TIM_Base_MspInit+0x27c>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008d30:	4b3d      	ldr	r3, [pc, #244]	; (8008e28 <HAL_TIM_Base_MspInit+0x27c>)
 8008d32:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008d36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8008d38:	483b      	ldr	r0, [pc, #236]	; (8008e28 <HAL_TIM_Base_MspInit+0x27c>)
 8008d3a:	f001 f89d 	bl	8009e78 <HAL_DMA_Init>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <HAL_TIM_Base_MspInit+0x19c>
      Error_Handler();
 8008d44:	f7fd fe64 	bl	8006a10 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a37      	ldr	r2, [pc, #220]	; (8008e28 <HAL_TIM_Base_MspInit+0x27c>)
 8008d4c:	625a      	str	r2, [r3, #36]	; 0x24
 8008d4e:	4a36      	ldr	r2, [pc, #216]	; (8008e28 <HAL_TIM_Base_MspInit+0x27c>)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008d54:	e053      	b.n	8008dfe <HAL_TIM_Base_MspInit+0x252>
  else if(tim_baseHandle->Instance==TIM5)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a35      	ldr	r2, [pc, #212]	; (8008e30 <HAL_TIM_Base_MspInit+0x284>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d114      	bne.n	8008d8a <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008d60:	4b2a      	ldr	r3, [pc, #168]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	4a29      	ldr	r2, [pc, #164]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008d66:	f043 0308 	orr.w	r3, r3, #8
 8008d6a:	61d3      	str	r3, [r2, #28]
 8008d6c:	4b27      	ldr	r3, [pc, #156]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	f003 0308 	and.w	r3, r3, #8
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	2032      	movs	r0, #50	; 0x32
 8008d7e:	f001 f844 	bl	8009e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008d82:	2032      	movs	r0, #50	; 0x32
 8008d84:	f001 f85d 	bl	8009e42 <HAL_NVIC_EnableIRQ>
}
 8008d88:	e039      	b.n	8008dfe <HAL_TIM_Base_MspInit+0x252>
  else if(tim_baseHandle->Instance==TIM8)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a29      	ldr	r2, [pc, #164]	; (8008e34 <HAL_TIM_Base_MspInit+0x288>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d134      	bne.n	8008dfe <HAL_TIM_Base_MspInit+0x252>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008d94:	4b1d      	ldr	r3, [pc, #116]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008d96:	699b      	ldr	r3, [r3, #24]
 8008d98:	4a1c      	ldr	r2, [pc, #112]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008d9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008d9e:	6193      	str	r3, [r2, #24]
 8008da0:	4b1a      	ldr	r3, [pc, #104]	; (8008e0c <HAL_TIM_Base_MspInit+0x260>)
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008da8:	60bb      	str	r3, [r7, #8]
 8008daa:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Channel3;
 8008dac:	4b22      	ldr	r3, [pc, #136]	; (8008e38 <HAL_TIM_Base_MspInit+0x28c>)
 8008dae:	4a23      	ldr	r2, [pc, #140]	; (8008e3c <HAL_TIM_Base_MspInit+0x290>)
 8008db0:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008db2:	4b21      	ldr	r3, [pc, #132]	; (8008e38 <HAL_TIM_Base_MspInit+0x28c>)
 8008db4:	2210      	movs	r2, #16
 8008db6:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008db8:	4b1f      	ldr	r3, [pc, #124]	; (8008e38 <HAL_TIM_Base_MspInit+0x28c>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008dbe:	4b1e      	ldr	r3, [pc, #120]	; (8008e38 <HAL_TIM_Base_MspInit+0x28c>)
 8008dc0:	2280      	movs	r2, #128	; 0x80
 8008dc2:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008dc4:	4b1c      	ldr	r3, [pc, #112]	; (8008e38 <HAL_TIM_Base_MspInit+0x28c>)
 8008dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dca:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008dcc:	4b1a      	ldr	r3, [pc, #104]	; (8008e38 <HAL_TIM_Base_MspInit+0x28c>)
 8008dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dd2:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 8008dd4:	4b18      	ldr	r3, [pc, #96]	; (8008e38 <HAL_TIM_Base_MspInit+0x28c>)
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008dda:	4b17      	ldr	r3, [pc, #92]	; (8008e38 <HAL_TIM_Base_MspInit+0x28c>)
 8008ddc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008de0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8008de2:	4815      	ldr	r0, [pc, #84]	; (8008e38 <HAL_TIM_Base_MspInit+0x28c>)
 8008de4:	f001 f848 	bl	8009e78 <HAL_DMA_Init>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <HAL_TIM_Base_MspInit+0x246>
      Error_Handler();
 8008dee:	f7fd fe0f 	bl	8006a10 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a10      	ldr	r2, [pc, #64]	; (8008e38 <HAL_TIM_Base_MspInit+0x28c>)
 8008df6:	625a      	str	r2, [r3, #36]	; 0x24
 8008df8:	4a0f      	ldr	r2, [pc, #60]	; (8008e38 <HAL_TIM_Base_MspInit+0x28c>)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008dfe:	bf00      	nop
 8008e00:	3720      	adds	r7, #32
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	40012c00 	.word	0x40012c00
 8008e0c:	40021000 	.word	0x40021000
 8008e10:	2000dc94 	.word	0x2000dc94
 8008e14:	4002001c 	.word	0x4002001c
 8008e18:	40000400 	.word	0x40000400
 8008e1c:	2000dcd8 	.word	0x2000dcd8
 8008e20:	4002006c 	.word	0x4002006c
 8008e24:	40000800 	.word	0x40000800
 8008e28:	2000dd1c 	.word	0x2000dd1c
 8008e2c:	40020008 	.word	0x40020008
 8008e30:	40000c00 	.word	0x40000c00
 8008e34:	40013400 	.word	0x40013400
 8008e38:	2000dd60 	.word	0x2000dd60
 8008e3c:	40020430 	.word	0x40020430

08008e40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08a      	sub	sp, #40	; 0x28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e48:	f107 0318 	add.w	r3, r7, #24
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	605a      	str	r2, [r3, #4]
 8008e52:	609a      	str	r2, [r3, #8]
 8008e54:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a3d      	ldr	r2, [pc, #244]	; (8008f50 <HAL_TIM_MspPostInit+0x110>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d119      	bne.n	8008e94 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e60:	4b3c      	ldr	r3, [pc, #240]	; (8008f54 <HAL_TIM_MspPostInit+0x114>)
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	4a3b      	ldr	r2, [pc, #236]	; (8008f54 <HAL_TIM_MspPostInit+0x114>)
 8008e66:	f043 0304 	orr.w	r3, r3, #4
 8008e6a:	6193      	str	r3, [r2, #24]
 8008e6c:	4b39      	ldr	r3, [pc, #228]	; (8008f54 <HAL_TIM_MspPostInit+0x114>)
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	617b      	str	r3, [r7, #20]
 8008e76:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e7e:	2302      	movs	r3, #2
 8008e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e82:	2302      	movs	r3, #2
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e86:	f107 0318 	add.w	r3, r7, #24
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	4832      	ldr	r0, [pc, #200]	; (8008f58 <HAL_TIM_MspPostInit+0x118>)
 8008e8e:	f001 fc3b 	bl	800a708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8008e92:	e058      	b.n	8008f46 <HAL_TIM_MspPostInit+0x106>
  else if(timHandle->Instance==TIM3)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a30      	ldr	r2, [pc, #192]	; (8008f5c <HAL_TIM_MspPostInit+0x11c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d118      	bne.n	8008ed0 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e9e:	4b2d      	ldr	r3, [pc, #180]	; (8008f54 <HAL_TIM_MspPostInit+0x114>)
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	4a2c      	ldr	r2, [pc, #176]	; (8008f54 <HAL_TIM_MspPostInit+0x114>)
 8008ea4:	f043 0304 	orr.w	r3, r3, #4
 8008ea8:	6193      	str	r3, [r2, #24]
 8008eaa:	4b2a      	ldr	r3, [pc, #168]	; (8008f54 <HAL_TIM_MspPostInit+0x114>)
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	f003 0304 	and.w	r3, r3, #4
 8008eb2:	613b      	str	r3, [r7, #16]
 8008eb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008eb6:	2340      	movs	r3, #64	; 0x40
 8008eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eba:	2302      	movs	r3, #2
 8008ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ec2:	f107 0318 	add.w	r3, r7, #24
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4823      	ldr	r0, [pc, #140]	; (8008f58 <HAL_TIM_MspPostInit+0x118>)
 8008eca:	f001 fc1d 	bl	800a708 <HAL_GPIO_Init>
}
 8008ece:	e03a      	b.n	8008f46 <HAL_TIM_MspPostInit+0x106>
  else if(timHandle->Instance==TIM4)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a22      	ldr	r2, [pc, #136]	; (8008f60 <HAL_TIM_MspPostInit+0x120>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d118      	bne.n	8008f0c <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008eda:	4b1e      	ldr	r3, [pc, #120]	; (8008f54 <HAL_TIM_MspPostInit+0x114>)
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	4a1d      	ldr	r2, [pc, #116]	; (8008f54 <HAL_TIM_MspPostInit+0x114>)
 8008ee0:	f043 0308 	orr.w	r3, r3, #8
 8008ee4:	6193      	str	r3, [r2, #24]
 8008ee6:	4b1b      	ldr	r3, [pc, #108]	; (8008f54 <HAL_TIM_MspPostInit+0x114>)
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	f003 0308 	and.w	r3, r3, #8
 8008eee:	60fb      	str	r3, [r7, #12]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008ef2:	2340      	movs	r3, #64	; 0x40
 8008ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008efa:	2302      	movs	r3, #2
 8008efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008efe:	f107 0318 	add.w	r3, r7, #24
 8008f02:	4619      	mov	r1, r3
 8008f04:	4817      	ldr	r0, [pc, #92]	; (8008f64 <HAL_TIM_MspPostInit+0x124>)
 8008f06:	f001 fbff 	bl	800a708 <HAL_GPIO_Init>
}
 8008f0a:	e01c      	b.n	8008f46 <HAL_TIM_MspPostInit+0x106>
  else if(timHandle->Instance==TIM8)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a15      	ldr	r2, [pc, #84]	; (8008f68 <HAL_TIM_MspPostInit+0x128>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d117      	bne.n	8008f46 <HAL_TIM_MspPostInit+0x106>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f16:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <HAL_TIM_MspPostInit+0x114>)
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	4a0e      	ldr	r2, [pc, #56]	; (8008f54 <HAL_TIM_MspPostInit+0x114>)
 8008f1c:	f043 0310 	orr.w	r3, r3, #16
 8008f20:	6193      	str	r3, [r2, #24]
 8008f22:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <HAL_TIM_MspPostInit+0x114>)
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	f003 0310 	and.w	r3, r3, #16
 8008f2a:	60bb      	str	r3, [r7, #8]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008f2e:	2340      	movs	r3, #64	; 0x40
 8008f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f32:	2302      	movs	r3, #2
 8008f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f36:	2302      	movs	r3, #2
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f3a:	f107 0318 	add.w	r3, r7, #24
 8008f3e:	4619      	mov	r1, r3
 8008f40:	480a      	ldr	r0, [pc, #40]	; (8008f6c <HAL_TIM_MspPostInit+0x12c>)
 8008f42:	f001 fbe1 	bl	800a708 <HAL_GPIO_Init>
}
 8008f46:	bf00      	nop
 8008f48:	3728      	adds	r7, #40	; 0x28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	40012c00 	.word	0x40012c00
 8008f54:	40021000 	.word	0x40021000
 8008f58:	40010800 	.word	0x40010800
 8008f5c:	40000400 	.word	0x40000400
 8008f60:	40000800 	.word	0x40000800
 8008f64:	40010c00 	.word	0x40010c00
 8008f68:	40013400 	.word	0x40013400
 8008f6c:	40011000 	.word	0x40011000

08008f70 <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 8008f70:	b580      	push	{r7, lr}
 8008f72:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8008f74:	4b06      	ldr	r3, [pc, #24]	; (8008f90 <TIMER_INIT+0x20>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f06f 0201 	mvn.w	r2, #1
 8008f7c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 8008f7e:	4804      	ldr	r0, [pc, #16]	; (8008f90 <TIMER_INIT+0x20>)
 8008f80:	f002 faf1 	bl	800b566 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8008f84:	4802      	ldr	r0, [pc, #8]	; (8008f90 <TIMER_INIT+0x20>)
 8008f86:	f002 fb32 	bl	800b5ee <HAL_TIM_Base_Start_IT>
}
 8008f8a:	bf00      	nop
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	2000dc14 	.word	0x2000dc14

08008f94 <timer_min>:
	}
	__HAL_TIM_DISABLE(&htim2);
}

void timer_min(uint8_t min)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8008f9e:	4b0b      	ldr	r3, [pc, #44]	; (8008fcc <timer_min+0x38>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f06f 0201 	mvn.w	r2, #1
 8008fa6:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 8008fa8:	79fb      	ldrb	r3, [r7, #7]
 8008faa:	005b      	lsls	r3, r3, #1
 8008fac:	b2da      	uxtb	r2, r3
 8008fae:	4b08      	ldr	r3, [pc, #32]	; (8008fd0 <timer_min+0x3c>)
 8008fb0:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 8008fb2:	4b08      	ldr	r3, [pc, #32]	; (8008fd4 <timer_min+0x40>)
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8008fb8:	4804      	ldr	r0, [pc, #16]	; (8008fcc <timer_min+0x38>)
 8008fba:	f002 fad4 	bl	800b566 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8008fbe:	4803      	ldr	r0, [pc, #12]	; (8008fcc <timer_min+0x38>)
 8008fc0:	f002 fb15 	bl	800b5ee <HAL_TIM_Base_Start_IT>
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	2000db94 	.word	0x2000db94
 8008fd0:	2000dda4 	.word	0x2000dda4
 8008fd4:	2000dda5 	.word	0x2000dda5

08008fd8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008fdc:	4b11      	ldr	r3, [pc, #68]	; (8009024 <MX_USART1_UART_Init+0x4c>)
 8008fde:	4a12      	ldr	r2, [pc, #72]	; (8009028 <MX_USART1_UART_Init+0x50>)
 8008fe0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008fe2:	4b10      	ldr	r3, [pc, #64]	; (8009024 <MX_USART1_UART_Init+0x4c>)
 8008fe4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008fe8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008fea:	4b0e      	ldr	r3, [pc, #56]	; (8009024 <MX_USART1_UART_Init+0x4c>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008ff0:	4b0c      	ldr	r3, [pc, #48]	; (8009024 <MX_USART1_UART_Init+0x4c>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008ff6:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <MX_USART1_UART_Init+0x4c>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008ffc:	4b09      	ldr	r3, [pc, #36]	; (8009024 <MX_USART1_UART_Init+0x4c>)
 8008ffe:	220c      	movs	r2, #12
 8009000:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009002:	4b08      	ldr	r3, [pc, #32]	; (8009024 <MX_USART1_UART_Init+0x4c>)
 8009004:	2200      	movs	r2, #0
 8009006:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009008:	4b06      	ldr	r3, [pc, #24]	; (8009024 <MX_USART1_UART_Init+0x4c>)
 800900a:	2200      	movs	r2, #0
 800900c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800900e:	4805      	ldr	r0, [pc, #20]	; (8009024 <MX_USART1_UART_Init+0x4c>)
 8009010:	f003 fc63 	bl	800c8da <HAL_UART_Init>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800901a:	f7fd fcf9 	bl	8006a10 <Error_Handler>
  }

}
 800901e:	bf00      	nop
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	2000dda8 	.word	0x2000dda8
 8009028:	40013800 	.word	0x40013800

0800902c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8009030:	4b11      	ldr	r3, [pc, #68]	; (8009078 <MX_USART2_UART_Init+0x4c>)
 8009032:	4a12      	ldr	r2, [pc, #72]	; (800907c <MX_USART2_UART_Init+0x50>)
 8009034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8009036:	4b10      	ldr	r3, [pc, #64]	; (8009078 <MX_USART2_UART_Init+0x4c>)
 8009038:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800903c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800903e:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <MX_USART2_UART_Init+0x4c>)
 8009040:	2200      	movs	r2, #0
 8009042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <MX_USART2_UART_Init+0x4c>)
 8009046:	2200      	movs	r2, #0
 8009048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800904a:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <MX_USART2_UART_Init+0x4c>)
 800904c:	2200      	movs	r2, #0
 800904e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009050:	4b09      	ldr	r3, [pc, #36]	; (8009078 <MX_USART2_UART_Init+0x4c>)
 8009052:	220c      	movs	r2, #12
 8009054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009056:	4b08      	ldr	r3, [pc, #32]	; (8009078 <MX_USART2_UART_Init+0x4c>)
 8009058:	2200      	movs	r2, #0
 800905a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800905c:	4b06      	ldr	r3, [pc, #24]	; (8009078 <MX_USART2_UART_Init+0x4c>)
 800905e:	2200      	movs	r2, #0
 8009060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009062:	4805      	ldr	r0, [pc, #20]	; (8009078 <MX_USART2_UART_Init+0x4c>)
 8009064:	f003 fc39 	bl	800c8da <HAL_UART_Init>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800906e:	f7fd fccf 	bl	8006a10 <Error_Handler>
  }

}
 8009072:	bf00      	nop
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	2000dde8 	.word	0x2000dde8
 800907c:	40004400 	.word	0x40004400

08009080 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08a      	sub	sp, #40	; 0x28
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009088:	f107 0318 	add.w	r3, r7, #24
 800908c:	2200      	movs	r2, #0
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	605a      	str	r2, [r3, #4]
 8009092:	609a      	str	r2, [r3, #8]
 8009094:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a3b      	ldr	r2, [pc, #236]	; (8009188 <HAL_UART_MspInit+0x108>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d13a      	bne.n	8009116 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80090a0:	4b3a      	ldr	r3, [pc, #232]	; (800918c <HAL_UART_MspInit+0x10c>)
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	4a39      	ldr	r2, [pc, #228]	; (800918c <HAL_UART_MspInit+0x10c>)
 80090a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090aa:	6193      	str	r3, [r2, #24]
 80090ac:	4b37      	ldr	r3, [pc, #220]	; (800918c <HAL_UART_MspInit+0x10c>)
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090b4:	617b      	str	r3, [r7, #20]
 80090b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090b8:	4b34      	ldr	r3, [pc, #208]	; (800918c <HAL_UART_MspInit+0x10c>)
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	4a33      	ldr	r2, [pc, #204]	; (800918c <HAL_UART_MspInit+0x10c>)
 80090be:	f043 0304 	orr.w	r3, r3, #4
 80090c2:	6193      	str	r3, [r2, #24]
 80090c4:	4b31      	ldr	r3, [pc, #196]	; (800918c <HAL_UART_MspInit+0x10c>)
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	613b      	str	r3, [r7, #16]
 80090ce:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80090d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090d6:	2302      	movs	r3, #2
 80090d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80090da:	2303      	movs	r3, #3
 80090dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090de:	f107 0318 	add.w	r3, r7, #24
 80090e2:	4619      	mov	r1, r3
 80090e4:	482a      	ldr	r0, [pc, #168]	; (8009190 <HAL_UART_MspInit+0x110>)
 80090e6:	f001 fb0f 	bl	800a708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80090ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090f0:	2300      	movs	r3, #0
 80090f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f4:	2300      	movs	r3, #0
 80090f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090f8:	f107 0318 	add.w	r3, r7, #24
 80090fc:	4619      	mov	r1, r3
 80090fe:	4824      	ldr	r0, [pc, #144]	; (8009190 <HAL_UART_MspInit+0x110>)
 8009100:	f001 fb02 	bl	800a708 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009104:	2200      	movs	r2, #0
 8009106:	2100      	movs	r1, #0
 8009108:	2025      	movs	r0, #37	; 0x25
 800910a:	f000 fe7e 	bl	8009e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800910e:	2025      	movs	r0, #37	; 0x25
 8009110:	f000 fe97 	bl	8009e42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009114:	e034      	b.n	8009180 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a1e      	ldr	r2, [pc, #120]	; (8009194 <HAL_UART_MspInit+0x114>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d12f      	bne.n	8009180 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009120:	4b1a      	ldr	r3, [pc, #104]	; (800918c <HAL_UART_MspInit+0x10c>)
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	4a19      	ldr	r2, [pc, #100]	; (800918c <HAL_UART_MspInit+0x10c>)
 8009126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800912a:	61d3      	str	r3, [r2, #28]
 800912c:	4b17      	ldr	r3, [pc, #92]	; (800918c <HAL_UART_MspInit+0x10c>)
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009138:	4b14      	ldr	r3, [pc, #80]	; (800918c <HAL_UART_MspInit+0x10c>)
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	4a13      	ldr	r2, [pc, #76]	; (800918c <HAL_UART_MspInit+0x10c>)
 800913e:	f043 0304 	orr.w	r3, r3, #4
 8009142:	6193      	str	r3, [r2, #24]
 8009144:	4b11      	ldr	r3, [pc, #68]	; (800918c <HAL_UART_MspInit+0x10c>)
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	60bb      	str	r3, [r7, #8]
 800914e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009150:	2304      	movs	r3, #4
 8009152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009154:	2302      	movs	r3, #2
 8009156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009158:	2303      	movs	r3, #3
 800915a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800915c:	f107 0318 	add.w	r3, r7, #24
 8009160:	4619      	mov	r1, r3
 8009162:	480b      	ldr	r0, [pc, #44]	; (8009190 <HAL_UART_MspInit+0x110>)
 8009164:	f001 fad0 	bl	800a708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009168:	2308      	movs	r3, #8
 800916a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800916c:	2300      	movs	r3, #0
 800916e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009170:	2300      	movs	r3, #0
 8009172:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009174:	f107 0318 	add.w	r3, r7, #24
 8009178:	4619      	mov	r1, r3
 800917a:	4805      	ldr	r0, [pc, #20]	; (8009190 <HAL_UART_MspInit+0x110>)
 800917c:	f001 fac4 	bl	800a708 <HAL_GPIO_Init>
}
 8009180:	bf00      	nop
 8009182:	3728      	adds	r7, #40	; 0x28
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	40013800 	.word	0x40013800
 800918c:	40021000 	.word	0x40021000
 8009190:	40010800 	.word	0x40010800
 8009194:	40004400 	.word	0x40004400

08009198 <_Z10printToLCDRK6Stringt>:
    newStr.len = strlen(s) + str.len;
    strcpy(newStr.str, s);
    strcat(newStr.str, str.str);
    return newStr;
};
void printToLCD(const String& string, uint16_t row){
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	807b      	strh	r3, [r7, #2]
  char str[20];
  sprintf(str, "                   ");
 80091a4:	f107 030c 	add.w	r3, r7, #12
 80091a8:	490e      	ldr	r1, [pc, #56]	; (80091e4 <_Z10printToLCDRK6Stringt+0x4c>)
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff f878 	bl	80082a0 <sprintf_>
  LCD_DrawString(0, row*15, str);
 80091b0:	887b      	ldrh	r3, [r7, #2]
 80091b2:	461a      	mov	r2, r3
 80091b4:	0112      	lsls	r2, r2, #4
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	f107 020c 	add.w	r2, r7, #12
 80091be:	4619      	mov	r1, r3
 80091c0:	2000      	movs	r0, #0
 80091c2:	f7fd faab 	bl	800671c <LCD_DrawString>
  LCD_DrawString(0, row*15, string.str);
 80091c6:	887b      	ldrh	r3, [r7, #2]
 80091c8:	461a      	mov	r2, r3
 80091ca:	0112      	lsls	r2, r2, #4
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	4619      	mov	r1, r3
 80091d4:	2000      	movs	r0, #0
 80091d6:	f7fd faa1 	bl	800671c <LCD_DrawString>
}
 80091da:	bf00      	nop
 80091dc:	3720      	adds	r7, #32
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	0800d620 	.word	0x0800d620

080091e8 <_Z8debugLogRK6Stringt>:
        sprintf(str, "%02X", arr[i]);
        LCD_DrawString(i*15, row*15, str);
    }
}

void debugLog(const String& string, uint16_t row){
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	460b      	mov	r3, r1
 80091f2:	807b      	strh	r3, [r7, #2]
    printToLCD(string, row);
 80091f4:	887b      	ldrh	r3, [r7, #2]
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7ff ffcd 	bl	8009198 <_Z10printToLCDRK6Stringt>
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <XPT2046_DelayUS>:
strType_XPT2046_TouchPara strXPT2046_TouchPara = { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 8009206:	b480      	push	{r7}
 8009208:	b085      	sub	sp, #20
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 800920e:	2300      	movs	r3, #0
 8009210:	60fb      	str	r3, [r7, #12]
 8009212:	e00a      	b.n	800922a <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 8009214:	230c      	movs	r3, #12
 8009216:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 8009218:	bf00      	nop
 800921a:	7afb      	ldrb	r3, [r7, #11]
 800921c:	1e5a      	subs	r2, r3, #1
 800921e:	72fa      	strb	r2, [r7, #11]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1fa      	bne.n	800921a <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	3301      	adds	r3, #1
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	429a      	cmp	r2, r3
 8009230:	d3f0      	bcc.n	8009214 <XPT2046_DelayUS+0xe>
			;

	}

}
 8009232:	bf00      	nop
 8009234:	bf00      	nop
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	bc80      	pop	{r7}
 800923c:	4770      	bx	lr
	...

08009240 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 800924a:	2200      	movs	r2, #0
 800924c:	2104      	movs	r1, #4
 800924e:	481d      	ldr	r0, [pc, #116]	; (80092c4 <XPT2046_WriteCMD+0x84>)
 8009250:	f001 fc09 	bl	800aa66 <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 8009254:	2200      	movs	r2, #0
 8009256:	2101      	movs	r1, #1
 8009258:	481a      	ldr	r0, [pc, #104]	; (80092c4 <XPT2046_WriteCMD+0x84>)
 800925a:	f001 fc04 	bl	800aa66 <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 800925e:	2300      	movs	r3, #0
 8009260:	73fb      	strb	r3, [r7, #15]
 8009262:	e027      	b.n	80092b4 <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8009264:	79fa      	ldrb	r2, [r7, #7]
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	f1c3 0307 	rsb	r3, r3, #7
 800926c:	fa42 f303 	asr.w	r3, r2, r3
 8009270:	f003 0301 	and.w	r3, r3, #1
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <XPT2046_WriteCMD+0x44>
 8009278:	2201      	movs	r2, #1
 800927a:	2104      	movs	r1, #4
 800927c:	4811      	ldr	r0, [pc, #68]	; (80092c4 <XPT2046_WriteCMD+0x84>)
 800927e:	f001 fbf2 	bl	800aa66 <HAL_GPIO_WritePin>
 8009282:	e004      	b.n	800928e <XPT2046_WriteCMD+0x4e>
 8009284:	2200      	movs	r2, #0
 8009286:	2104      	movs	r1, #4
 8009288:	480e      	ldr	r0, [pc, #56]	; (80092c4 <XPT2046_WriteCMD+0x84>)
 800928a:	f001 fbec 	bl	800aa66 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 800928e:	2005      	movs	r0, #5
 8009290:	f7ff ffb9 	bl	8009206 <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 8009294:	2201      	movs	r2, #1
 8009296:	2101      	movs	r1, #1
 8009298:	480a      	ldr	r0, [pc, #40]	; (80092c4 <XPT2046_WriteCMD+0x84>)
 800929a:	f001 fbe4 	bl	800aa66 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 800929e:	2005      	movs	r0, #5
 80092a0:	f7ff ffb1 	bl	8009206 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 80092a4:	2200      	movs	r2, #0
 80092a6:	2101      	movs	r1, #1
 80092a8:	4806      	ldr	r0, [pc, #24]	; (80092c4 <XPT2046_WriteCMD+0x84>)
 80092aa:	f001 fbdc 	bl	800aa66 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	3301      	adds	r3, #1
 80092b2:	73fb      	strb	r3, [r7, #15]
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	2b07      	cmp	r3, #7
 80092b8:	d9d4      	bls.n	8009264 <XPT2046_WriteCMD+0x24>
	}

}
 80092ba:	bf00      	nop
 80092bc:	bf00      	nop
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	40011800 	.word	0x40011800

080092c8 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 80092ce:	2300      	movs	r3, #0
 80092d0:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 80092d2:	2200      	movs	r2, #0
 80092d4:	2104      	movs	r1, #4
 80092d6:	4819      	ldr	r0, [pc, #100]	; (800933c <XPT2046_ReadCMD+0x74>)
 80092d8:	f001 fbc5 	bl	800aa66 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80092dc:	2201      	movs	r2, #1
 80092de:	2101      	movs	r1, #1
 80092e0:	4816      	ldr	r0, [pc, #88]	; (800933c <XPT2046_ReadCMD+0x74>)
 80092e2:	f001 fbc0 	bl	800aa66 <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 80092e6:	2300      	movs	r3, #0
 80092e8:	71fb      	strb	r3, [r7, #7]
 80092ea:	e01e      	b.n	800932a <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 80092ec:	2200      	movs	r2, #0
 80092ee:	2101      	movs	r1, #1
 80092f0:	4812      	ldr	r0, [pc, #72]	; (800933c <XPT2046_ReadCMD+0x74>)
 80092f2:	f001 fbb8 	bl	800aa66 <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 80092f6:	2108      	movs	r1, #8
 80092f8:	4810      	ldr	r0, [pc, #64]	; (800933c <XPT2046_ReadCMD+0x74>)
 80092fa:	f001 fb9d 	bl	800aa38 <HAL_GPIO_ReadPin>
 80092fe:	4603      	mov	r3, r0
 8009300:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 8009302:	887a      	ldrh	r2, [r7, #2]
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	f1c3 030b 	rsb	r3, r3, #11
 800930a:	fa02 f303 	lsl.w	r3, r2, r3
 800930e:	b21a      	sxth	r2, r3
 8009310:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009314:	4313      	orrs	r3, r2
 8009316:	b21b      	sxth	r3, r3
 8009318:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 800931a:	2201      	movs	r2, #1
 800931c:	2101      	movs	r1, #1
 800931e:	4807      	ldr	r0, [pc, #28]	; (800933c <XPT2046_ReadCMD+0x74>)
 8009320:	f001 fba1 	bl	800aa66 <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	3301      	adds	r3, #1
 8009328:	71fb      	strb	r3, [r7, #7]
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	2b0b      	cmp	r3, #11
 800932e:	d9dd      	bls.n	80092ec <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8009330:	88bb      	ldrh	r3, [r7, #4]

}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	40011800 	.word	0x40011800

08009340 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff ff77 	bl	8009240 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 8009352:	f7ff ffb9 	bl	80092c8 <XPT2046_ReadCMD>
 8009356:	4603      	mov	r3, r0

}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 800936a:	2090      	movs	r0, #144	; 0x90
 800936c:	f7ff ffe8 	bl	8009340 <XPT2046_ReadAdc>
 8009370:	4603      	mov	r3, r0
 8009372:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 8009374:	2001      	movs	r0, #1
 8009376:	f7ff ff46 	bl	8009206 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 800937a:	20d0      	movs	r0, #208	; 0xd0
 800937c:	f7ff ffe0 	bl	8009340 <XPT2046_ReadAdc>
 8009380:	4603      	mov	r3, r0
 8009382:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	89fa      	ldrh	r2, [r7, #14]
 8009388:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	89ba      	ldrh	r2, [r7, #12]
 800938e:	801a      	strh	r2, [r3, #0]

}
 8009390:	bf00      	nop
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 8009398:	b580      	push	{r7, lr}
 800939a:	b092      	sub	sp, #72	; 0x48
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80093a0:	2300      	movs	r3, #0
 80093a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 80093a6:	f107 0308 	add.w	r3, r7, #8
 80093aa:	2228      	movs	r2, #40	; 0x28
 80093ac:	2100      	movs	r1, #0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f004 f84a 	bl	800d448 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 80093b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80093b8:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80093bc:	4611      	mov	r1, r2
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff ffce 	bl	8009360 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 80093c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80093c8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80093cc:	005b      	lsls	r3, r3, #1
 80093ce:	3348      	adds	r3, #72	; 0x48
 80093d0:	443b      	add	r3, r7
 80093d2:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 80093d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80093da:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80093de:	330a      	adds	r3, #10
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	3348      	adds	r3, #72	; 0x48
 80093e4:	443b      	add	r3, r7
 80093e6:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 80093ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80093ee:	3301      	adds	r3, #1
 80093f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 80093f4:	2110      	movs	r1, #16
 80093f6:	4871      	ldr	r0, [pc, #452]	; (80095bc <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80093f8:	f001 fb1e 	bl	800aa38 <HAL_GPIO_ReadPin>
 80093fc:	4603      	mov	r3, r0
			&& (ucCount < 10));
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d103      	bne.n	800940a <XPT2046_ReadAdc_Smooth_XY+0x72>
 8009402:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009406:	2b09      	cmp	r3, #9
 8009408:	d9d4      	bls.n	80093b4 <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 800940a:	2110      	movs	r1, #16
 800940c:	486b      	ldr	r0, [pc, #428]	; (80095bc <XPT2046_ReadAdc_Smooth_XY+0x224>)
 800940e:	f001 fb13 	bl	800aa38 <HAL_GPIO_ReadPin>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8009418:	4b69      	ldr	r3, [pc, #420]	; (80095c0 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 800941a:	2200      	movs	r2, #0
 800941c:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 800941e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009422:	2b0a      	cmp	r3, #10
 8009424:	f040 80c4 	bne.w	80095b0 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 8009428:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800942c:	643b      	str	r3, [r7, #64]	; 0x40
 800942e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009430:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 8009432:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009436:	63bb      	str	r3, [r7, #56]	; 0x38
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 800943c:	2301      	movs	r3, #1
 800943e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009442:	e02b      	b.n	800949c <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 8009444:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	3348      	adds	r3, #72	; 0x48
 800944c:	443b      	add	r3, r7
 800944e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8009452:	461a      	mov	r2, r3
 8009454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009456:	4293      	cmp	r3, r2
 8009458:	dd08      	ble.n	800946c <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 800945a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	3348      	adds	r3, #72	; 0x48
 8009462:	443b      	add	r3, r7
 8009464:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8009468:	643b      	str	r3, [r7, #64]	; 0x40
 800946a:	e012      	b.n	8009492 <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 800946c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	3348      	adds	r3, #72	; 0x48
 8009474:	443b      	add	r3, r7
 8009476:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800947a:	461a      	mov	r2, r3
 800947c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947e:	4293      	cmp	r3, r2
 8009480:	da07      	bge.n	8009492 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 8009482:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	3348      	adds	r3, #72	; 0x48
 800948a:	443b      	add	r3, r7
 800948c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8009490:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8009492:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009496:	3301      	adds	r3, #1
 8009498:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800949c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80094a0:	2b09      	cmp	r3, #9
 80094a2:	d9cf      	bls.n	8009444 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 80094a4:	2301      	movs	r3, #1
 80094a6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80094aa:	e02f      	b.n	800950c <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 80094ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80094b0:	330a      	adds	r3, #10
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	3348      	adds	r3, #72	; 0x48
 80094b6:	443b      	add	r3, r7
 80094b8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80094bc:	461a      	mov	r2, r3
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	4293      	cmp	r3, r2
 80094c2:	dd09      	ble.n	80094d8 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 80094c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80094c8:	330a      	adds	r3, #10
 80094ca:	005b      	lsls	r3, r3, #1
 80094cc:	3348      	adds	r3, #72	; 0x48
 80094ce:	443b      	add	r3, r7
 80094d0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80094d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80094d6:	e014      	b.n	8009502 <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 80094d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80094dc:	330a      	adds	r3, #10
 80094de:	005b      	lsls	r3, r3, #1
 80094e0:	3348      	adds	r3, #72	; 0x48
 80094e2:	443b      	add	r3, r7
 80094e4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80094e8:	461a      	mov	r2, r3
 80094ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ec:	4293      	cmp	r3, r2
 80094ee:	da08      	bge.n	8009502 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 80094f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80094f4:	330a      	adds	r3, #10
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	3348      	adds	r3, #72	; 0x48
 80094fa:	443b      	add	r3, r7
 80094fc:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8009500:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 8009502:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009506:	3301      	adds	r3, #1
 8009508:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800950c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009510:	2b09      	cmp	r3, #9
 8009512:	d9cb      	bls.n	80094ac <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8009514:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009518:	461a      	mov	r2, r3
 800951a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800951e:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 8009520:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009524:	4413      	add	r3, r2
 8009526:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800952a:	4413      	add	r3, r2
 800952c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009530:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 8009532:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009536:	4413      	add	r3, r2
 8009538:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800953c:	4413      	add	r3, r2
 800953e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009542:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 8009544:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009548:	4413      	add	r3, r2
 800954a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800954e:	441a      	add	r2, r3
 8009550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009552:	1ad2      	subs	r2, r2, r3
 8009554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009556:	1ad3      	subs	r3, r2, r3
				>> 3;
 8009558:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 800955a:	b29a      	uxth	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8009560:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009564:	461a      	mov	r2, r3
 8009566:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800956a:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 800956c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009570:	4413      	add	r3, r2
 8009572:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8009576:	4413      	add	r3, r2
 8009578:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800957c:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 800957e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009582:	4413      	add	r3, r2
 8009584:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8009588:	4413      	add	r3, r2
 800958a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800958e:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8009590:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8009594:	4413      	add	r3, r2
 8009596:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800959a:	441a      	add	r2, r3
 800959c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959e:	1ad2      	subs	r2, r2, r3
 80095a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a2:	1ad3      	subs	r3, r2, r3
				>> 3;
 80095a4:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	805a      	strh	r2, [r3, #2]

		return 1;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e000      	b.n	80095b2 <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 80095b0:	2300      	movs	r3, #0

}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3748      	adds	r7, #72	; 0x48
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	40011800 	.word	0x40011800
 80095c0:	2000de28 	.word	0x2000de28

080095c4 <XPT2046_Get_TouchedPoint>:
	return 0;

}

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 80095c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 80095d0:	2301      	movs	r3, #1
 80095d2:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 80095d4:	f107 0308 	add.w	r3, r7, #8
 80095d8:	4618      	mov	r0, r3
 80095da:	f7ff fedd 	bl	8009398 <XPT2046_ReadAdc_Smooth_XY>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d06e      	beq.n	80096c2 <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80095ea:	893b      	ldrh	r3, [r7, #8]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7f6 ff75 	bl	80004dc <__aeabi_i2d>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	4620      	mov	r0, r4
 80095f8:	4629      	mov	r1, r5
 80095fa:	f7f6 ffd9 	bl	80005b0 <__aeabi_dmul>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	4690      	mov	r8, r2
 8009604:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800960c:	897b      	ldrh	r3, [r7, #10]
 800960e:	4618      	mov	r0, r3
 8009610:	f7f6 ff64 	bl	80004dc <__aeabi_i2d>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	4620      	mov	r0, r4
 800961a:	4629      	mov	r1, r5
 800961c:	f7f6 ffc8 	bl	80005b0 <__aeabi_dmul>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4640      	mov	r0, r8
 8009626:	4649      	mov	r1, r9
 8009628:	f7f6 fe0c 	bl	8000244 <__adddf3>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	4610      	mov	r0, r2
 8009632:	4619      	mov	r1, r3
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800963a:	f7f6 fe03 	bl	8000244 <__adddf3>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8009642:	4610      	mov	r0, r2
 8009644:	4619      	mov	r1, r3
 8009646:	f7f7 fa75 	bl	8000b34 <__aeabi_d2uiz>
 800964a:	4603      	mov	r3, r0
 800964c:	b29a      	uxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8009658:	893b      	ldrh	r3, [r7, #8]
 800965a:	4618      	mov	r0, r3
 800965c:	f7f6 ff3e 	bl	80004dc <__aeabi_i2d>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4620      	mov	r0, r4
 8009666:	4629      	mov	r1, r5
 8009668:	f7f6 ffa2 	bl	80005b0 <__aeabi_dmul>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4690      	mov	r8, r2
 8009672:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800967a:	897b      	ldrh	r3, [r7, #10]
 800967c:	4618      	mov	r0, r3
 800967e:	f7f6 ff2d 	bl	80004dc <__aeabi_i2d>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4620      	mov	r0, r4
 8009688:	4629      	mov	r1, r5
 800968a:	f7f6 ff91 	bl	80005b0 <__aeabi_dmul>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4640      	mov	r0, r8
 8009694:	4649      	mov	r1, r9
 8009696:	f7f6 fdd5 	bl	8000244 <__adddf3>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	4610      	mov	r0, r2
 80096a0:	4619      	mov	r1, r3
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80096a8:	f7f6 fdcc 	bl	8000244 <__adddf3>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 80096b0:	4610      	mov	r0, r2
 80096b2:	4619      	mov	r1, r3
 80096b4:	f7f7 fa3e 	bl	8000b34 <__aeabi_d2uiz>
 80096b8:	4603      	mov	r3, r0
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	805a      	strh	r2, [r3, #2]
 80096c0:	e001      	b.n	80096c6 <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 80096c6:	7bfb      	ldrb	r3, [r7, #15]

}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080096d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80096d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80096d6:	e003      	b.n	80096e0 <LoopCopyDataInit>

080096d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80096d8:	4b0b      	ldr	r3, [pc, #44]	; (8009708 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80096da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80096dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80096de:	3104      	adds	r1, #4

080096e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80096e0:	480a      	ldr	r0, [pc, #40]	; (800970c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80096e2:	4b0b      	ldr	r3, [pc, #44]	; (8009710 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80096e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80096e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80096e8:	d3f6      	bcc.n	80096d8 <CopyDataInit>
  ldr r2, =_sbss
 80096ea:	4a0a      	ldr	r2, [pc, #40]	; (8009714 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80096ec:	e002      	b.n	80096f4 <LoopFillZerobss>

080096ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80096ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80096f0:	f842 3b04 	str.w	r3, [r2], #4

080096f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80096f4:	4b08      	ldr	r3, [pc, #32]	; (8009718 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80096f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80096f8:	d3f9      	bcc.n	80096ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80096fa:	f7fe ff57 	bl	80085ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80096fe:	f003 fe7f 	bl	800d400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009702:	f7fd f8dd 	bl	80068c0 <main>
  bx lr
 8009706:	4770      	bx	lr
  ldr r3, =_sidata
 8009708:	0802f554 	.word	0x0802f554
  ldr r0, =_sdata
 800970c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8009710:	200000c8 	.word	0x200000c8
  ldr r2, =_sbss
 8009714:	200000c8 	.word	0x200000c8
  ldr r3, = _ebss
 8009718:	2000de34 	.word	0x2000de34

0800971c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800971c:	e7fe      	b.n	800971c <ADC1_2_IRQHandler>
	...

08009720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009724:	4b08      	ldr	r3, [pc, #32]	; (8009748 <HAL_Init+0x28>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a07      	ldr	r2, [pc, #28]	; (8009748 <HAL_Init+0x28>)
 800972a:	f043 0310 	orr.w	r3, r3, #16
 800972e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009730:	2003      	movs	r0, #3
 8009732:	f000 fb5f 	bl	8009df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009736:	2000      	movs	r0, #0
 8009738:	f000 f808 	bl	800974c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800973c:	f7fe fdcc 	bl	80082d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	40022000 	.word	0x40022000

0800974c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009754:	4b12      	ldr	r3, [pc, #72]	; (80097a0 <HAL_InitTick+0x54>)
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	4b12      	ldr	r3, [pc, #72]	; (80097a4 <HAL_InitTick+0x58>)
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	4619      	mov	r1, r3
 800975e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009762:	fbb3 f3f1 	udiv	r3, r3, r1
 8009766:	fbb2 f3f3 	udiv	r3, r2, r3
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fb77 	bl	8009e5e <HAL_SYSTICK_Config>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e00e      	b.n	8009798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b0f      	cmp	r3, #15
 800977e:	d80a      	bhi.n	8009796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009780:	2200      	movs	r2, #0
 8009782:	6879      	ldr	r1, [r7, #4]
 8009784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009788:	f000 fb3f 	bl	8009e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800978c:	4a06      	ldr	r2, [pc, #24]	; (80097a8 <HAL_InitTick+0x5c>)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	e000      	b.n	8009798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
}
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	20000024 	.word	0x20000024
 80097a4:	2000005c 	.word	0x2000005c
 80097a8:	20000058 	.word	0x20000058

080097ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80097b0:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <HAL_IncTick+0x1c>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	461a      	mov	r2, r3
 80097b6:	4b05      	ldr	r3, [pc, #20]	; (80097cc <HAL_IncTick+0x20>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4413      	add	r3, r2
 80097bc:	4a03      	ldr	r2, [pc, #12]	; (80097cc <HAL_IncTick+0x20>)
 80097be:	6013      	str	r3, [r2, #0]
}
 80097c0:	bf00      	nop
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bc80      	pop	{r7}
 80097c6:	4770      	bx	lr
 80097c8:	2000005c 	.word	0x2000005c
 80097cc:	2000de2c 	.word	0x2000de2c

080097d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80097d0:	b480      	push	{r7}
 80097d2:	af00      	add	r7, sp, #0
  return uwTick;
 80097d4:	4b02      	ldr	r3, [pc, #8]	; (80097e0 <HAL_GetTick+0x10>)
 80097d6:	681b      	ldr	r3, [r3, #0]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	46bd      	mov	sp, r7
 80097dc:	bc80      	pop	{r7}
 80097de:	4770      	bx	lr
 80097e0:	2000de2c 	.word	0x2000de2c

080097e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80097ec:	f7ff fff0 	bl	80097d0 <HAL_GetTick>
 80097f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097fc:	d005      	beq.n	800980a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80097fe:	4b0a      	ldr	r3, [pc, #40]	; (8009828 <HAL_Delay+0x44>)
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4413      	add	r3, r2
 8009808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800980a:	bf00      	nop
 800980c:	f7ff ffe0 	bl	80097d0 <HAL_GetTick>
 8009810:	4602      	mov	r2, r0
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	429a      	cmp	r2, r3
 800981a:	d8f7      	bhi.n	800980c <HAL_Delay+0x28>
  {
  }
}
 800981c:	bf00      	nop
 800981e:	bf00      	nop
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	2000005c 	.word	0x2000005c

0800982c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800983c:	2300      	movs	r3, #0
 800983e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8009840:	2300      	movs	r3, #0
 8009842:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e0ce      	b.n	80099ec <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009858:	2b00      	cmp	r3, #0
 800985a:	d109      	bne.n	8009870 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7f9 f908 	bl	8002a80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f9bd 	bl	8009bf0 <ADC_ConversionStop_Disable>
 8009876:	4603      	mov	r3, r0
 8009878:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987e:	f003 0310 	and.w	r3, r3, #16
 8009882:	2b00      	cmp	r3, #0
 8009884:	f040 80a9 	bne.w	80099da <HAL_ADC_Init+0x1ae>
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f040 80a5 	bne.w	80099da <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009894:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009898:	f023 0302 	bic.w	r3, r3, #2
 800989c:	f043 0202 	orr.w	r2, r3, #2
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4951      	ldr	r1, [pc, #324]	; (80099f4 <HAL_ADC_Init+0x1c8>)
 80098ae:	428b      	cmp	r3, r1
 80098b0:	d10a      	bne.n	80098c8 <HAL_ADC_Init+0x9c>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80098ba:	d002      	beq.n	80098c2 <HAL_ADC_Init+0x96>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	69db      	ldr	r3, [r3, #28]
 80098c0:	e004      	b.n	80098cc <HAL_ADC_Init+0xa0>
 80098c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80098c6:	e001      	b.n	80098cc <HAL_ADC_Init+0xa0>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80098cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80098d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098e4:	d003      	beq.n	80098ee <HAL_ADC_Init+0xc2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d102      	bne.n	80098f4 <HAL_ADC_Init+0xc8>
 80098ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098f2:	e000      	b.n	80098f6 <HAL_ADC_Init+0xca>
 80098f4:	2300      	movs	r3, #0
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d119      	bne.n	8009938 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d109      	bne.n	8009920 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	3b01      	subs	r3, #1
 8009912:	035a      	lsls	r2, r3, #13
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	4313      	orrs	r3, r2
 8009918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800991c:	613b      	str	r3, [r7, #16]
 800991e:	e00b      	b.n	8009938 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009924:	f043 0220 	orr.w	r2, r3, #32
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009930:	f043 0201 	orr.w	r2, r3, #1
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	430a      	orrs	r2, r1
 800994a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	4b29      	ldr	r3, [pc, #164]	; (80099f8 <HAL_ADC_Init+0x1cc>)
 8009954:	4013      	ands	r3, r2
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	6812      	ldr	r2, [r2, #0]
 800995a:	68b9      	ldr	r1, [r7, #8]
 800995c:	430b      	orrs	r3, r1
 800995e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009968:	d003      	beq.n	8009972 <HAL_ADC_Init+0x146>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d104      	bne.n	800997c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	3b01      	subs	r3, #1
 8009978:	051b      	lsls	r3, r3, #20
 800997a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009982:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	430a      	orrs	r2, r1
 800998e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	689a      	ldr	r2, [r3, #8]
 8009996:	4b19      	ldr	r3, [pc, #100]	; (80099fc <HAL_ADC_Init+0x1d0>)
 8009998:	4013      	ands	r3, r2
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	429a      	cmp	r2, r3
 800999e:	d10b      	bne.n	80099b8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099aa:	f023 0303 	bic.w	r3, r3, #3
 80099ae:	f043 0201 	orr.w	r2, r3, #1
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80099b6:	e018      	b.n	80099ea <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099bc:	f023 0312 	bic.w	r3, r3, #18
 80099c0:	f043 0210 	orr.w	r2, r3, #16
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099cc:	f043 0201 	orr.w	r2, r3, #1
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80099d8:	e007      	b.n	80099ea <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099de:	f043 0210 	orr.w	r2, r3, #16
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80099ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	40013c00 	.word	0x40013c00
 80099f8:	ffe1f7fd 	.word	0xffe1f7fd
 80099fc:	ff1f0efe 	.word	0xff1f0efe

08009a00 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d101      	bne.n	8009a20 <HAL_ADC_ConfigChannel+0x20>
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	e0dc      	b.n	8009bda <HAL_ADC_ConfigChannel+0x1da>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	2b06      	cmp	r3, #6
 8009a2e:	d81c      	bhi.n	8009a6a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	3b05      	subs	r3, #5
 8009a42:	221f      	movs	r2, #31
 8009a44:	fa02 f303 	lsl.w	r3, r2, r3
 8009a48:	43db      	mvns	r3, r3
 8009a4a:	4019      	ands	r1, r3
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	6818      	ldr	r0, [r3, #0]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	4613      	mov	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	3b05      	subs	r3, #5
 8009a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	430a      	orrs	r2, r1
 8009a66:	635a      	str	r2, [r3, #52]	; 0x34
 8009a68:	e03c      	b.n	8009ae4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	2b0c      	cmp	r3, #12
 8009a70:	d81c      	bhi.n	8009aac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	3b23      	subs	r3, #35	; 0x23
 8009a84:	221f      	movs	r2, #31
 8009a86:	fa02 f303 	lsl.w	r3, r2, r3
 8009a8a:	43db      	mvns	r3, r3
 8009a8c:	4019      	ands	r1, r3
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	6818      	ldr	r0, [r3, #0]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	3b23      	subs	r3, #35	; 0x23
 8009a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8009aaa:	e01b      	b.n	8009ae4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	3b41      	subs	r3, #65	; 0x41
 8009abe:	221f      	movs	r2, #31
 8009ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac4:	43db      	mvns	r3, r3
 8009ac6:	4019      	ands	r1, r3
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	6818      	ldr	r0, [r3, #0]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	3b41      	subs	r3, #65	; 0x41
 8009ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b09      	cmp	r3, #9
 8009aea:	d91c      	bls.n	8009b26 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68d9      	ldr	r1, [r3, #12]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	4613      	mov	r3, r2
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	4413      	add	r3, r2
 8009afc:	3b1e      	subs	r3, #30
 8009afe:	2207      	movs	r2, #7
 8009b00:	fa02 f303 	lsl.w	r3, r2, r3
 8009b04:	43db      	mvns	r3, r3
 8009b06:	4019      	ands	r1, r3
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	6898      	ldr	r0, [r3, #8]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	4613      	mov	r3, r2
 8009b12:	005b      	lsls	r3, r3, #1
 8009b14:	4413      	add	r3, r2
 8009b16:	3b1e      	subs	r3, #30
 8009b18:	fa00 f203 	lsl.w	r2, r0, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	430a      	orrs	r2, r1
 8009b22:	60da      	str	r2, [r3, #12]
 8009b24:	e019      	b.n	8009b5a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6919      	ldr	r1, [r3, #16]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	4613      	mov	r3, r2
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	4413      	add	r3, r2
 8009b36:	2207      	movs	r2, #7
 8009b38:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3c:	43db      	mvns	r3, r3
 8009b3e:	4019      	ands	r1, r3
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	6898      	ldr	r0, [r3, #8]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	4413      	add	r3, r2
 8009b4e:	fa00 f203 	lsl.w	r2, r0, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b10      	cmp	r3, #16
 8009b60:	d003      	beq.n	8009b6a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8009b66:	2b11      	cmp	r3, #17
 8009b68:	d132      	bne.n	8009bd0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a1d      	ldr	r2, [pc, #116]	; (8009be4 <HAL_ADC_ConfigChannel+0x1e4>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d125      	bne.n	8009bc0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d126      	bne.n	8009bd0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009b90:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	d11a      	bne.n	8009bd0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009b9a:	4b13      	ldr	r3, [pc, #76]	; (8009be8 <HAL_ADC_ConfigChannel+0x1e8>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a13      	ldr	r2, [pc, #76]	; (8009bec <HAL_ADC_ConfigChannel+0x1ec>)
 8009ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba4:	0c9a      	lsrs	r2, r3, #18
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8009bb0:	e002      	b.n	8009bb8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1f9      	bne.n	8009bb2 <HAL_ADC_ConfigChannel+0x1b2>
 8009bbe:	e007      	b.n	8009bd0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc4:	f043 0220 	orr.w	r2, r3, #32
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3714      	adds	r7, #20
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bc80      	pop	{r7}
 8009be2:	4770      	bx	lr
 8009be4:	40012400 	.word	0x40012400
 8009be8:	20000024 	.word	0x20000024
 8009bec:	431bde83 	.word	0x431bde83

08009bf0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d127      	bne.n	8009c5a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0201 	bic.w	r2, r2, #1
 8009c18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009c1a:	f7ff fdd9 	bl	80097d0 <HAL_GetTick>
 8009c1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8009c20:	e014      	b.n	8009c4c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009c22:	f7ff fdd5 	bl	80097d0 <HAL_GetTick>
 8009c26:	4602      	mov	r2, r0
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d90d      	bls.n	8009c4c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c34:	f043 0210 	orr.w	r2, r3, #16
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c40:	f043 0201 	orr.w	r2, r3, #1
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e007      	b.n	8009c5c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d0e3      	beq.n	8009c22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009c74:	4b0c      	ldr	r3, [pc, #48]	; (8009ca8 <NVIC_SetPriorityGrouping+0x44>)
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009c80:	4013      	ands	r3, r2
 8009c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009c96:	4a04      	ldr	r2, [pc, #16]	; (8009ca8 <NVIC_SetPriorityGrouping+0x44>)
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	60d3      	str	r3, [r2, #12]
}
 8009c9c:	bf00      	nop
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bc80      	pop	{r7}
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	e000ed00 	.word	0xe000ed00

08009cac <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8009cac:	b480      	push	{r7}
 8009cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009cb0:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <NVIC_GetPriorityGrouping+0x18>)
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	0a1b      	lsrs	r3, r3, #8
 8009cb6:	f003 0307 	and.w	r3, r3, #7
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bc80      	pop	{r7}
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	e000ed00 	.word	0xe000ed00

08009cc8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	f003 021f 	and.w	r2, r3, #31
 8009cd8:	4906      	ldr	r1, [pc, #24]	; (8009cf4 <NVIC_EnableIRQ+0x2c>)
 8009cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cde:	095b      	lsrs	r3, r3, #5
 8009ce0:	2001      	movs	r0, #1
 8009ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8009ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009cea:	bf00      	nop
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bc80      	pop	{r7}
 8009cf2:	4770      	bx	lr
 8009cf4:	e000e100 	.word	0xe000e100

08009cf8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	6039      	str	r1, [r7, #0]
 8009d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8009d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	da0b      	bge.n	8009d24 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	490c      	ldr	r1, [pc, #48]	; (8009d44 <NVIC_SetPriority+0x4c>)
 8009d12:	79fb      	ldrb	r3, [r7, #7]
 8009d14:	f003 030f 	and.w	r3, r3, #15
 8009d18:	3b04      	subs	r3, #4
 8009d1a:	0112      	lsls	r2, r2, #4
 8009d1c:	b2d2      	uxtb	r2, r2
 8009d1e:	440b      	add	r3, r1
 8009d20:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009d22:	e009      	b.n	8009d38 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	4907      	ldr	r1, [pc, #28]	; (8009d48 <NVIC_SetPriority+0x50>)
 8009d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d2e:	0112      	lsls	r2, r2, #4
 8009d30:	b2d2      	uxtb	r2, r2
 8009d32:	440b      	add	r3, r1
 8009d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bc80      	pop	{r7}
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	e000ed00 	.word	0xe000ed00
 8009d48:	e000e100 	.word	0xe000e100

08009d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b089      	sub	sp, #36	; 0x24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f003 0307 	and.w	r3, r3, #7
 8009d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	f1c3 0307 	rsb	r3, r3, #7
 8009d66:	2b04      	cmp	r3, #4
 8009d68:	bf28      	it	cs
 8009d6a:	2304      	movcs	r3, #4
 8009d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	3304      	adds	r3, #4
 8009d72:	2b06      	cmp	r3, #6
 8009d74:	d902      	bls.n	8009d7c <NVIC_EncodePriority+0x30>
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	3b03      	subs	r3, #3
 8009d7a:	e000      	b.n	8009d7e <NVIC_EncodePriority+0x32>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	fa02 f303 	lsl.w	r3, r2, r3
 8009d8a:	43da      	mvns	r2, r3
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	401a      	ands	r2, r3
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009d94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d9e:	43d9      	mvns	r1, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009da4:	4313      	orrs	r3, r2
         );
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3724      	adds	r7, #36	; 0x24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bc80      	pop	{r7}
 8009dae:	4770      	bx	lr

08009db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009dc0:	d301      	bcc.n	8009dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e00f      	b.n	8009de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009dc6:	4a0a      	ldr	r2, [pc, #40]	; (8009df0 <SysTick_Config+0x40>)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009dce:	210f      	movs	r1, #15
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dd4:	f7ff ff90 	bl	8009cf8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009dd8:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <SysTick_Config+0x40>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009dde:	4b04      	ldr	r3, [pc, #16]	; (8009df0 <SysTick_Config+0x40>)
 8009de0:	2207      	movs	r2, #7
 8009de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	e000e010 	.word	0xe000e010

08009df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7ff ff31 	bl	8009c64 <NVIC_SetPriorityGrouping>
}
 8009e02:	bf00      	nop
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b086      	sub	sp, #24
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	4603      	mov	r3, r0
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	607a      	str	r2, [r7, #4]
 8009e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009e1c:	f7ff ff46 	bl	8009cac <NVIC_GetPriorityGrouping>
 8009e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	68b9      	ldr	r1, [r7, #8]
 8009e26:	6978      	ldr	r0, [r7, #20]
 8009e28:	f7ff ff90 	bl	8009d4c <NVIC_EncodePriority>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e32:	4611      	mov	r1, r2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7ff ff5f 	bl	8009cf8 <NVIC_SetPriority>
}
 8009e3a:	bf00      	nop
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b082      	sub	sp, #8
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	4603      	mov	r3, r0
 8009e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7ff ff39 	bl	8009cc8 <NVIC_EnableIRQ>
}
 8009e56:	bf00      	nop
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b082      	sub	sp, #8
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7ff ffa2 	bl	8009db0 <SysTick_Config>
 8009e6c:	4603      	mov	r3, r0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e059      	b.n	8009f42 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	4b2d      	ldr	r3, [pc, #180]	; (8009f4c <HAL_DMA_Init+0xd4>)
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d80f      	bhi.n	8009eba <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	4b2b      	ldr	r3, [pc, #172]	; (8009f50 <HAL_DMA_Init+0xd8>)
 8009ea2:	4413      	add	r3, r2
 8009ea4:	4a2b      	ldr	r2, [pc, #172]	; (8009f54 <HAL_DMA_Init+0xdc>)
 8009ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eaa:	091b      	lsrs	r3, r3, #4
 8009eac:	009a      	lsls	r2, r3, #2
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a28      	ldr	r2, [pc, #160]	; (8009f58 <HAL_DMA_Init+0xe0>)
 8009eb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8009eb8:	e00e      	b.n	8009ed8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	4b26      	ldr	r3, [pc, #152]	; (8009f5c <HAL_DMA_Init+0xe4>)
 8009ec2:	4413      	add	r3, r2
 8009ec4:	4a23      	ldr	r2, [pc, #140]	; (8009f54 <HAL_DMA_Init+0xdc>)
 8009ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eca:	091b      	lsrs	r3, r3, #4
 8009ecc:	009a      	lsls	r2, r3, #2
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a22      	ldr	r2, [pc, #136]	; (8009f60 <HAL_DMA_Init+0xe8>)
 8009ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2202      	movs	r2, #2
 8009edc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009eee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009ef2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8009efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bc80      	pop	{r7}
 8009f4a:	4770      	bx	lr
 8009f4c:	40020407 	.word	0x40020407
 8009f50:	bffdfff8 	.word	0xbffdfff8
 8009f54:	cccccccd 	.word	0xcccccccd
 8009f58:	40020000 	.word	0x40020000
 8009f5c:	bffdfbf8 	.word	0xbffdfbf8
 8009f60:	40020400 	.word	0x40020400

08009f64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
 8009f70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d101      	bne.n	8009f84 <HAL_DMA_Start_IT+0x20>
 8009f80:	2302      	movs	r3, #2
 8009f82:	e04a      	b.n	800a01a <HAL_DMA_Start_IT+0xb6>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d13a      	bne.n	800a00c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2202      	movs	r2, #2
 8009f9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f022 0201 	bic.w	r2, r2, #1
 8009fb2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	68b9      	ldr	r1, [r7, #8]
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 fb76 	bl	800a6ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d008      	beq.n	8009fda <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f042 020e 	orr.w	r2, r2, #14
 8009fd6:	601a      	str	r2, [r3, #0]
 8009fd8:	e00f      	b.n	8009ffa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f022 0204 	bic.w	r2, r2, #4
 8009fe8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f042 020a 	orr.w	r2, r2, #10
 8009ff8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f042 0201 	orr.w	r2, r2, #1
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	e005      	b.n	800a018 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a014:	2302      	movs	r3, #2
 800a016:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800a018:	7dfb      	ldrb	r3, [r7, #23]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3718      	adds	r7, #24
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
	...

0800a024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a02c:	2300      	movs	r3, #0
 800a02e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a036:	2b02      	cmp	r3, #2
 800a038:	d005      	beq.n	800a046 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2204      	movs	r2, #4
 800a03e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	73fb      	strb	r3, [r7, #15]
 800a044:	e0d6      	b.n	800a1f4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f022 020e 	bic.w	r2, r2, #14
 800a054:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f022 0201 	bic.w	r2, r2, #1
 800a064:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	4b64      	ldr	r3, [pc, #400]	; (800a200 <HAL_DMA_Abort_IT+0x1dc>)
 800a06e:	429a      	cmp	r2, r3
 800a070:	d958      	bls.n	800a124 <HAL_DMA_Abort_IT+0x100>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a63      	ldr	r2, [pc, #396]	; (800a204 <HAL_DMA_Abort_IT+0x1e0>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d04f      	beq.n	800a11c <HAL_DMA_Abort_IT+0xf8>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a61      	ldr	r2, [pc, #388]	; (800a208 <HAL_DMA_Abort_IT+0x1e4>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d048      	beq.n	800a118 <HAL_DMA_Abort_IT+0xf4>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a60      	ldr	r2, [pc, #384]	; (800a20c <HAL_DMA_Abort_IT+0x1e8>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d040      	beq.n	800a112 <HAL_DMA_Abort_IT+0xee>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a5e      	ldr	r2, [pc, #376]	; (800a210 <HAL_DMA_Abort_IT+0x1ec>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d038      	beq.n	800a10c <HAL_DMA_Abort_IT+0xe8>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a5d      	ldr	r2, [pc, #372]	; (800a214 <HAL_DMA_Abort_IT+0x1f0>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d030      	beq.n	800a106 <HAL_DMA_Abort_IT+0xe2>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a5b      	ldr	r2, [pc, #364]	; (800a218 <HAL_DMA_Abort_IT+0x1f4>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d028      	beq.n	800a100 <HAL_DMA_Abort_IT+0xdc>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a53      	ldr	r2, [pc, #332]	; (800a200 <HAL_DMA_Abort_IT+0x1dc>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d020      	beq.n	800a0fa <HAL_DMA_Abort_IT+0xd6>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a57      	ldr	r2, [pc, #348]	; (800a21c <HAL_DMA_Abort_IT+0x1f8>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d019      	beq.n	800a0f6 <HAL_DMA_Abort_IT+0xd2>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a56      	ldr	r2, [pc, #344]	; (800a220 <HAL_DMA_Abort_IT+0x1fc>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d012      	beq.n	800a0f2 <HAL_DMA_Abort_IT+0xce>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a54      	ldr	r2, [pc, #336]	; (800a224 <HAL_DMA_Abort_IT+0x200>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d00a      	beq.n	800a0ec <HAL_DMA_Abort_IT+0xc8>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a53      	ldr	r2, [pc, #332]	; (800a228 <HAL_DMA_Abort_IT+0x204>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d102      	bne.n	800a0e6 <HAL_DMA_Abort_IT+0xc2>
 800a0e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0e4:	e01b      	b.n	800a11e <HAL_DMA_Abort_IT+0xfa>
 800a0e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a0ea:	e018      	b.n	800a11e <HAL_DMA_Abort_IT+0xfa>
 800a0ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0f0:	e015      	b.n	800a11e <HAL_DMA_Abort_IT+0xfa>
 800a0f2:	2310      	movs	r3, #16
 800a0f4:	e013      	b.n	800a11e <HAL_DMA_Abort_IT+0xfa>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e011      	b.n	800a11e <HAL_DMA_Abort_IT+0xfa>
 800a0fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0fe:	e00e      	b.n	800a11e <HAL_DMA_Abort_IT+0xfa>
 800a100:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a104:	e00b      	b.n	800a11e <HAL_DMA_Abort_IT+0xfa>
 800a106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a10a:	e008      	b.n	800a11e <HAL_DMA_Abort_IT+0xfa>
 800a10c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a110:	e005      	b.n	800a11e <HAL_DMA_Abort_IT+0xfa>
 800a112:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a116:	e002      	b.n	800a11e <HAL_DMA_Abort_IT+0xfa>
 800a118:	2310      	movs	r3, #16
 800a11a:	e000      	b.n	800a11e <HAL_DMA_Abort_IT+0xfa>
 800a11c:	2301      	movs	r3, #1
 800a11e:	4a43      	ldr	r2, [pc, #268]	; (800a22c <HAL_DMA_Abort_IT+0x208>)
 800a120:	6053      	str	r3, [r2, #4]
 800a122:	e057      	b.n	800a1d4 <HAL_DMA_Abort_IT+0x1b0>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a36      	ldr	r2, [pc, #216]	; (800a204 <HAL_DMA_Abort_IT+0x1e0>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d04f      	beq.n	800a1ce <HAL_DMA_Abort_IT+0x1aa>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a35      	ldr	r2, [pc, #212]	; (800a208 <HAL_DMA_Abort_IT+0x1e4>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d048      	beq.n	800a1ca <HAL_DMA_Abort_IT+0x1a6>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a33      	ldr	r2, [pc, #204]	; (800a20c <HAL_DMA_Abort_IT+0x1e8>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d040      	beq.n	800a1c4 <HAL_DMA_Abort_IT+0x1a0>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a32      	ldr	r2, [pc, #200]	; (800a210 <HAL_DMA_Abort_IT+0x1ec>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d038      	beq.n	800a1be <HAL_DMA_Abort_IT+0x19a>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a30      	ldr	r2, [pc, #192]	; (800a214 <HAL_DMA_Abort_IT+0x1f0>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d030      	beq.n	800a1b8 <HAL_DMA_Abort_IT+0x194>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a2f      	ldr	r2, [pc, #188]	; (800a218 <HAL_DMA_Abort_IT+0x1f4>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d028      	beq.n	800a1b2 <HAL_DMA_Abort_IT+0x18e>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a26      	ldr	r2, [pc, #152]	; (800a200 <HAL_DMA_Abort_IT+0x1dc>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d020      	beq.n	800a1ac <HAL_DMA_Abort_IT+0x188>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a2b      	ldr	r2, [pc, #172]	; (800a21c <HAL_DMA_Abort_IT+0x1f8>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d019      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x184>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a29      	ldr	r2, [pc, #164]	; (800a220 <HAL_DMA_Abort_IT+0x1fc>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d012      	beq.n	800a1a4 <HAL_DMA_Abort_IT+0x180>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a28      	ldr	r2, [pc, #160]	; (800a224 <HAL_DMA_Abort_IT+0x200>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d00a      	beq.n	800a19e <HAL_DMA_Abort_IT+0x17a>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a26      	ldr	r2, [pc, #152]	; (800a228 <HAL_DMA_Abort_IT+0x204>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d102      	bne.n	800a198 <HAL_DMA_Abort_IT+0x174>
 800a192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a196:	e01b      	b.n	800a1d0 <HAL_DMA_Abort_IT+0x1ac>
 800a198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a19c:	e018      	b.n	800a1d0 <HAL_DMA_Abort_IT+0x1ac>
 800a19e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1a2:	e015      	b.n	800a1d0 <HAL_DMA_Abort_IT+0x1ac>
 800a1a4:	2310      	movs	r3, #16
 800a1a6:	e013      	b.n	800a1d0 <HAL_DMA_Abort_IT+0x1ac>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e011      	b.n	800a1d0 <HAL_DMA_Abort_IT+0x1ac>
 800a1ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a1b0:	e00e      	b.n	800a1d0 <HAL_DMA_Abort_IT+0x1ac>
 800a1b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a1b6:	e00b      	b.n	800a1d0 <HAL_DMA_Abort_IT+0x1ac>
 800a1b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1bc:	e008      	b.n	800a1d0 <HAL_DMA_Abort_IT+0x1ac>
 800a1be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1c2:	e005      	b.n	800a1d0 <HAL_DMA_Abort_IT+0x1ac>
 800a1c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1c8:	e002      	b.n	800a1d0 <HAL_DMA_Abort_IT+0x1ac>
 800a1ca:	2310      	movs	r3, #16
 800a1cc:	e000      	b.n	800a1d0 <HAL_DMA_Abort_IT+0x1ac>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	4a17      	ldr	r2, [pc, #92]	; (800a230 <HAL_DMA_Abort_IT+0x20c>)
 800a1d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	4798      	blx	r3
    } 
  }
  return status;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	40020080 	.word	0x40020080
 800a204:	40020008 	.word	0x40020008
 800a208:	4002001c 	.word	0x4002001c
 800a20c:	40020030 	.word	0x40020030
 800a210:	40020044 	.word	0x40020044
 800a214:	40020058 	.word	0x40020058
 800a218:	4002006c 	.word	0x4002006c
 800a21c:	40020408 	.word	0x40020408
 800a220:	4002041c 	.word	0x4002041c
 800a224:	40020430 	.word	0x40020430
 800a228:	40020444 	.word	0x40020444
 800a22c:	40020400 	.word	0x40020400
 800a230:	40020000 	.word	0x40020000

0800a234 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	2204      	movs	r2, #4
 800a252:	409a      	lsls	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	4013      	ands	r3, r2
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 80f1 	beq.w	800a440 <HAL_DMA_IRQHandler+0x20c>
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 80eb 	beq.w	800a440 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0320 	and.w	r3, r3, #32
 800a274:	2b00      	cmp	r3, #0
 800a276:	d107      	bne.n	800a288 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f022 0204 	bic.w	r2, r2, #4
 800a286:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	461a      	mov	r2, r3
 800a28e:	4b5f      	ldr	r3, [pc, #380]	; (800a40c <HAL_DMA_IRQHandler+0x1d8>)
 800a290:	429a      	cmp	r2, r3
 800a292:	d958      	bls.n	800a346 <HAL_DMA_IRQHandler+0x112>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a5d      	ldr	r2, [pc, #372]	; (800a410 <HAL_DMA_IRQHandler+0x1dc>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d04f      	beq.n	800a33e <HAL_DMA_IRQHandler+0x10a>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a5c      	ldr	r2, [pc, #368]	; (800a414 <HAL_DMA_IRQHandler+0x1e0>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d048      	beq.n	800a33a <HAL_DMA_IRQHandler+0x106>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a5a      	ldr	r2, [pc, #360]	; (800a418 <HAL_DMA_IRQHandler+0x1e4>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d040      	beq.n	800a334 <HAL_DMA_IRQHandler+0x100>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a59      	ldr	r2, [pc, #356]	; (800a41c <HAL_DMA_IRQHandler+0x1e8>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d038      	beq.n	800a32e <HAL_DMA_IRQHandler+0xfa>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a57      	ldr	r2, [pc, #348]	; (800a420 <HAL_DMA_IRQHandler+0x1ec>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d030      	beq.n	800a328 <HAL_DMA_IRQHandler+0xf4>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a56      	ldr	r2, [pc, #344]	; (800a424 <HAL_DMA_IRQHandler+0x1f0>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d028      	beq.n	800a322 <HAL_DMA_IRQHandler+0xee>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a4d      	ldr	r2, [pc, #308]	; (800a40c <HAL_DMA_IRQHandler+0x1d8>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d020      	beq.n	800a31c <HAL_DMA_IRQHandler+0xe8>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a52      	ldr	r2, [pc, #328]	; (800a428 <HAL_DMA_IRQHandler+0x1f4>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d019      	beq.n	800a318 <HAL_DMA_IRQHandler+0xe4>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a50      	ldr	r2, [pc, #320]	; (800a42c <HAL_DMA_IRQHandler+0x1f8>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d012      	beq.n	800a314 <HAL_DMA_IRQHandler+0xe0>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a4f      	ldr	r2, [pc, #316]	; (800a430 <HAL_DMA_IRQHandler+0x1fc>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d00a      	beq.n	800a30e <HAL_DMA_IRQHandler+0xda>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a4d      	ldr	r2, [pc, #308]	; (800a434 <HAL_DMA_IRQHandler+0x200>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d102      	bne.n	800a308 <HAL_DMA_IRQHandler+0xd4>
 800a302:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a306:	e01b      	b.n	800a340 <HAL_DMA_IRQHandler+0x10c>
 800a308:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a30c:	e018      	b.n	800a340 <HAL_DMA_IRQHandler+0x10c>
 800a30e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a312:	e015      	b.n	800a340 <HAL_DMA_IRQHandler+0x10c>
 800a314:	2340      	movs	r3, #64	; 0x40
 800a316:	e013      	b.n	800a340 <HAL_DMA_IRQHandler+0x10c>
 800a318:	2304      	movs	r3, #4
 800a31a:	e011      	b.n	800a340 <HAL_DMA_IRQHandler+0x10c>
 800a31c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a320:	e00e      	b.n	800a340 <HAL_DMA_IRQHandler+0x10c>
 800a322:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a326:	e00b      	b.n	800a340 <HAL_DMA_IRQHandler+0x10c>
 800a328:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a32c:	e008      	b.n	800a340 <HAL_DMA_IRQHandler+0x10c>
 800a32e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a332:	e005      	b.n	800a340 <HAL_DMA_IRQHandler+0x10c>
 800a334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a338:	e002      	b.n	800a340 <HAL_DMA_IRQHandler+0x10c>
 800a33a:	2340      	movs	r3, #64	; 0x40
 800a33c:	e000      	b.n	800a340 <HAL_DMA_IRQHandler+0x10c>
 800a33e:	2304      	movs	r3, #4
 800a340:	4a3d      	ldr	r2, [pc, #244]	; (800a438 <HAL_DMA_IRQHandler+0x204>)
 800a342:	6053      	str	r3, [r2, #4]
 800a344:	e057      	b.n	800a3f6 <HAL_DMA_IRQHandler+0x1c2>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a31      	ldr	r2, [pc, #196]	; (800a410 <HAL_DMA_IRQHandler+0x1dc>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d04f      	beq.n	800a3f0 <HAL_DMA_IRQHandler+0x1bc>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a2f      	ldr	r2, [pc, #188]	; (800a414 <HAL_DMA_IRQHandler+0x1e0>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d048      	beq.n	800a3ec <HAL_DMA_IRQHandler+0x1b8>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a2e      	ldr	r2, [pc, #184]	; (800a418 <HAL_DMA_IRQHandler+0x1e4>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d040      	beq.n	800a3e6 <HAL_DMA_IRQHandler+0x1b2>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a2c      	ldr	r2, [pc, #176]	; (800a41c <HAL_DMA_IRQHandler+0x1e8>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d038      	beq.n	800a3e0 <HAL_DMA_IRQHandler+0x1ac>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a2b      	ldr	r2, [pc, #172]	; (800a420 <HAL_DMA_IRQHandler+0x1ec>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d030      	beq.n	800a3da <HAL_DMA_IRQHandler+0x1a6>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a29      	ldr	r2, [pc, #164]	; (800a424 <HAL_DMA_IRQHandler+0x1f0>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d028      	beq.n	800a3d4 <HAL_DMA_IRQHandler+0x1a0>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a21      	ldr	r2, [pc, #132]	; (800a40c <HAL_DMA_IRQHandler+0x1d8>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d020      	beq.n	800a3ce <HAL_DMA_IRQHandler+0x19a>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a25      	ldr	r2, [pc, #148]	; (800a428 <HAL_DMA_IRQHandler+0x1f4>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d019      	beq.n	800a3ca <HAL_DMA_IRQHandler+0x196>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a24      	ldr	r2, [pc, #144]	; (800a42c <HAL_DMA_IRQHandler+0x1f8>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d012      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0x192>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a22      	ldr	r2, [pc, #136]	; (800a430 <HAL_DMA_IRQHandler+0x1fc>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d00a      	beq.n	800a3c0 <HAL_DMA_IRQHandler+0x18c>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a21      	ldr	r2, [pc, #132]	; (800a434 <HAL_DMA_IRQHandler+0x200>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d102      	bne.n	800a3ba <HAL_DMA_IRQHandler+0x186>
 800a3b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a3b8:	e01b      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x1be>
 800a3ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a3be:	e018      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x1be>
 800a3c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3c4:	e015      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x1be>
 800a3c6:	2340      	movs	r3, #64	; 0x40
 800a3c8:	e013      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x1be>
 800a3ca:	2304      	movs	r3, #4
 800a3cc:	e011      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x1be>
 800a3ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a3d2:	e00e      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x1be>
 800a3d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a3d8:	e00b      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x1be>
 800a3da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a3de:	e008      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x1be>
 800a3e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a3e4:	e005      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x1be>
 800a3e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ea:	e002      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x1be>
 800a3ec:	2340      	movs	r3, #64	; 0x40
 800a3ee:	e000      	b.n	800a3f2 <HAL_DMA_IRQHandler+0x1be>
 800a3f0:	2304      	movs	r3, #4
 800a3f2:	4a12      	ldr	r2, [pc, #72]	; (800a43c <HAL_DMA_IRQHandler+0x208>)
 800a3f4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f000 8136 	beq.w	800a66c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800a408:	e130      	b.n	800a66c <HAL_DMA_IRQHandler+0x438>
 800a40a:	bf00      	nop
 800a40c:	40020080 	.word	0x40020080
 800a410:	40020008 	.word	0x40020008
 800a414:	4002001c 	.word	0x4002001c
 800a418:	40020030 	.word	0x40020030
 800a41c:	40020044 	.word	0x40020044
 800a420:	40020058 	.word	0x40020058
 800a424:	4002006c 	.word	0x4002006c
 800a428:	40020408 	.word	0x40020408
 800a42c:	4002041c 	.word	0x4002041c
 800a430:	40020430 	.word	0x40020430
 800a434:	40020444 	.word	0x40020444
 800a438:	40020400 	.word	0x40020400
 800a43c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a444:	2202      	movs	r2, #2
 800a446:	409a      	lsls	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4013      	ands	r3, r2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 80dd 	beq.w	800a60c <HAL_DMA_IRQHandler+0x3d8>
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	f003 0302 	and.w	r3, r3, #2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f000 80d7 	beq.w	800a60c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0320 	and.w	r3, r3, #32
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10b      	bne.n	800a484 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f022 020a 	bic.w	r2, r2, #10
 800a47a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	461a      	mov	r2, r3
 800a48a:	4b7b      	ldr	r3, [pc, #492]	; (800a678 <HAL_DMA_IRQHandler+0x444>)
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d958      	bls.n	800a542 <HAL_DMA_IRQHandler+0x30e>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a79      	ldr	r2, [pc, #484]	; (800a67c <HAL_DMA_IRQHandler+0x448>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d04f      	beq.n	800a53a <HAL_DMA_IRQHandler+0x306>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a78      	ldr	r2, [pc, #480]	; (800a680 <HAL_DMA_IRQHandler+0x44c>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d048      	beq.n	800a536 <HAL_DMA_IRQHandler+0x302>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a76      	ldr	r2, [pc, #472]	; (800a684 <HAL_DMA_IRQHandler+0x450>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d040      	beq.n	800a530 <HAL_DMA_IRQHandler+0x2fc>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a75      	ldr	r2, [pc, #468]	; (800a688 <HAL_DMA_IRQHandler+0x454>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d038      	beq.n	800a52a <HAL_DMA_IRQHandler+0x2f6>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a73      	ldr	r2, [pc, #460]	; (800a68c <HAL_DMA_IRQHandler+0x458>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d030      	beq.n	800a524 <HAL_DMA_IRQHandler+0x2f0>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a72      	ldr	r2, [pc, #456]	; (800a690 <HAL_DMA_IRQHandler+0x45c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d028      	beq.n	800a51e <HAL_DMA_IRQHandler+0x2ea>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a69      	ldr	r2, [pc, #420]	; (800a678 <HAL_DMA_IRQHandler+0x444>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d020      	beq.n	800a518 <HAL_DMA_IRQHandler+0x2e4>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a6e      	ldr	r2, [pc, #440]	; (800a694 <HAL_DMA_IRQHandler+0x460>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d019      	beq.n	800a514 <HAL_DMA_IRQHandler+0x2e0>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a6c      	ldr	r2, [pc, #432]	; (800a698 <HAL_DMA_IRQHandler+0x464>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d012      	beq.n	800a510 <HAL_DMA_IRQHandler+0x2dc>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a6b      	ldr	r2, [pc, #428]	; (800a69c <HAL_DMA_IRQHandler+0x468>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d00a      	beq.n	800a50a <HAL_DMA_IRQHandler+0x2d6>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a69      	ldr	r2, [pc, #420]	; (800a6a0 <HAL_DMA_IRQHandler+0x46c>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d102      	bne.n	800a504 <HAL_DMA_IRQHandler+0x2d0>
 800a4fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a502:	e01b      	b.n	800a53c <HAL_DMA_IRQHandler+0x308>
 800a504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a508:	e018      	b.n	800a53c <HAL_DMA_IRQHandler+0x308>
 800a50a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a50e:	e015      	b.n	800a53c <HAL_DMA_IRQHandler+0x308>
 800a510:	2320      	movs	r3, #32
 800a512:	e013      	b.n	800a53c <HAL_DMA_IRQHandler+0x308>
 800a514:	2302      	movs	r3, #2
 800a516:	e011      	b.n	800a53c <HAL_DMA_IRQHandler+0x308>
 800a518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a51c:	e00e      	b.n	800a53c <HAL_DMA_IRQHandler+0x308>
 800a51e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a522:	e00b      	b.n	800a53c <HAL_DMA_IRQHandler+0x308>
 800a524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a528:	e008      	b.n	800a53c <HAL_DMA_IRQHandler+0x308>
 800a52a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a52e:	e005      	b.n	800a53c <HAL_DMA_IRQHandler+0x308>
 800a530:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a534:	e002      	b.n	800a53c <HAL_DMA_IRQHandler+0x308>
 800a536:	2320      	movs	r3, #32
 800a538:	e000      	b.n	800a53c <HAL_DMA_IRQHandler+0x308>
 800a53a:	2302      	movs	r3, #2
 800a53c:	4a59      	ldr	r2, [pc, #356]	; (800a6a4 <HAL_DMA_IRQHandler+0x470>)
 800a53e:	6053      	str	r3, [r2, #4]
 800a540:	e057      	b.n	800a5f2 <HAL_DMA_IRQHandler+0x3be>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a4d      	ldr	r2, [pc, #308]	; (800a67c <HAL_DMA_IRQHandler+0x448>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d04f      	beq.n	800a5ec <HAL_DMA_IRQHandler+0x3b8>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a4b      	ldr	r2, [pc, #300]	; (800a680 <HAL_DMA_IRQHandler+0x44c>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d048      	beq.n	800a5e8 <HAL_DMA_IRQHandler+0x3b4>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a4a      	ldr	r2, [pc, #296]	; (800a684 <HAL_DMA_IRQHandler+0x450>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d040      	beq.n	800a5e2 <HAL_DMA_IRQHandler+0x3ae>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a48      	ldr	r2, [pc, #288]	; (800a688 <HAL_DMA_IRQHandler+0x454>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d038      	beq.n	800a5dc <HAL_DMA_IRQHandler+0x3a8>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a47      	ldr	r2, [pc, #284]	; (800a68c <HAL_DMA_IRQHandler+0x458>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d030      	beq.n	800a5d6 <HAL_DMA_IRQHandler+0x3a2>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a45      	ldr	r2, [pc, #276]	; (800a690 <HAL_DMA_IRQHandler+0x45c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d028      	beq.n	800a5d0 <HAL_DMA_IRQHandler+0x39c>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a3d      	ldr	r2, [pc, #244]	; (800a678 <HAL_DMA_IRQHandler+0x444>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d020      	beq.n	800a5ca <HAL_DMA_IRQHandler+0x396>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a41      	ldr	r2, [pc, #260]	; (800a694 <HAL_DMA_IRQHandler+0x460>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d019      	beq.n	800a5c6 <HAL_DMA_IRQHandler+0x392>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a40      	ldr	r2, [pc, #256]	; (800a698 <HAL_DMA_IRQHandler+0x464>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d012      	beq.n	800a5c2 <HAL_DMA_IRQHandler+0x38e>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a3e      	ldr	r2, [pc, #248]	; (800a69c <HAL_DMA_IRQHandler+0x468>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00a      	beq.n	800a5bc <HAL_DMA_IRQHandler+0x388>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a3d      	ldr	r2, [pc, #244]	; (800a6a0 <HAL_DMA_IRQHandler+0x46c>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d102      	bne.n	800a5b6 <HAL_DMA_IRQHandler+0x382>
 800a5b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5b4:	e01b      	b.n	800a5ee <HAL_DMA_IRQHandler+0x3ba>
 800a5b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a5ba:	e018      	b.n	800a5ee <HAL_DMA_IRQHandler+0x3ba>
 800a5bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5c0:	e015      	b.n	800a5ee <HAL_DMA_IRQHandler+0x3ba>
 800a5c2:	2320      	movs	r3, #32
 800a5c4:	e013      	b.n	800a5ee <HAL_DMA_IRQHandler+0x3ba>
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	e011      	b.n	800a5ee <HAL_DMA_IRQHandler+0x3ba>
 800a5ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5ce:	e00e      	b.n	800a5ee <HAL_DMA_IRQHandler+0x3ba>
 800a5d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a5d4:	e00b      	b.n	800a5ee <HAL_DMA_IRQHandler+0x3ba>
 800a5d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a5da:	e008      	b.n	800a5ee <HAL_DMA_IRQHandler+0x3ba>
 800a5dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5e0:	e005      	b.n	800a5ee <HAL_DMA_IRQHandler+0x3ba>
 800a5e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5e6:	e002      	b.n	800a5ee <HAL_DMA_IRQHandler+0x3ba>
 800a5e8:	2320      	movs	r3, #32
 800a5ea:	e000      	b.n	800a5ee <HAL_DMA_IRQHandler+0x3ba>
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	4a2e      	ldr	r2, [pc, #184]	; (800a6a8 <HAL_DMA_IRQHandler+0x474>)
 800a5f0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d034      	beq.n	800a66c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800a60a:	e02f      	b.n	800a66c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a610:	2208      	movs	r2, #8
 800a612:	409a      	lsls	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	4013      	ands	r3, r2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d028      	beq.n	800a66e <HAL_DMA_IRQHandler+0x43a>
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	f003 0308 	and.w	r3, r3, #8
 800a622:	2b00      	cmp	r3, #0
 800a624:	d023      	beq.n	800a66e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f022 020e 	bic.w	r2, r2, #14
 800a634:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a63e:	2101      	movs	r1, #1
 800a640:	fa01 f202 	lsl.w	r2, r1, r2
 800a644:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a660:	2b00      	cmp	r3, #0
 800a662:	d004      	beq.n	800a66e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	4798      	blx	r3
    }
  }
  return;
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
}
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	40020080 	.word	0x40020080
 800a67c:	40020008 	.word	0x40020008
 800a680:	4002001c 	.word	0x4002001c
 800a684:	40020030 	.word	0x40020030
 800a688:	40020044 	.word	0x40020044
 800a68c:	40020058 	.word	0x40020058
 800a690:	4002006c 	.word	0x4002006c
 800a694:	40020408 	.word	0x40020408
 800a698:	4002041c 	.word	0x4002041c
 800a69c:	40020430 	.word	0x40020430
 800a6a0:	40020444 	.word	0x40020444
 800a6a4:	40020400 	.word	0x40020400
 800a6a8:	40020000 	.word	0x40020000

0800a6ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
 800a6b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	fa01 f202 	lsl.w	r2, r1, r2
 800a6c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	683a      	ldr	r2, [r7, #0]
 800a6d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	2b10      	cmp	r3, #16
 800a6d8:	d108      	bne.n	800a6ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a6ea:	e007      	b.n	800a6fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	60da      	str	r2, [r3, #12]
}
 800a6fc:	bf00      	nop
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	bc80      	pop	{r7}
 800a704:	4770      	bx	lr
	...

0800a708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a708:	b480      	push	{r7}
 800a70a:	b08b      	sub	sp, #44	; 0x2c
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a712:	2300      	movs	r3, #0
 800a714:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800a716:	2300      	movs	r3, #0
 800a718:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800a71e:	2300      	movs	r3, #0
 800a720:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800a722:	2300      	movs	r3, #0
 800a724:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800a726:	2300      	movs	r3, #0
 800a728:	627b      	str	r3, [r7, #36]	; 0x24
 800a72a:	e179      	b.n	800aa20 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800a72c:	2201      	movs	r2, #1
 800a72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a730:	fa02 f303 	lsl.w	r3, r2, r3
 800a734:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	69fa      	ldr	r2, [r7, #28]
 800a73c:	4013      	ands	r3, r2
 800a73e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a740:	69ba      	ldr	r2, [r7, #24]
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	429a      	cmp	r2, r3
 800a746:	f040 8168 	bne.w	800aa1a <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	4a96      	ldr	r2, [pc, #600]	; (800a9a8 <HAL_GPIO_Init+0x2a0>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d05e      	beq.n	800a812 <HAL_GPIO_Init+0x10a>
 800a754:	4a94      	ldr	r2, [pc, #592]	; (800a9a8 <HAL_GPIO_Init+0x2a0>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d875      	bhi.n	800a846 <HAL_GPIO_Init+0x13e>
 800a75a:	4a94      	ldr	r2, [pc, #592]	; (800a9ac <HAL_GPIO_Init+0x2a4>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d058      	beq.n	800a812 <HAL_GPIO_Init+0x10a>
 800a760:	4a92      	ldr	r2, [pc, #584]	; (800a9ac <HAL_GPIO_Init+0x2a4>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d86f      	bhi.n	800a846 <HAL_GPIO_Init+0x13e>
 800a766:	4a92      	ldr	r2, [pc, #584]	; (800a9b0 <HAL_GPIO_Init+0x2a8>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d052      	beq.n	800a812 <HAL_GPIO_Init+0x10a>
 800a76c:	4a90      	ldr	r2, [pc, #576]	; (800a9b0 <HAL_GPIO_Init+0x2a8>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d869      	bhi.n	800a846 <HAL_GPIO_Init+0x13e>
 800a772:	4a90      	ldr	r2, [pc, #576]	; (800a9b4 <HAL_GPIO_Init+0x2ac>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d04c      	beq.n	800a812 <HAL_GPIO_Init+0x10a>
 800a778:	4a8e      	ldr	r2, [pc, #568]	; (800a9b4 <HAL_GPIO_Init+0x2ac>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d863      	bhi.n	800a846 <HAL_GPIO_Init+0x13e>
 800a77e:	4a8e      	ldr	r2, [pc, #568]	; (800a9b8 <HAL_GPIO_Init+0x2b0>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d046      	beq.n	800a812 <HAL_GPIO_Init+0x10a>
 800a784:	4a8c      	ldr	r2, [pc, #560]	; (800a9b8 <HAL_GPIO_Init+0x2b0>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d85d      	bhi.n	800a846 <HAL_GPIO_Init+0x13e>
 800a78a:	2b12      	cmp	r3, #18
 800a78c:	d82a      	bhi.n	800a7e4 <HAL_GPIO_Init+0xdc>
 800a78e:	2b12      	cmp	r3, #18
 800a790:	d859      	bhi.n	800a846 <HAL_GPIO_Init+0x13e>
 800a792:	a201      	add	r2, pc, #4	; (adr r2, 800a798 <HAL_GPIO_Init+0x90>)
 800a794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a798:	0800a813 	.word	0x0800a813
 800a79c:	0800a7ed 	.word	0x0800a7ed
 800a7a0:	0800a7ff 	.word	0x0800a7ff
 800a7a4:	0800a841 	.word	0x0800a841
 800a7a8:	0800a847 	.word	0x0800a847
 800a7ac:	0800a847 	.word	0x0800a847
 800a7b0:	0800a847 	.word	0x0800a847
 800a7b4:	0800a847 	.word	0x0800a847
 800a7b8:	0800a847 	.word	0x0800a847
 800a7bc:	0800a847 	.word	0x0800a847
 800a7c0:	0800a847 	.word	0x0800a847
 800a7c4:	0800a847 	.word	0x0800a847
 800a7c8:	0800a847 	.word	0x0800a847
 800a7cc:	0800a847 	.word	0x0800a847
 800a7d0:	0800a847 	.word	0x0800a847
 800a7d4:	0800a847 	.word	0x0800a847
 800a7d8:	0800a847 	.word	0x0800a847
 800a7dc:	0800a7f5 	.word	0x0800a7f5
 800a7e0:	0800a809 	.word	0x0800a809
 800a7e4:	4a75      	ldr	r2, [pc, #468]	; (800a9bc <HAL_GPIO_Init+0x2b4>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d013      	beq.n	800a812 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a7ea:	e02c      	b.n	800a846 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	623b      	str	r3, [r7, #32]
          break;
 800a7f2:	e029      	b.n	800a848 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	623b      	str	r3, [r7, #32]
          break;
 800a7fc:	e024      	b.n	800a848 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	3308      	adds	r3, #8
 800a804:	623b      	str	r3, [r7, #32]
          break;
 800a806:	e01f      	b.n	800a848 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	330c      	adds	r3, #12
 800a80e:	623b      	str	r3, [r7, #32]
          break;
 800a810:	e01a      	b.n	800a848 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d102      	bne.n	800a820 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a81a:	2304      	movs	r3, #4
 800a81c:	623b      	str	r3, [r7, #32]
          break;
 800a81e:	e013      	b.n	800a848 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d105      	bne.n	800a834 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a828:	2308      	movs	r3, #8
 800a82a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	69fa      	ldr	r2, [r7, #28]
 800a830:	611a      	str	r2, [r3, #16]
          break;
 800a832:	e009      	b.n	800a848 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a834:	2308      	movs	r3, #8
 800a836:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	69fa      	ldr	r2, [r7, #28]
 800a83c:	615a      	str	r2, [r3, #20]
          break;
 800a83e:	e003      	b.n	800a848 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a840:	2300      	movs	r3, #0
 800a842:	623b      	str	r3, [r7, #32]
          break;
 800a844:	e000      	b.n	800a848 <HAL_GPIO_Init+0x140>
          break;
 800a846:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	2bff      	cmp	r3, #255	; 0xff
 800a84c:	d801      	bhi.n	800a852 <HAL_GPIO_Init+0x14a>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	e001      	b.n	800a856 <HAL_GPIO_Init+0x14e>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	3304      	adds	r3, #4
 800a856:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	2bff      	cmp	r3, #255	; 0xff
 800a85c:	d802      	bhi.n	800a864 <HAL_GPIO_Init+0x15c>
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	e002      	b.n	800a86a <HAL_GPIO_Init+0x162>
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	3b08      	subs	r3, #8
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	210f      	movs	r1, #15
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	fa01 f303 	lsl.w	r3, r1, r3
 800a878:	43db      	mvns	r3, r3
 800a87a:	401a      	ands	r2, r3
 800a87c:	6a39      	ldr	r1, [r7, #32]
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	fa01 f303 	lsl.w	r3, r1, r3
 800a884:	431a      	orrs	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 80c1 	beq.w	800aa1a <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a898:	4b49      	ldr	r3, [pc, #292]	; (800a9c0 <HAL_GPIO_Init+0x2b8>)
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	4a48      	ldr	r2, [pc, #288]	; (800a9c0 <HAL_GPIO_Init+0x2b8>)
 800a89e:	f043 0301 	orr.w	r3, r3, #1
 800a8a2:	6193      	str	r3, [r2, #24]
 800a8a4:	4b46      	ldr	r3, [pc, #280]	; (800a9c0 <HAL_GPIO_Init+0x2b8>)
 800a8a6:	699b      	ldr	r3, [r3, #24]
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	60bb      	str	r3, [r7, #8]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800a8b0:	4a44      	ldr	r2, [pc, #272]	; (800a9c4 <HAL_GPIO_Init+0x2bc>)
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	089b      	lsrs	r3, r3, #2
 800a8b6:	3302      	adds	r3, #2
 800a8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8bc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800a8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c0:	f003 0303 	and.w	r3, r3, #3
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	220f      	movs	r2, #15
 800a8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8cc:	43db      	mvns	r3, r3
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a3c      	ldr	r2, [pc, #240]	; (800a9c8 <HAL_GPIO_Init+0x2c0>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d01f      	beq.n	800a91c <HAL_GPIO_Init+0x214>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a3b      	ldr	r2, [pc, #236]	; (800a9cc <HAL_GPIO_Init+0x2c4>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d019      	beq.n	800a918 <HAL_GPIO_Init+0x210>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a3a      	ldr	r2, [pc, #232]	; (800a9d0 <HAL_GPIO_Init+0x2c8>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d013      	beq.n	800a914 <HAL_GPIO_Init+0x20c>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a39      	ldr	r2, [pc, #228]	; (800a9d4 <HAL_GPIO_Init+0x2cc>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d00d      	beq.n	800a910 <HAL_GPIO_Init+0x208>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a38      	ldr	r2, [pc, #224]	; (800a9d8 <HAL_GPIO_Init+0x2d0>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d007      	beq.n	800a90c <HAL_GPIO_Init+0x204>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a37      	ldr	r2, [pc, #220]	; (800a9dc <HAL_GPIO_Init+0x2d4>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d101      	bne.n	800a908 <HAL_GPIO_Init+0x200>
 800a904:	2305      	movs	r3, #5
 800a906:	e00a      	b.n	800a91e <HAL_GPIO_Init+0x216>
 800a908:	2306      	movs	r3, #6
 800a90a:	e008      	b.n	800a91e <HAL_GPIO_Init+0x216>
 800a90c:	2304      	movs	r3, #4
 800a90e:	e006      	b.n	800a91e <HAL_GPIO_Init+0x216>
 800a910:	2303      	movs	r3, #3
 800a912:	e004      	b.n	800a91e <HAL_GPIO_Init+0x216>
 800a914:	2302      	movs	r3, #2
 800a916:	e002      	b.n	800a91e <HAL_GPIO_Init+0x216>
 800a918:	2301      	movs	r3, #1
 800a91a:	e000      	b.n	800a91e <HAL_GPIO_Init+0x216>
 800a91c:	2300      	movs	r3, #0
 800a91e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a920:	f002 0203 	and.w	r2, r2, #3
 800a924:	0092      	lsls	r2, r2, #2
 800a926:	4093      	lsls	r3, r2
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800a92e:	4925      	ldr	r1, [pc, #148]	; (800a9c4 <HAL_GPIO_Init+0x2bc>)
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	089b      	lsrs	r3, r3, #2
 800a934:	3302      	adds	r3, #2
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d006      	beq.n	800a956 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a948:	4b25      	ldr	r3, [pc, #148]	; (800a9e0 <HAL_GPIO_Init+0x2d8>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	4924      	ldr	r1, [pc, #144]	; (800a9e0 <HAL_GPIO_Init+0x2d8>)
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	4313      	orrs	r3, r2
 800a952:	600b      	str	r3, [r1, #0]
 800a954:	e006      	b.n	800a964 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a956:	4b22      	ldr	r3, [pc, #136]	; (800a9e0 <HAL_GPIO_Init+0x2d8>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	43db      	mvns	r3, r3
 800a95e:	4920      	ldr	r1, [pc, #128]	; (800a9e0 <HAL_GPIO_Init+0x2d8>)
 800a960:	4013      	ands	r3, r2
 800a962:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d006      	beq.n	800a97e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a970:	4b1b      	ldr	r3, [pc, #108]	; (800a9e0 <HAL_GPIO_Init+0x2d8>)
 800a972:	685a      	ldr	r2, [r3, #4]
 800a974:	491a      	ldr	r1, [pc, #104]	; (800a9e0 <HAL_GPIO_Init+0x2d8>)
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	4313      	orrs	r3, r2
 800a97a:	604b      	str	r3, [r1, #4]
 800a97c:	e006      	b.n	800a98c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a97e:	4b18      	ldr	r3, [pc, #96]	; (800a9e0 <HAL_GPIO_Init+0x2d8>)
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	43db      	mvns	r3, r3
 800a986:	4916      	ldr	r1, [pc, #88]	; (800a9e0 <HAL_GPIO_Init+0x2d8>)
 800a988:	4013      	ands	r3, r2
 800a98a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d025      	beq.n	800a9e4 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a998:	4b11      	ldr	r3, [pc, #68]	; (800a9e0 <HAL_GPIO_Init+0x2d8>)
 800a99a:	689a      	ldr	r2, [r3, #8]
 800a99c:	4910      	ldr	r1, [pc, #64]	; (800a9e0 <HAL_GPIO_Init+0x2d8>)
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	608b      	str	r3, [r1, #8]
 800a9a4:	e025      	b.n	800a9f2 <HAL_GPIO_Init+0x2ea>
 800a9a6:	bf00      	nop
 800a9a8:	10320000 	.word	0x10320000
 800a9ac:	10310000 	.word	0x10310000
 800a9b0:	10220000 	.word	0x10220000
 800a9b4:	10210000 	.word	0x10210000
 800a9b8:	10120000 	.word	0x10120000
 800a9bc:	10110000 	.word	0x10110000
 800a9c0:	40021000 	.word	0x40021000
 800a9c4:	40010000 	.word	0x40010000
 800a9c8:	40010800 	.word	0x40010800
 800a9cc:	40010c00 	.word	0x40010c00
 800a9d0:	40011000 	.word	0x40011000
 800a9d4:	40011400 	.word	0x40011400
 800a9d8:	40011800 	.word	0x40011800
 800a9dc:	40011c00 	.word	0x40011c00
 800a9e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a9e4:	4b13      	ldr	r3, [pc, #76]	; (800aa34 <HAL_GPIO_Init+0x32c>)
 800a9e6:	689a      	ldr	r2, [r3, #8]
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	43db      	mvns	r3, r3
 800a9ec:	4911      	ldr	r1, [pc, #68]	; (800aa34 <HAL_GPIO_Init+0x32c>)
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d006      	beq.n	800aa0c <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a9fe:	4b0d      	ldr	r3, [pc, #52]	; (800aa34 <HAL_GPIO_Init+0x32c>)
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	490c      	ldr	r1, [pc, #48]	; (800aa34 <HAL_GPIO_Init+0x32c>)
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	60cb      	str	r3, [r1, #12]
 800aa0a:	e006      	b.n	800aa1a <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800aa0c:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <HAL_GPIO_Init+0x32c>)
 800aa0e:	68da      	ldr	r2, [r3, #12]
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	43db      	mvns	r3, r3
 800aa14:	4907      	ldr	r1, [pc, #28]	; (800aa34 <HAL_GPIO_Init+0x32c>)
 800aa16:	4013      	ands	r3, r2
 800aa18:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	627b      	str	r3, [r7, #36]	; 0x24
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	2b0f      	cmp	r3, #15
 800aa24:	f67f ae82 	bls.w	800a72c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800aa28:	bf00      	nop
 800aa2a:	bf00      	nop
 800aa2c:	372c      	adds	r7, #44	; 0x2c
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bc80      	pop	{r7}
 800aa32:	4770      	bx	lr
 800aa34:	40010400 	.word	0x40010400

0800aa38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	460b      	mov	r3, r1
 800aa42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	689a      	ldr	r2, [r3, #8]
 800aa48:	887b      	ldrh	r3, [r7, #2]
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aa50:	2301      	movs	r3, #1
 800aa52:	73fb      	strb	r3, [r7, #15]
 800aa54:	e001      	b.n	800aa5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aa5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bc80      	pop	{r7}
 800aa64:	4770      	bx	lr

0800aa66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	807b      	strh	r3, [r7, #2]
 800aa72:	4613      	mov	r3, r2
 800aa74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800aa76:	787b      	ldrb	r3, [r7, #1]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d003      	beq.n	800aa84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aa7c:	887a      	ldrh	r2, [r7, #2]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aa82:	e003      	b.n	800aa8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aa84:	887b      	ldrh	r3, [r7, #2]
 800aa86:	041a      	lsls	r2, r3, #16
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	611a      	str	r2, [r3, #16]
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bc80      	pop	{r7}
 800aa94:	4770      	bx	lr
	...

0800aa98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800aaa2:	4b08      	ldr	r3, [pc, #32]	; (800aac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800aaa4:	695a      	ldr	r2, [r3, #20]
 800aaa6:	88fb      	ldrh	r3, [r7, #6]
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d006      	beq.n	800aabc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800aaae:	4a05      	ldr	r2, [pc, #20]	; (800aac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800aab0:	88fb      	ldrh	r3, [r7, #6]
 800aab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800aab4:	88fb      	ldrh	r3, [r7, #6]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 f806 	bl	800aac8 <HAL_GPIO_EXTI_Callback>
  }
}
 800aabc:	bf00      	nop
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	40010400 	.word	0x40010400

0800aac8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	4603      	mov	r3, r0
 800aad0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800aad2:	bf00      	nop
 800aad4:	370c      	adds	r7, #12
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bc80      	pop	{r7}
 800aada:	4770      	bx	lr

0800aadc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800aae4:	2300      	movs	r3, #0
 800aae6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 8087 	beq.w	800ac04 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800aaf6:	4b92      	ldr	r3, [pc, #584]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	f003 030c 	and.w	r3, r3, #12
 800aafe:	2b04      	cmp	r3, #4
 800ab00:	d00c      	beq.n	800ab1c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ab02:	4b8f      	ldr	r3, [pc, #572]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f003 030c 	and.w	r3, r3, #12
 800ab0a:	2b08      	cmp	r3, #8
 800ab0c:	d112      	bne.n	800ab34 <HAL_RCC_OscConfig+0x58>
 800ab0e:	4b8c      	ldr	r3, [pc, #560]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab1a:	d10b      	bne.n	800ab34 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab1c:	4b88      	ldr	r3, [pc, #544]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d06c      	beq.n	800ac02 <HAL_RCC_OscConfig+0x126>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d168      	bne.n	800ac02 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e22d      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab3c:	d106      	bne.n	800ab4c <HAL_RCC_OscConfig+0x70>
 800ab3e:	4b80      	ldr	r3, [pc, #512]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a7f      	ldr	r2, [pc, #508]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab48:	6013      	str	r3, [r2, #0]
 800ab4a:	e02e      	b.n	800abaa <HAL_RCC_OscConfig+0xce>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10c      	bne.n	800ab6e <HAL_RCC_OscConfig+0x92>
 800ab54:	4b7a      	ldr	r3, [pc, #488]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a79      	ldr	r2, [pc, #484]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab5e:	6013      	str	r3, [r2, #0]
 800ab60:	4b77      	ldr	r3, [pc, #476]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a76      	ldr	r2, [pc, #472]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab6a:	6013      	str	r3, [r2, #0]
 800ab6c:	e01d      	b.n	800abaa <HAL_RCC_OscConfig+0xce>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab76:	d10c      	bne.n	800ab92 <HAL_RCC_OscConfig+0xb6>
 800ab78:	4b71      	ldr	r3, [pc, #452]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a70      	ldr	r2, [pc, #448]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	4b6e      	ldr	r3, [pc, #440]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a6d      	ldr	r2, [pc, #436]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab8e:	6013      	str	r3, [r2, #0]
 800ab90:	e00b      	b.n	800abaa <HAL_RCC_OscConfig+0xce>
 800ab92:	4b6b      	ldr	r3, [pc, #428]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a6a      	ldr	r2, [pc, #424]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ab98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab9c:	6013      	str	r3, [r2, #0]
 800ab9e:	4b68      	ldr	r3, [pc, #416]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a67      	ldr	r2, [pc, #412]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800aba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aba8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d013      	beq.n	800abda <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abb2:	f7fe fe0d 	bl	80097d0 <HAL_GetTick>
 800abb6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abb8:	e008      	b.n	800abcc <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800abba:	f7fe fe09 	bl	80097d0 <HAL_GetTick>
 800abbe:	4602      	mov	r2, r0
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	2b64      	cmp	r3, #100	; 0x64
 800abc6:	d901      	bls.n	800abcc <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800abc8:	2303      	movs	r3, #3
 800abca:	e1e1      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abcc:	4b5c      	ldr	r3, [pc, #368]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0f0      	beq.n	800abba <HAL_RCC_OscConfig+0xde>
 800abd8:	e014      	b.n	800ac04 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abda:	f7fe fdf9 	bl	80097d0 <HAL_GetTick>
 800abde:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abe0:	e008      	b.n	800abf4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800abe2:	f7fe fdf5 	bl	80097d0 <HAL_GetTick>
 800abe6:	4602      	mov	r2, r0
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	2b64      	cmp	r3, #100	; 0x64
 800abee:	d901      	bls.n	800abf4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e1cd      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abf4:	4b52      	ldr	r3, [pc, #328]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1f0      	bne.n	800abe2 <HAL_RCC_OscConfig+0x106>
 800ac00:	e000      	b.n	800ac04 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac02:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0302 	and.w	r3, r3, #2
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d063      	beq.n	800acd8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800ac10:	4b4b      	ldr	r3, [pc, #300]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	f003 030c 	and.w	r3, r3, #12
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00b      	beq.n	800ac34 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ac1c:	4b48      	ldr	r3, [pc, #288]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	f003 030c 	and.w	r3, r3, #12
 800ac24:	2b08      	cmp	r3, #8
 800ac26:	d11c      	bne.n	800ac62 <HAL_RCC_OscConfig+0x186>
 800ac28:	4b45      	ldr	r3, [pc, #276]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d116      	bne.n	800ac62 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac34:	4b42      	ldr	r3, [pc, #264]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d005      	beq.n	800ac4c <HAL_RCC_OscConfig+0x170>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d001      	beq.n	800ac4c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e1a1      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac4c:	4b3c      	ldr	r3, [pc, #240]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	00db      	lsls	r3, r3, #3
 800ac5a:	4939      	ldr	r1, [pc, #228]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac60:	e03a      	b.n	800acd8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d020      	beq.n	800acac <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac6a:	4b36      	ldr	r3, [pc, #216]	; (800ad44 <HAL_RCC_OscConfig+0x268>)
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac70:	f7fe fdae 	bl	80097d0 <HAL_GetTick>
 800ac74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac76:	e008      	b.n	800ac8a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac78:	f7fe fdaa 	bl	80097d0 <HAL_GetTick>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d901      	bls.n	800ac8a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800ac86:	2303      	movs	r3, #3
 800ac88:	e182      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac8a:	4b2d      	ldr	r3, [pc, #180]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 0302 	and.w	r3, r3, #2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0f0      	beq.n	800ac78 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac96:	4b2a      	ldr	r3, [pc, #168]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	695b      	ldr	r3, [r3, #20]
 800aca2:	00db      	lsls	r3, r3, #3
 800aca4:	4926      	ldr	r1, [pc, #152]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800aca6:	4313      	orrs	r3, r2
 800aca8:	600b      	str	r3, [r1, #0]
 800acaa:	e015      	b.n	800acd8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800acac:	4b25      	ldr	r3, [pc, #148]	; (800ad44 <HAL_RCC_OscConfig+0x268>)
 800acae:	2200      	movs	r2, #0
 800acb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acb2:	f7fe fd8d 	bl	80097d0 <HAL_GetTick>
 800acb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acb8:	e008      	b.n	800accc <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800acba:	f7fe fd89 	bl	80097d0 <HAL_GetTick>
 800acbe:	4602      	mov	r2, r0
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	1ad3      	subs	r3, r2, r3
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d901      	bls.n	800accc <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 800acc8:	2303      	movs	r3, #3
 800acca:	e161      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800accc:	4b1c      	ldr	r3, [pc, #112]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0302 	and.w	r3, r3, #2
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1f0      	bne.n	800acba <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0308 	and.w	r3, r3, #8
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d039      	beq.n	800ad58 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d019      	beq.n	800ad20 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800acec:	4b16      	ldr	r3, [pc, #88]	; (800ad48 <HAL_RCC_OscConfig+0x26c>)
 800acee:	2201      	movs	r2, #1
 800acf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800acf2:	f7fe fd6d 	bl	80097d0 <HAL_GetTick>
 800acf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acf8:	e008      	b.n	800ad0c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800acfa:	f7fe fd69 	bl	80097d0 <HAL_GetTick>
 800acfe:	4602      	mov	r2, r0
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	1ad3      	subs	r3, r2, r3
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d901      	bls.n	800ad0c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e141      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad0c:	4b0c      	ldr	r3, [pc, #48]	; (800ad40 <HAL_RCC_OscConfig+0x264>)
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	f003 0302 	and.w	r3, r3, #2
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d0f0      	beq.n	800acfa <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800ad18:	2001      	movs	r0, #1
 800ad1a:	f000 fadf 	bl	800b2dc <RCC_Delay>
 800ad1e:	e01b      	b.n	800ad58 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad20:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <HAL_RCC_OscConfig+0x26c>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad26:	f7fe fd53 	bl	80097d0 <HAL_GetTick>
 800ad2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad2c:	e00e      	b.n	800ad4c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ad2e:	f7fe fd4f 	bl	80097d0 <HAL_GetTick>
 800ad32:	4602      	mov	r2, r0
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d907      	bls.n	800ad4c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e127      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
 800ad40:	40021000 	.word	0x40021000
 800ad44:	42420000 	.word	0x42420000
 800ad48:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad4c:	4b92      	ldr	r3, [pc, #584]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad50:	f003 0302 	and.w	r3, r3, #2
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1ea      	bne.n	800ad2e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 0304 	and.w	r3, r3, #4
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 80a6 	beq.w	800aeb2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad66:	2300      	movs	r3, #0
 800ad68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad6a:	4b8b      	ldr	r3, [pc, #556]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d10d      	bne.n	800ad92 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad76:	4b88      	ldr	r3, [pc, #544]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	4a87      	ldr	r2, [pc, #540]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ad7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad80:	61d3      	str	r3, [r2, #28]
 800ad82:	4b85      	ldr	r3, [pc, #532]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ad84:	69db      	ldr	r3, [r3, #28]
 800ad86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad8a:	60fb      	str	r3, [r7, #12]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad92:	4b82      	ldr	r3, [pc, #520]	; (800af9c <HAL_RCC_OscConfig+0x4c0>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d118      	bne.n	800add0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ad9e:	4b7f      	ldr	r3, [pc, #508]	; (800af9c <HAL_RCC_OscConfig+0x4c0>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a7e      	ldr	r2, [pc, #504]	; (800af9c <HAL_RCC_OscConfig+0x4c0>)
 800ada4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ada8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800adaa:	f7fe fd11 	bl	80097d0 <HAL_GetTick>
 800adae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adb0:	e008      	b.n	800adc4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800adb2:	f7fe fd0d 	bl	80097d0 <HAL_GetTick>
 800adb6:	4602      	mov	r2, r0
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	2b64      	cmp	r3, #100	; 0x64
 800adbe:	d901      	bls.n	800adc4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800adc0:	2303      	movs	r3, #3
 800adc2:	e0e5      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adc4:	4b75      	ldr	r3, [pc, #468]	; (800af9c <HAL_RCC_OscConfig+0x4c0>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d0f0      	beq.n	800adb2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d106      	bne.n	800ade6 <HAL_RCC_OscConfig+0x30a>
 800add8:	4b6f      	ldr	r3, [pc, #444]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800adda:	6a1b      	ldr	r3, [r3, #32]
 800addc:	4a6e      	ldr	r2, [pc, #440]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800adde:	f043 0301 	orr.w	r3, r3, #1
 800ade2:	6213      	str	r3, [r2, #32]
 800ade4:	e02d      	b.n	800ae42 <HAL_RCC_OscConfig+0x366>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10c      	bne.n	800ae08 <HAL_RCC_OscConfig+0x32c>
 800adee:	4b6a      	ldr	r3, [pc, #424]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	4a69      	ldr	r2, [pc, #420]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800adf4:	f023 0301 	bic.w	r3, r3, #1
 800adf8:	6213      	str	r3, [r2, #32]
 800adfa:	4b67      	ldr	r3, [pc, #412]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	4a66      	ldr	r2, [pc, #408]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ae00:	f023 0304 	bic.w	r3, r3, #4
 800ae04:	6213      	str	r3, [r2, #32]
 800ae06:	e01c      	b.n	800ae42 <HAL_RCC_OscConfig+0x366>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	2b05      	cmp	r3, #5
 800ae0e:	d10c      	bne.n	800ae2a <HAL_RCC_OscConfig+0x34e>
 800ae10:	4b61      	ldr	r3, [pc, #388]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ae12:	6a1b      	ldr	r3, [r3, #32]
 800ae14:	4a60      	ldr	r2, [pc, #384]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ae16:	f043 0304 	orr.w	r3, r3, #4
 800ae1a:	6213      	str	r3, [r2, #32]
 800ae1c:	4b5e      	ldr	r3, [pc, #376]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ae1e:	6a1b      	ldr	r3, [r3, #32]
 800ae20:	4a5d      	ldr	r2, [pc, #372]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ae22:	f043 0301 	orr.w	r3, r3, #1
 800ae26:	6213      	str	r3, [r2, #32]
 800ae28:	e00b      	b.n	800ae42 <HAL_RCC_OscConfig+0x366>
 800ae2a:	4b5b      	ldr	r3, [pc, #364]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	4a5a      	ldr	r2, [pc, #360]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ae30:	f023 0301 	bic.w	r3, r3, #1
 800ae34:	6213      	str	r3, [r2, #32]
 800ae36:	4b58      	ldr	r3, [pc, #352]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	4a57      	ldr	r2, [pc, #348]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ae3c:	f023 0304 	bic.w	r3, r3, #4
 800ae40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d015      	beq.n	800ae76 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae4a:	f7fe fcc1 	bl	80097d0 <HAL_GetTick>
 800ae4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae50:	e00a      	b.n	800ae68 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae52:	f7fe fcbd 	bl	80097d0 <HAL_GetTick>
 800ae56:	4602      	mov	r2, r0
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	1ad3      	subs	r3, r2, r3
 800ae5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d901      	bls.n	800ae68 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e093      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae68:	4b4b      	ldr	r3, [pc, #300]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	f003 0302 	and.w	r3, r3, #2
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d0ee      	beq.n	800ae52 <HAL_RCC_OscConfig+0x376>
 800ae74:	e014      	b.n	800aea0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae76:	f7fe fcab 	bl	80097d0 <HAL_GetTick>
 800ae7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae7c:	e00a      	b.n	800ae94 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae7e:	f7fe fca7 	bl	80097d0 <HAL_GetTick>
 800ae82:	4602      	mov	r2, r0
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d901      	bls.n	800ae94 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e07d      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae94:	4b40      	ldr	r3, [pc, #256]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800ae96:	6a1b      	ldr	r3, [r3, #32]
 800ae98:	f003 0302 	and.w	r3, r3, #2
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1ee      	bne.n	800ae7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800aea0:	7dfb      	ldrb	r3, [r7, #23]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d105      	bne.n	800aeb2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aea6:	4b3c      	ldr	r3, [pc, #240]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800aea8:	69db      	ldr	r3, [r3, #28]
 800aeaa:	4a3b      	ldr	r2, [pc, #236]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800aeac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aeb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	69db      	ldr	r3, [r3, #28]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d069      	beq.n	800af8e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aeba:	4b37      	ldr	r3, [pc, #220]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	f003 030c 	and.w	r3, r3, #12
 800aec2:	2b08      	cmp	r3, #8
 800aec4:	d061      	beq.n	800af8a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	69db      	ldr	r3, [r3, #28]
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d146      	bne.n	800af5c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aece:	4b34      	ldr	r3, [pc, #208]	; (800afa0 <HAL_RCC_OscConfig+0x4c4>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aed4:	f7fe fc7c 	bl	80097d0 <HAL_GetTick>
 800aed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aeda:	e008      	b.n	800aeee <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aedc:	f7fe fc78 	bl	80097d0 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d901      	bls.n	800aeee <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e050      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aeee:	4b2a      	ldr	r3, [pc, #168]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1f0      	bne.n	800aedc <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af02:	d108      	bne.n	800af16 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800af04:	4b24      	ldr	r3, [pc, #144]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	4921      	ldr	r1, [pc, #132]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800af12:	4313      	orrs	r3, r2
 800af14:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af16:	4b20      	ldr	r3, [pc, #128]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a19      	ldr	r1, [r3, #32]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af26:	430b      	orrs	r3, r1
 800af28:	491b      	ldr	r1, [pc, #108]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af2e:	4b1c      	ldr	r3, [pc, #112]	; (800afa0 <HAL_RCC_OscConfig+0x4c4>)
 800af30:	2201      	movs	r2, #1
 800af32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af34:	f7fe fc4c 	bl	80097d0 <HAL_GetTick>
 800af38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800af3a:	e008      	b.n	800af4e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af3c:	f7fe fc48 	bl	80097d0 <HAL_GetTick>
 800af40:	4602      	mov	r2, r0
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	2b02      	cmp	r3, #2
 800af48:	d901      	bls.n	800af4e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e020      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800af4e:	4b12      	ldr	r3, [pc, #72]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d0f0      	beq.n	800af3c <HAL_RCC_OscConfig+0x460>
 800af5a:	e018      	b.n	800af8e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af5c:	4b10      	ldr	r3, [pc, #64]	; (800afa0 <HAL_RCC_OscConfig+0x4c4>)
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af62:	f7fe fc35 	bl	80097d0 <HAL_GetTick>
 800af66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af68:	e008      	b.n	800af7c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af6a:	f7fe fc31 	bl	80097d0 <HAL_GetTick>
 800af6e:	4602      	mov	r2, r0
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	2b02      	cmp	r3, #2
 800af76:	d901      	bls.n	800af7c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800af78:	2303      	movs	r3, #3
 800af7a:	e009      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af7c:	4b06      	ldr	r3, [pc, #24]	; (800af98 <HAL_RCC_OscConfig+0x4bc>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1f0      	bne.n	800af6a <HAL_RCC_OscConfig+0x48e>
 800af88:	e001      	b.n	800af8e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e000      	b.n	800af90 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3718      	adds	r7, #24
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	40021000 	.word	0x40021000
 800af9c:	40007000 	.word	0x40007000
 800afa0:	42420060 	.word	0x42420060

0800afa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800afae:	2300      	movs	r3, #0
 800afb0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800afb2:	4b7e      	ldr	r3, [pc, #504]	; (800b1ac <HAL_RCC_ClockConfig+0x208>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d910      	bls.n	800afe2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afc0:	4b7a      	ldr	r3, [pc, #488]	; (800b1ac <HAL_RCC_ClockConfig+0x208>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f023 0207 	bic.w	r2, r3, #7
 800afc8:	4978      	ldr	r1, [pc, #480]	; (800b1ac <HAL_RCC_ClockConfig+0x208>)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	4313      	orrs	r3, r2
 800afce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800afd0:	4b76      	ldr	r3, [pc, #472]	; (800b1ac <HAL_RCC_ClockConfig+0x208>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0307 	and.w	r3, r3, #7
 800afd8:	683a      	ldr	r2, [r7, #0]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d001      	beq.n	800afe2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e0e0      	b.n	800b1a4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 0302 	and.w	r3, r3, #2
 800afea:	2b00      	cmp	r3, #0
 800afec:	d020      	beq.n	800b030 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 0304 	and.w	r3, r3, #4
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d005      	beq.n	800b006 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800affa:	4b6d      	ldr	r3, [pc, #436]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	4a6c      	ldr	r2, [pc, #432]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b000:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b004:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0308 	and.w	r3, r3, #8
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b012:	4b67      	ldr	r3, [pc, #412]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	4a66      	ldr	r2, [pc, #408]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b018:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b01c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b01e:	4b64      	ldr	r3, [pc, #400]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	4961      	ldr	r1, [pc, #388]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b02c:	4313      	orrs	r3, r2
 800b02e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0301 	and.w	r3, r3, #1
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d06a      	beq.n	800b112 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d107      	bne.n	800b054 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b044:	4b5a      	ldr	r3, [pc, #360]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d115      	bne.n	800b07c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	e0a7      	b.n	800b1a4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d107      	bne.n	800b06c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b05c:	4b54      	ldr	r3, [pc, #336]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d109      	bne.n	800b07c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	e09b      	b.n	800b1a4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b06c:	4b50      	ldr	r3, [pc, #320]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f003 0302 	and.w	r3, r3, #2
 800b074:	2b00      	cmp	r3, #0
 800b076:	d101      	bne.n	800b07c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	e093      	b.n	800b1a4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b07c:	4b4c      	ldr	r3, [pc, #304]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	f023 0203 	bic.w	r2, r3, #3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	4949      	ldr	r1, [pc, #292]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b08e:	f7fe fb9f 	bl	80097d0 <HAL_GetTick>
 800b092:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d112      	bne.n	800b0c2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b09c:	e00a      	b.n	800b0b4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b09e:	f7fe fb97 	bl	80097d0 <HAL_GetTick>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d901      	bls.n	800b0b4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e077      	b.n	800b1a4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b0b4:	4b3e      	ldr	r3, [pc, #248]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	f003 030c 	and.w	r3, r3, #12
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d1ee      	bne.n	800b09e <HAL_RCC_ClockConfig+0xfa>
 800b0c0:	e027      	b.n	800b112 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d11d      	bne.n	800b106 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b0ca:	e00a      	b.n	800b0e2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0cc:	f7fe fb80 	bl	80097d0 <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d901      	bls.n	800b0e2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e060      	b.n	800b1a4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b0e2:	4b33      	ldr	r3, [pc, #204]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	f003 030c 	and.w	r3, r3, #12
 800b0ea:	2b08      	cmp	r3, #8
 800b0ec:	d1ee      	bne.n	800b0cc <HAL_RCC_ClockConfig+0x128>
 800b0ee:	e010      	b.n	800b112 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0f0:	f7fe fb6e 	bl	80097d0 <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d901      	bls.n	800b106 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800b102:	2303      	movs	r3, #3
 800b104:	e04e      	b.n	800b1a4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b106:	4b2a      	ldr	r3, [pc, #168]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	f003 030c 	and.w	r3, r3, #12
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1ee      	bne.n	800b0f0 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800b112:	4b26      	ldr	r3, [pc, #152]	; (800b1ac <HAL_RCC_ClockConfig+0x208>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 0307 	and.w	r3, r3, #7
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d210      	bcs.n	800b142 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b120:	4b22      	ldr	r3, [pc, #136]	; (800b1ac <HAL_RCC_ClockConfig+0x208>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f023 0207 	bic.w	r2, r3, #7
 800b128:	4920      	ldr	r1, [pc, #128]	; (800b1ac <HAL_RCC_ClockConfig+0x208>)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b130:	4b1e      	ldr	r3, [pc, #120]	; (800b1ac <HAL_RCC_ClockConfig+0x208>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f003 0307 	and.w	r3, r3, #7
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d001      	beq.n	800b142 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e030      	b.n	800b1a4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 0304 	and.w	r3, r3, #4
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d008      	beq.n	800b160 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b14e:	4b18      	ldr	r3, [pc, #96]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	4915      	ldr	r1, [pc, #84]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b15c:	4313      	orrs	r3, r2
 800b15e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 0308 	and.w	r3, r3, #8
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d009      	beq.n	800b180 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b16c:	4b10      	ldr	r3, [pc, #64]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	00db      	lsls	r3, r3, #3
 800b17a:	490d      	ldr	r1, [pc, #52]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b17c:	4313      	orrs	r3, r2
 800b17e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b180:	f000 f81c 	bl	800b1bc <HAL_RCC_GetSysClockFreq>
 800b184:	4602      	mov	r2, r0
 800b186:	4b0a      	ldr	r3, [pc, #40]	; (800b1b0 <HAL_RCC_ClockConfig+0x20c>)
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	091b      	lsrs	r3, r3, #4
 800b18c:	f003 030f 	and.w	r3, r3, #15
 800b190:	4908      	ldr	r1, [pc, #32]	; (800b1b4 <HAL_RCC_ClockConfig+0x210>)
 800b192:	5ccb      	ldrb	r3, [r1, r3]
 800b194:	fa22 f303 	lsr.w	r3, r2, r3
 800b198:	4a07      	ldr	r2, [pc, #28]	; (800b1b8 <HAL_RCC_ClockConfig+0x214>)
 800b19a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800b19c:	2000      	movs	r0, #0
 800b19e:	f7fe fad5 	bl	800974c <HAL_InitTick>
  
  return HAL_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	40022000 	.word	0x40022000
 800b1b0:	40021000 	.word	0x40021000
 800b1b4:	0802f520 	.word	0x0802f520
 800b1b8:	20000024 	.word	0x20000024

0800b1bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1bc:	b490      	push	{r4, r7}
 800b1be:	b08a      	sub	sp, #40	; 0x28
 800b1c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800b1c2:	4b29      	ldr	r3, [pc, #164]	; (800b268 <HAL_RCC_GetSysClockFreq+0xac>)
 800b1c4:	1d3c      	adds	r4, r7, #4
 800b1c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b1c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800b1cc:	f240 2301 	movw	r3, #513	; 0x201
 800b1d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	61fb      	str	r3, [r7, #28]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	61bb      	str	r3, [r7, #24]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b1de:	2300      	movs	r3, #0
 800b1e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b1e6:	4b21      	ldr	r3, [pc, #132]	; (800b26c <HAL_RCC_GetSysClockFreq+0xb0>)
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	f003 030c 	and.w	r3, r3, #12
 800b1f2:	2b04      	cmp	r3, #4
 800b1f4:	d002      	beq.n	800b1fc <HAL_RCC_GetSysClockFreq+0x40>
 800b1f6:	2b08      	cmp	r3, #8
 800b1f8:	d003      	beq.n	800b202 <HAL_RCC_GetSysClockFreq+0x46>
 800b1fa:	e02b      	b.n	800b254 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b1fc:	4b1c      	ldr	r3, [pc, #112]	; (800b270 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b1fe:	623b      	str	r3, [r7, #32]
      break;
 800b200:	e02b      	b.n	800b25a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	0c9b      	lsrs	r3, r3, #18
 800b206:	f003 030f 	and.w	r3, r3, #15
 800b20a:	3328      	adds	r3, #40	; 0x28
 800b20c:	443b      	add	r3, r7
 800b20e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800b212:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d012      	beq.n	800b244 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b21e:	4b13      	ldr	r3, [pc, #76]	; (800b26c <HAL_RCC_GetSysClockFreq+0xb0>)
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	0c5b      	lsrs	r3, r3, #17
 800b224:	f003 0301 	and.w	r3, r3, #1
 800b228:	3328      	adds	r3, #40	; 0x28
 800b22a:	443b      	add	r3, r7
 800b22c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b230:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	4a0e      	ldr	r2, [pc, #56]	; (800b270 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b236:	fb03 f202 	mul.w	r2, r3, r2
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b240:	627b      	str	r3, [r7, #36]	; 0x24
 800b242:	e004      	b.n	800b24e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	4a0b      	ldr	r2, [pc, #44]	; (800b274 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b248:	fb02 f303 	mul.w	r3, r2, r3
 800b24c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	623b      	str	r3, [r7, #32]
      break;
 800b252:	e002      	b.n	800b25a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b254:	4b06      	ldr	r3, [pc, #24]	; (800b270 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b256:	623b      	str	r3, [r7, #32]
      break;
 800b258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b25a:	6a3b      	ldr	r3, [r7, #32]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3728      	adds	r7, #40	; 0x28
 800b260:	46bd      	mov	sp, r7
 800b262:	bc90      	pop	{r4, r7}
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	0800d63c 	.word	0x0800d63c
 800b26c:	40021000 	.word	0x40021000
 800b270:	007a1200 	.word	0x007a1200
 800b274:	003d0900 	.word	0x003d0900

0800b278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b278:	b480      	push	{r7}
 800b27a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b27c:	4b02      	ldr	r3, [pc, #8]	; (800b288 <HAL_RCC_GetHCLKFreq+0x10>)
 800b27e:	681b      	ldr	r3, [r3, #0]
}
 800b280:	4618      	mov	r0, r3
 800b282:	46bd      	mov	sp, r7
 800b284:	bc80      	pop	{r7}
 800b286:	4770      	bx	lr
 800b288:	20000024 	.word	0x20000024

0800b28c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b290:	f7ff fff2 	bl	800b278 <HAL_RCC_GetHCLKFreq>
 800b294:	4602      	mov	r2, r0
 800b296:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	0a1b      	lsrs	r3, r3, #8
 800b29c:	f003 0307 	and.w	r3, r3, #7
 800b2a0:	4903      	ldr	r1, [pc, #12]	; (800b2b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2a2:	5ccb      	ldrb	r3, [r1, r3]
 800b2a4:	fa22 f303 	lsr.w	r3, r2, r3
}    
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	40021000 	.word	0x40021000
 800b2b0:	0802f530 	.word	0x0802f530

0800b2b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b2b8:	f7ff ffde 	bl	800b278 <HAL_RCC_GetHCLKFreq>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	0adb      	lsrs	r3, r3, #11
 800b2c4:	f003 0307 	and.w	r3, r3, #7
 800b2c8:	4903      	ldr	r1, [pc, #12]	; (800b2d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2ca:	5ccb      	ldrb	r3, [r1, r3]
 800b2cc:	fa22 f303 	lsr.w	r3, r2, r3
} 
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	40021000 	.word	0x40021000
 800b2d8:	0802f530 	.word	0x0802f530

0800b2dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b2e4:	4b0b      	ldr	r3, [pc, #44]	; (800b314 <RCC_Delay+0x38>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a0b      	ldr	r2, [pc, #44]	; (800b318 <RCC_Delay+0x3c>)
 800b2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ee:	0a5b      	lsrs	r3, r3, #9
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	fb02 f303 	mul.w	r3, r2, r3
 800b2f6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800b2f8:	bf00      	nop
}
 800b2fa:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	1e5a      	subs	r2, r3, #1
 800b300:	60fa      	str	r2, [r7, #12]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1f8      	bne.n	800b2f8 <RCC_Delay+0x1c>
}
 800b306:	bf00      	nop
 800b308:	bf00      	nop
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bc80      	pop	{r7}
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	20000024 	.word	0x20000024
 800b318:	10624dd3 	.word	0x10624dd3

0800b31c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800b324:	2300      	movs	r3, #0
 800b326:	613b      	str	r3, [r7, #16]
 800b328:	2300      	movs	r3, #0
 800b32a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 0301 	and.w	r3, r3, #1
 800b334:	2b00      	cmp	r3, #0
 800b336:	d07d      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800b338:	2300      	movs	r3, #0
 800b33a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b33c:	4b4f      	ldr	r3, [pc, #316]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b33e:	69db      	ldr	r3, [r3, #28]
 800b340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10d      	bne.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b348:	4b4c      	ldr	r3, [pc, #304]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	4a4b      	ldr	r2, [pc, #300]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b34e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b352:	61d3      	str	r3, [r2, #28]
 800b354:	4b49      	ldr	r3, [pc, #292]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b35c:	60bb      	str	r3, [r7, #8]
 800b35e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b360:	2301      	movs	r3, #1
 800b362:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b364:	4b46      	ldr	r3, [pc, #280]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d118      	bne.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b370:	4b43      	ldr	r3, [pc, #268]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a42      	ldr	r2, [pc, #264]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b37a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b37c:	f7fe fa28 	bl	80097d0 <HAL_GetTick>
 800b380:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b382:	e008      	b.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b384:	f7fe fa24 	bl	80097d0 <HAL_GetTick>
 800b388:	4602      	mov	r2, r0
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	1ad3      	subs	r3, r2, r3
 800b38e:	2b64      	cmp	r3, #100	; 0x64
 800b390:	d901      	bls.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800b392:	2303      	movs	r3, #3
 800b394:	e06d      	b.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b396:	4b3a      	ldr	r3, [pc, #232]	; (800b480 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0f0      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b3a2:	4b36      	ldr	r3, [pc, #216]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3aa:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d02e      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d027      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b3c0:	4b2e      	ldr	r3, [pc, #184]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
 800b3c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b3ca:	4b2e      	ldr	r3, [pc, #184]	; (800b484 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b3d0:	4b2c      	ldr	r3, [pc, #176]	; (800b484 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b3d6:	4a29      	ldr	r2, [pc, #164]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f003 0301 	and.w	r3, r3, #1
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d014      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3e6:	f7fe f9f3 	bl	80097d0 <HAL_GetTick>
 800b3ea:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b3ec:	e00a      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3ee:	f7fe f9ef 	bl	80097d0 <HAL_GetTick>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d901      	bls.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b400:	2303      	movs	r3, #3
 800b402:	e036      	b.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b404:	4b1d      	ldr	r3, [pc, #116]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b406:	6a1b      	ldr	r3, [r3, #32]
 800b408:	f003 0302 	and.w	r3, r3, #2
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d0ee      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800b410:	4b1a      	ldr	r3, [pc, #104]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b412:	6a1b      	ldr	r3, [r3, #32]
 800b414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	4917      	ldr	r1, [pc, #92]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d105      	bne.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b428:	4b14      	ldr	r3, [pc, #80]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b42a:	69db      	ldr	r3, [r3, #28]
 800b42c:	4a13      	ldr	r2, [pc, #76]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b42e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b432:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 0302 	and.w	r3, r3, #2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d008      	beq.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b440:	4b0e      	ldr	r3, [pc, #56]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	490b      	ldr	r1, [pc, #44]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b44e:	4313      	orrs	r3, r2
 800b450:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 0310 	and.w	r3, r3, #16
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d008      	beq.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b45e:	4b07      	ldr	r3, [pc, #28]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	4904      	ldr	r1, [pc, #16]	; (800b47c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b46c:	4313      	orrs	r3, r2
 800b46e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3718      	adds	r7, #24
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	40021000 	.word	0x40021000
 800b480:	40007000 	.word	0x40007000
 800b484:	42420440 	.word	0x42420440

0800b488 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d101      	bne.n	800b49e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e034      	b.n	800b508 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d106      	bne.n	800b4b8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f7f7 fc34 	bl	8002d20 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3308      	adds	r3, #8
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4610      	mov	r0, r2
 800b4c4:	f001 fda2 	bl	800d00c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6818      	ldr	r0, [r3, #0]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	68b9      	ldr	r1, [r7, #8]
 800b4d4:	f001 fe1a 	bl	800d10c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6858      	ldr	r0, [r3, #4]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	689a      	ldr	r2, [r3, #8]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e4:	6879      	ldr	r1, [r7, #4]
 800b4e6:	f001 fe45 	bl	800d174 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	6892      	ldr	r2, [r2, #8]
 800b4f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	6892      	ldr	r2, [r2, #8]
 800b4fe:	f041 0101 	orr.w	r1, r1, #1
 800b502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d101      	bne.n	800b522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	e01d      	b.n	800b55e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d106      	bne.n	800b53c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7fd fb38 	bl	8008bac <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2202      	movs	r2, #2
 800b540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3304      	adds	r3, #4
 800b54c:	4619      	mov	r1, r3
 800b54e:	4610      	mov	r0, r2
 800b550:	f000 fe0c 	bl	800c16c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2201      	movs	r2, #1
 800b558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b566:	b480      	push	{r7}
 800b568:	b083      	sub	sp, #12
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2202      	movs	r2, #2
 800b572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f042 0201 	orr.w	r2, r2, #1
 800b584:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2201      	movs	r2, #1
 800b58a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	bc80      	pop	{r7}
 800b598:	4770      	bx	lr

0800b59a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b083      	sub	sp, #12
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	6a1a      	ldr	r2, [r3, #32]
 800b5b0:	f241 1311 	movw	r3, #4369	; 0x1111
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10f      	bne.n	800b5da <HAL_TIM_Base_Stop+0x40>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	6a1a      	ldr	r2, [r3, #32]
 800b5c0:	f240 4344 	movw	r3, #1092	; 0x444
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d107      	bne.n	800b5da <HAL_TIM_Base_Stop+0x40>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f022 0201 	bic.w	r2, r2, #1
 800b5d8:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bc80      	pop	{r7}
 800b5ec:	4770      	bx	lr

0800b5ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b083      	sub	sp, #12
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68da      	ldr	r2, [r3, #12]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f042 0201 	orr.w	r2, r2, #1
 800b604:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f042 0201 	orr.w	r2, r2, #1
 800b614:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bc80      	pop	{r7}
 800b620:	4770      	bx	lr

0800b622 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b622:	b480      	push	{r7}
 800b624:	b083      	sub	sp, #12
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68da      	ldr	r2, [r3, #12]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0201 	bic.w	r2, r2, #1
 800b638:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	6a1a      	ldr	r2, [r3, #32]
 800b640:	f241 1311 	movw	r3, #4369	; 0x1111
 800b644:	4013      	ands	r3, r2
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10f      	bne.n	800b66a <HAL_TIM_Base_Stop_IT+0x48>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	6a1a      	ldr	r2, [r3, #32]
 800b650:	f240 4344 	movw	r3, #1092	; 0x444
 800b654:	4013      	ands	r3, r2
 800b656:	2b00      	cmp	r3, #0
 800b658:	d107      	bne.n	800b66a <HAL_TIM_Base_Stop_IT+0x48>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 0201 	bic.w	r2, r2, #1
 800b668:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	bc80      	pop	{r7}
 800b674:	4770      	bx	lr

0800b676 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b082      	sub	sp, #8
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e01d      	b.n	800b6c4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b00      	cmp	r3, #0
 800b692:	d106      	bne.n	800b6a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f815 	bl	800b6cc <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	f000 fd59 	bl	800c16c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b6d4:	bf00      	nop
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bc80      	pop	{r7}
 800b6dc:	4770      	bx	lr
	...

0800b6e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f001 f821 	bl	800c73a <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a10      	ldr	r2, [pc, #64]	; (800b740 <HAL_TIM_PWM_Start+0x60>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d004      	beq.n	800b70c <HAL_TIM_PWM_Start+0x2c>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a0f      	ldr	r2, [pc, #60]	; (800b744 <HAL_TIM_PWM_Start+0x64>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d101      	bne.n	800b710 <HAL_TIM_PWM_Start+0x30>
 800b70c:	2301      	movs	r3, #1
 800b70e:	e000      	b.n	800b712 <HAL_TIM_PWM_Start+0x32>
 800b710:	2300      	movs	r3, #0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d007      	beq.n	800b726 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b724:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f042 0201 	orr.w	r2, r2, #1
 800b734:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	40012c00 	.word	0x40012c00
 800b744:	40013400 	.word	0x40013400

0800b748 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2200      	movs	r2, #0
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 ffed 	bl	800c73a <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a22      	ldr	r2, [pc, #136]	; (800b7f0 <HAL_TIM_PWM_Stop+0xa8>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d004      	beq.n	800b774 <HAL_TIM_PWM_Stop+0x2c>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a21      	ldr	r2, [pc, #132]	; (800b7f4 <HAL_TIM_PWM_Stop+0xac>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d101      	bne.n	800b778 <HAL_TIM_PWM_Stop+0x30>
 800b774:	2301      	movs	r3, #1
 800b776:	e000      	b.n	800b77a <HAL_TIM_PWM_Stop+0x32>
 800b778:	2300      	movs	r3, #0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d017      	beq.n	800b7ae <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6a1a      	ldr	r2, [r3, #32]
 800b784:	f241 1311 	movw	r3, #4369	; 0x1111
 800b788:	4013      	ands	r3, r2
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d10f      	bne.n	800b7ae <HAL_TIM_PWM_Stop+0x66>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6a1a      	ldr	r2, [r3, #32]
 800b794:	f240 4344 	movw	r3, #1092	; 0x444
 800b798:	4013      	ands	r3, r2
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d107      	bne.n	800b7ae <HAL_TIM_PWM_Stop+0x66>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b7ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	6a1a      	ldr	r2, [r3, #32]
 800b7b4:	f241 1311 	movw	r3, #4369	; 0x1111
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10f      	bne.n	800b7de <HAL_TIM_PWM_Stop+0x96>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	6a1a      	ldr	r2, [r3, #32]
 800b7c4:	f240 4344 	movw	r3, #1092	; 0x444
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d107      	bne.n	800b7de <HAL_TIM_PWM_Stop+0x96>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f022 0201 	bic.w	r2, r2, #1
 800b7dc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	40012c00 	.word	0x40012c00
 800b7f4:	40013400 	.word	0x40013400

0800b7f8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
 800b804:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d101      	bne.n	800b816 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800b812:	2302      	movs	r3, #2
 800b814:	e0c6      	b.n	800b9a4 <HAL_TIM_PWM_Start_DMA+0x1ac>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d10b      	bne.n	800b83a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0U))
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d104      	bne.n	800b832 <HAL_TIM_PWM_Start_DMA+0x3a>
 800b828:	887b      	ldrh	r3, [r7, #2]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e0b8      	b.n	800b9a4 <HAL_TIM_PWM_Start_DMA+0x1ac>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2202      	movs	r2, #2
 800b836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch (Channel)
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	2b0c      	cmp	r3, #12
 800b83e:	f200 8089 	bhi.w	800b954 <HAL_TIM_PWM_Start_DMA+0x15c>
 800b842:	a201      	add	r2, pc, #4	; (adr r2, 800b848 <HAL_TIM_PWM_Start_DMA+0x50>)
 800b844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b848:	0800b87d 	.word	0x0800b87d
 800b84c:	0800b955 	.word	0x0800b955
 800b850:	0800b955 	.word	0x0800b955
 800b854:	0800b955 	.word	0x0800b955
 800b858:	0800b8b3 	.word	0x0800b8b3
 800b85c:	0800b955 	.word	0x0800b955
 800b860:	0800b955 	.word	0x0800b955
 800b864:	0800b955 	.word	0x0800b955
 800b868:	0800b8e9 	.word	0x0800b8e9
 800b86c:	0800b955 	.word	0x0800b955
 800b870:	0800b955 	.word	0x0800b955
 800b874:	0800b955 	.word	0x0800b955
 800b878:	0800b91f 	.word	0x0800b91f
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	4a4a      	ldr	r2, [pc, #296]	; (800b9ac <HAL_TIM_PWM_Start_DMA+0x1b4>)
 800b882:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b888:	4a49      	ldr	r2, [pc, #292]	; (800b9b0 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 800b88a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b890:	6879      	ldr	r1, [r7, #4]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3334      	adds	r3, #52	; 0x34
 800b898:	461a      	mov	r2, r3
 800b89a:	887b      	ldrh	r3, [r7, #2]
 800b89c:	f7fe fb62 	bl	8009f64 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	68da      	ldr	r2, [r3, #12]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8ae:	60da      	str	r2, [r3, #12]
    }
    break;
 800b8b0:	e051      	b.n	800b956 <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b6:	4a3d      	ldr	r2, [pc, #244]	; (800b9ac <HAL_TIM_PWM_Start_DMA+0x1b4>)
 800b8b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8be:	4a3c      	ldr	r2, [pc, #240]	; (800b9b0 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 800b8c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b8c6:	6879      	ldr	r1, [r7, #4]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3338      	adds	r3, #56	; 0x38
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	887b      	ldrh	r3, [r7, #2]
 800b8d2:	f7fe fb47 	bl	8009f64 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68da      	ldr	r2, [r3, #12]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8e4:	60da      	str	r2, [r3, #12]
    }
    break;
 800b8e6:	e036      	b.n	800b956 <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ec:	4a2f      	ldr	r2, [pc, #188]	; (800b9ac <HAL_TIM_PWM_Start_DMA+0x1b4>)
 800b8ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f4:	4a2e      	ldr	r2, [pc, #184]	; (800b9b0 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 800b8f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b8fc:	6879      	ldr	r1, [r7, #4]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	333c      	adds	r3, #60	; 0x3c
 800b904:	461a      	mov	r2, r3
 800b906:	887b      	ldrh	r3, [r7, #2]
 800b908:	f7fe fb2c 	bl	8009f64 <HAL_DMA_Start_IT>

      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68da      	ldr	r2, [r3, #12]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b91a:	60da      	str	r2, [r3, #12]
    }
    break;
 800b91c:	e01b      	b.n	800b956 <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b922:	4a22      	ldr	r2, [pc, #136]	; (800b9ac <HAL_TIM_PWM_Start_DMA+0x1b4>)
 800b924:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b92a:	4a21      	ldr	r2, [pc, #132]	; (800b9b0 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 800b92c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b932:	6879      	ldr	r1, [r7, #4]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	3340      	adds	r3, #64	; 0x40
 800b93a:	461a      	mov	r2, r3
 800b93c:	887b      	ldrh	r3, [r7, #2]
 800b93e:	f7fe fb11 	bl	8009f64 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68da      	ldr	r2, [r3, #12]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b950:	60da      	str	r2, [r3, #12]
    }
    break;
 800b952:	e000      	b.n	800b956 <HAL_TIM_PWM_Start_DMA+0x15e>

    default:
    break;
 800b954:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2201      	movs	r2, #1
 800b95c:	68b9      	ldr	r1, [r7, #8]
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 feeb 	bl	800c73a <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a12      	ldr	r2, [pc, #72]	; (800b9b4 <HAL_TIM_PWM_Start_DMA+0x1bc>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d004      	beq.n	800b978 <HAL_TIM_PWM_Start_DMA+0x180>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a11      	ldr	r2, [pc, #68]	; (800b9b8 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d101      	bne.n	800b97c <HAL_TIM_PWM_Start_DMA+0x184>
 800b978:	2301      	movs	r3, #1
 800b97a:	e000      	b.n	800b97e <HAL_TIM_PWM_Start_DMA+0x186>
 800b97c:	2300      	movs	r3, #0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d007      	beq.n	800b992 <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b990:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f042 0201 	orr.w	r2, r2, #1
 800b9a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	0800c0fb 	.word	0x0800c0fb
 800b9b0:	0800c0d7 	.word	0x0800c0d7
 800b9b4:	40012c00 	.word	0x40012c00
 800b9b8:	40013400 	.word	0x40013400

0800b9bc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2b0c      	cmp	r3, #12
 800b9ca:	d841      	bhi.n	800ba50 <HAL_TIM_PWM_Stop_DMA+0x94>
 800b9cc:	a201      	add	r2, pc, #4	; (adr r2, 800b9d4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800b9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d2:	bf00      	nop
 800b9d4:	0800ba09 	.word	0x0800ba09
 800b9d8:	0800ba51 	.word	0x0800ba51
 800b9dc:	0800ba51 	.word	0x0800ba51
 800b9e0:	0800ba51 	.word	0x0800ba51
 800b9e4:	0800ba1b 	.word	0x0800ba1b
 800b9e8:	0800ba51 	.word	0x0800ba51
 800b9ec:	0800ba51 	.word	0x0800ba51
 800b9f0:	0800ba51 	.word	0x0800ba51
 800b9f4:	0800ba2d 	.word	0x0800ba2d
 800b9f8:	0800ba51 	.word	0x0800ba51
 800b9fc:	0800ba51 	.word	0x0800ba51
 800ba00:	0800ba51 	.word	0x0800ba51
 800ba04:	0800ba3f 	.word	0x0800ba3f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68da      	ldr	r2, [r3, #12]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ba16:	60da      	str	r2, [r3, #12]
    }
    break;
 800ba18:	e01b      	b.n	800ba52 <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68da      	ldr	r2, [r3, #12]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba28:	60da      	str	r2, [r3, #12]
    }
    break;
 800ba2a:	e012      	b.n	800ba52 <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68da      	ldr	r2, [r3, #12]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ba3a:	60da      	str	r2, [r3, #12]
    }
    break;
 800ba3c:	e009      	b.n	800ba52 <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68da      	ldr	r2, [r3, #12]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ba4c:	60da      	str	r2, [r3, #12]
    }
    break;
 800ba4e:	e000      	b.n	800ba52 <HAL_TIM_PWM_Stop_DMA+0x96>

    default:
    break;
 800ba50:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2200      	movs	r2, #0
 800ba58:	6839      	ldr	r1, [r7, #0]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f000 fe6d 	bl	800c73a <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a22      	ldr	r2, [pc, #136]	; (800baf0 <HAL_TIM_PWM_Stop_DMA+0x134>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d004      	beq.n	800ba74 <HAL_TIM_PWM_Stop_DMA+0xb8>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a21      	ldr	r2, [pc, #132]	; (800baf4 <HAL_TIM_PWM_Stop_DMA+0x138>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d101      	bne.n	800ba78 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800ba74:	2301      	movs	r3, #1
 800ba76:	e000      	b.n	800ba7a <HAL_TIM_PWM_Stop_DMA+0xbe>
 800ba78:	2300      	movs	r3, #0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d017      	beq.n	800baae <HAL_TIM_PWM_Stop_DMA+0xf2>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	6a1a      	ldr	r2, [r3, #32]
 800ba84:	f241 1311 	movw	r3, #4369	; 0x1111
 800ba88:	4013      	ands	r3, r2
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d10f      	bne.n	800baae <HAL_TIM_PWM_Stop_DMA+0xf2>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	6a1a      	ldr	r2, [r3, #32]
 800ba94:	f240 4344 	movw	r3, #1092	; 0x444
 800ba98:	4013      	ands	r3, r2
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d107      	bne.n	800baae <HAL_TIM_PWM_Stop_DMA+0xf2>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800baac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	6a1a      	ldr	r2, [r3, #32]
 800bab4:	f241 1311 	movw	r3, #4369	; 0x1111
 800bab8:	4013      	ands	r3, r2
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10f      	bne.n	800bade <HAL_TIM_PWM_Stop_DMA+0x122>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6a1a      	ldr	r2, [r3, #32]
 800bac4:	f240 4344 	movw	r3, #1092	; 0x444
 800bac8:	4013      	ands	r3, r2
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d107      	bne.n	800bade <HAL_TIM_PWM_Stop_DMA+0x122>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f022 0201 	bic.w	r2, r2, #1
 800badc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2201      	movs	r2, #1
 800bae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	40012c00 	.word	0x40012c00
 800baf4:	40013400 	.word	0x40013400

0800baf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	f003 0302 	and.w	r3, r3, #2
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d122      	bne.n	800bb54 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	f003 0302 	and.w	r3, r3, #2
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d11b      	bne.n	800bb54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f06f 0202 	mvn.w	r2, #2
 800bb24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	f003 0303 	and.w	r3, r3, #3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 faa7 	bl	800c08e <HAL_TIM_IC_CaptureCallback>
 800bb40:	e005      	b.n	800bb4e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fa9a 	bl	800c07c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 faa9 	bl	800c0a0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	f003 0304 	and.w	r3, r3, #4
 800bb5e:	2b04      	cmp	r3, #4
 800bb60:	d122      	bne.n	800bba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	f003 0304 	and.w	r3, r3, #4
 800bb6c:	2b04      	cmp	r3, #4
 800bb6e:	d11b      	bne.n	800bba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f06f 0204 	mvn.w	r2, #4
 800bb78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2202      	movs	r2, #2
 800bb7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fa7d 	bl	800c08e <HAL_TIM_IC_CaptureCallback>
 800bb94:	e005      	b.n	800bba2 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fa70 	bl	800c07c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fa7f 	bl	800c0a0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	f003 0308 	and.w	r3, r3, #8
 800bbb2:	2b08      	cmp	r3, #8
 800bbb4:	d122      	bne.n	800bbfc <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	f003 0308 	and.w	r3, r3, #8
 800bbc0:	2b08      	cmp	r3, #8
 800bbc2:	d11b      	bne.n	800bbfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f06f 0208 	mvn.w	r2, #8
 800bbcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2204      	movs	r2, #4
 800bbd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	69db      	ldr	r3, [r3, #28]
 800bbda:	f003 0303 	and.w	r3, r3, #3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d003      	beq.n	800bbea <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fa53 	bl	800c08e <HAL_TIM_IC_CaptureCallback>
 800bbe8:	e005      	b.n	800bbf6 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 fa46 	bl	800c07c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fa55 	bl	800c0a0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	f003 0310 	and.w	r3, r3, #16
 800bc06:	2b10      	cmp	r3, #16
 800bc08:	d122      	bne.n	800bc50 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	f003 0310 	and.w	r3, r3, #16
 800bc14:	2b10      	cmp	r3, #16
 800bc16:	d11b      	bne.n	800bc50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f06f 0210 	mvn.w	r2, #16
 800bc20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2208      	movs	r2, #8
 800bc26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	69db      	ldr	r3, [r3, #28]
 800bc2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fa29 	bl	800c08e <HAL_TIM_IC_CaptureCallback>
 800bc3c:	e005      	b.n	800bc4a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 fa1c 	bl	800c07c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fa2b 	bl	800c0a0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	f003 0301 	and.w	r3, r3, #1
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d10e      	bne.n	800bc7c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d107      	bne.n	800bc7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f06f 0201 	mvn.w	r2, #1
 800bc74:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f9f7 	bl	800c06a <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc86:	2b80      	cmp	r3, #128	; 0x80
 800bc88:	d10e      	bne.n	800bca8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc94:	2b80      	cmp	r3, #128	; 0x80
 800bc96:	d107      	bne.n	800bca8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bca0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fe10 	bl	800c8c8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb2:	2b40      	cmp	r3, #64	; 0x40
 800bcb4:	d10e      	bne.n	800bcd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc0:	2b40      	cmp	r3, #64	; 0x40
 800bcc2:	d107      	bne.n	800bcd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bccc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 f9ef 	bl	800c0b2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	f003 0320 	and.w	r3, r3, #32
 800bcde:	2b20      	cmp	r3, #32
 800bce0:	d10e      	bne.n	800bd00 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	f003 0320 	and.w	r3, r3, #32
 800bcec:	2b20      	cmp	r3, #32
 800bcee:	d107      	bne.n	800bd00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f06f 0220 	mvn.w	r2, #32
 800bcf8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fddb 	bl	800c8b6 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d101      	bne.n	800bd22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bd1e:	2302      	movs	r3, #2
 800bd20:	e0b4      	b.n	800be8c <HAL_TIM_PWM_ConfigChannel+0x184>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2202      	movs	r2, #2
 800bd2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2b0c      	cmp	r3, #12
 800bd36:	f200 809f 	bhi.w	800be78 <HAL_TIM_PWM_ConfigChannel+0x170>
 800bd3a:	a201      	add	r2, pc, #4	; (adr r2, 800bd40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd40:	0800bd75 	.word	0x0800bd75
 800bd44:	0800be79 	.word	0x0800be79
 800bd48:	0800be79 	.word	0x0800be79
 800bd4c:	0800be79 	.word	0x0800be79
 800bd50:	0800bdb5 	.word	0x0800bdb5
 800bd54:	0800be79 	.word	0x0800be79
 800bd58:	0800be79 	.word	0x0800be79
 800bd5c:	0800be79 	.word	0x0800be79
 800bd60:	0800bdf7 	.word	0x0800bdf7
 800bd64:	0800be79 	.word	0x0800be79
 800bd68:	0800be79 	.word	0x0800be79
 800bd6c:	0800be79 	.word	0x0800be79
 800bd70:	0800be37 	.word	0x0800be37
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68b9      	ldr	r1, [r7, #8]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 fa74 	bl	800c268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	699a      	ldr	r2, [r3, #24]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f042 0208 	orr.w	r2, r2, #8
 800bd8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	699a      	ldr	r2, [r3, #24]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f022 0204 	bic.w	r2, r2, #4
 800bd9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6999      	ldr	r1, [r3, #24]
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	691a      	ldr	r2, [r3, #16]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	430a      	orrs	r2, r1
 800bdb0:	619a      	str	r2, [r3, #24]
    }
    break;
 800bdb2:	e062      	b.n	800be7a <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68b9      	ldr	r1, [r7, #8]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 faca 	bl	800c354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	699a      	ldr	r2, [r3, #24]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	699a      	ldr	r2, [r3, #24]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6999      	ldr	r1, [r3, #24]
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	021a      	lsls	r2, r3, #8
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	430a      	orrs	r2, r1
 800bdf2:	619a      	str	r2, [r3, #24]
    }
    break;
 800bdf4:	e041      	b.n	800be7a <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68b9      	ldr	r1, [r7, #8]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 fb23 	bl	800c448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	69da      	ldr	r2, [r3, #28]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f042 0208 	orr.w	r2, r2, #8
 800be10:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	69da      	ldr	r2, [r3, #28]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f022 0204 	bic.w	r2, r2, #4
 800be20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	69d9      	ldr	r1, [r3, #28]
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	691a      	ldr	r2, [r3, #16]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	430a      	orrs	r2, r1
 800be32:	61da      	str	r2, [r3, #28]
    }
    break;
 800be34:	e021      	b.n	800be7a <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68b9      	ldr	r1, [r7, #8]
 800be3c:	4618      	mov	r0, r3
 800be3e:	f000 fb7d 	bl	800c53c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	69da      	ldr	r2, [r3, #28]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be50:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	69da      	ldr	r2, [r3, #28]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	69d9      	ldr	r1, [r3, #28]
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	021a      	lsls	r2, r3, #8
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	430a      	orrs	r2, r1
 800be74:	61da      	str	r2, [r3, #28]
    }
    break;
 800be76:	e000      	b.n	800be7a <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 800be78:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800be9e:	2300      	movs	r3, #0
 800bea0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d101      	bne.n	800beb0 <HAL_TIM_ConfigClockSource+0x1c>
 800beac:	2302      	movs	r3, #2
 800beae:	e0d8      	b.n	800c062 <HAL_TIM_ConfigClockSource+0x1ce>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2202      	movs	r2, #2
 800bebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bed6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bee8:	d052      	beq.n	800bf90 <HAL_TIM_ConfigClockSource+0xfc>
 800beea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beee:	f200 80ae 	bhi.w	800c04e <HAL_TIM_ConfigClockSource+0x1ba>
 800bef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bef6:	d027      	beq.n	800bf48 <HAL_TIM_ConfigClockSource+0xb4>
 800bef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800befc:	f200 80a7 	bhi.w	800c04e <HAL_TIM_ConfigClockSource+0x1ba>
 800bf00:	2b70      	cmp	r3, #112	; 0x70
 800bf02:	d02a      	beq.n	800bf5a <HAL_TIM_ConfigClockSource+0xc6>
 800bf04:	2b70      	cmp	r3, #112	; 0x70
 800bf06:	f200 80a2 	bhi.w	800c04e <HAL_TIM_ConfigClockSource+0x1ba>
 800bf0a:	2b60      	cmp	r3, #96	; 0x60
 800bf0c:	d063      	beq.n	800bfd6 <HAL_TIM_ConfigClockSource+0x142>
 800bf0e:	2b60      	cmp	r3, #96	; 0x60
 800bf10:	f200 809d 	bhi.w	800c04e <HAL_TIM_ConfigClockSource+0x1ba>
 800bf14:	2b50      	cmp	r3, #80	; 0x50
 800bf16:	d04e      	beq.n	800bfb6 <HAL_TIM_ConfigClockSource+0x122>
 800bf18:	2b50      	cmp	r3, #80	; 0x50
 800bf1a:	f200 8098 	bhi.w	800c04e <HAL_TIM_ConfigClockSource+0x1ba>
 800bf1e:	2b40      	cmp	r3, #64	; 0x40
 800bf20:	d069      	beq.n	800bff6 <HAL_TIM_ConfigClockSource+0x162>
 800bf22:	2b40      	cmp	r3, #64	; 0x40
 800bf24:	f200 8093 	bhi.w	800c04e <HAL_TIM_ConfigClockSource+0x1ba>
 800bf28:	2b30      	cmp	r3, #48	; 0x30
 800bf2a:	f000 8089 	beq.w	800c040 <HAL_TIM_ConfigClockSource+0x1ac>
 800bf2e:	2b30      	cmp	r3, #48	; 0x30
 800bf30:	f200 808d 	bhi.w	800c04e <HAL_TIM_ConfigClockSource+0x1ba>
 800bf34:	2b20      	cmp	r3, #32
 800bf36:	d07c      	beq.n	800c032 <HAL_TIM_ConfigClockSource+0x19e>
 800bf38:	2b20      	cmp	r3, #32
 800bf3a:	f200 8088 	bhi.w	800c04e <HAL_TIM_ConfigClockSource+0x1ba>
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d069      	beq.n	800c016 <HAL_TIM_ConfigClockSource+0x182>
 800bf42:	2b10      	cmp	r3, #16
 800bf44:	d06e      	beq.n	800c024 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800bf46:	e082      	b.n	800c04e <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	689a      	ldr	r2, [r3, #8]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f022 0207 	bic.w	r2, r2, #7
 800bf56:	609a      	str	r2, [r3, #8]
    break;
 800bf58:	e07a      	b.n	800c050 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6818      	ldr	r0, [r3, #0]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	6899      	ldr	r1, [r3, #8]
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	685a      	ldr	r2, [r3, #4]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	f000 fbc5 	bl	800c6f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bf7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bf84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	609a      	str	r2, [r3, #8]
    break;
 800bf8e:	e05f      	b.n	800c050 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6818      	ldr	r0, [r3, #0]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	6899      	ldr	r1, [r3, #8]
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	685a      	ldr	r2, [r3, #4]
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	f000 fbaa 	bl	800c6f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689a      	ldr	r2, [r3, #8]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfb2:	609a      	str	r2, [r3, #8]
    break;
 800bfb4:	e04c      	b.n	800c050 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6818      	ldr	r0, [r3, #0]
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	6859      	ldr	r1, [r3, #4]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	f000 fb14 	bl	800c5f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2150      	movs	r1, #80	; 0x50
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f000 fb73 	bl	800c6ba <TIM_ITRx_SetConfig>
    break;
 800bfd4:	e03c      	b.n	800c050 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	6859      	ldr	r1, [r3, #4]
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	f000 fb36 	bl	800c654 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2160      	movs	r1, #96	; 0x60
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 fb63 	bl	800c6ba <TIM_ITRx_SetConfig>
    break;
 800bff4:	e02c      	b.n	800c050 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6818      	ldr	r0, [r3, #0]
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	6859      	ldr	r1, [r3, #4]
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	461a      	mov	r2, r3
 800c004:	f000 faf4 	bl	800c5f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2140      	movs	r1, #64	; 0x40
 800c00e:	4618      	mov	r0, r3
 800c010:	f000 fb53 	bl	800c6ba <TIM_ITRx_SetConfig>
    break;
 800c014:	e01c      	b.n	800c050 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2100      	movs	r1, #0
 800c01c:	4618      	mov	r0, r3
 800c01e:	f000 fb4c 	bl	800c6ba <TIM_ITRx_SetConfig>
    break;
 800c022:	e015      	b.n	800c050 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2110      	movs	r1, #16
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 fb45 	bl	800c6ba <TIM_ITRx_SetConfig>
    break;
 800c030:	e00e      	b.n	800c050 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2120      	movs	r1, #32
 800c038:	4618      	mov	r0, r3
 800c03a:	f000 fb3e 	bl	800c6ba <TIM_ITRx_SetConfig>
    break;
 800c03e:	e007      	b.n	800c050 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2130      	movs	r1, #48	; 0x30
 800c046:	4618      	mov	r0, r3
 800c048:	f000 fb37 	bl	800c6ba <TIM_ITRx_SetConfig>
    break;
 800c04c:	e000      	b.n	800c050 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 800c04e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c06a:	b480      	push	{r7}
 800c06c:	b083      	sub	sp, #12
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 800c072:	bf00      	nop
 800c074:	370c      	adds	r7, #12
 800c076:	46bd      	mov	sp, r7
 800c078:	bc80      	pop	{r7}
 800c07a:	4770      	bx	lr

0800c07c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c084:	bf00      	nop
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	bc80      	pop	{r7}
 800c08c:	4770      	bx	lr

0800c08e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c08e:	b480      	push	{r7}
 800c090:	b083      	sub	sp, #12
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c096:	bf00      	nop
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bc80      	pop	{r7}
 800c09e:	4770      	bx	lr

0800c0a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bc80      	pop	{r7}
 800c0b0:	4770      	bx	lr

0800c0b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0b2:	b480      	push	{r7}
 800c0b4:	b083      	sub	sp, #12
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0ba:	bf00      	nop
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bc80      	pop	{r7}
 800c0c2:	4770      	bx	lr

0800c0c4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c0cc:	bf00      	nop
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bc80      	pop	{r7}
 800c0d4:	4770      	bx	lr

0800c0d6 <TIM_DMAError>:
  * @brief  TIM DMA error callback 
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e2:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIM_ErrorCallback(htim);
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f7ff ffe9 	bl	800c0c4 <HAL_TIM_ErrorCallback>
}
 800c0f2:	bf00      	nop
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b084      	sub	sp, #16
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c106:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	429a      	cmp	r2, r3
 800c118:	d103      	bne.n	800c122 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2201      	movs	r2, #1
 800c11e:	771a      	strb	r2, [r3, #28]
 800c120:	e019      	b.n	800c156 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d103      	bne.n	800c134 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2202      	movs	r2, #2
 800c130:	771a      	strb	r2, [r3, #28]
 800c132:	e010      	b.n	800c156 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d103      	bne.n	800c146 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2204      	movs	r2, #4
 800c142:	771a      	strb	r2, [r3, #28]
 800c144:	e007      	b.n	800c156 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d102      	bne.n	800c156 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2208      	movs	r2, #8
 800c154:	771a      	strb	r2, [r3, #28]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f7ff ffa2 	bl	800c0a0 <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2200      	movs	r2, #0
 800c160:	771a      	strb	r2, [r3, #28]
}
 800c162:	bf00      	nop
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
	...

0800c16c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800c176:	2300      	movs	r3, #0
 800c178:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a34      	ldr	r2, [pc, #208]	; (800c254 <TIM_Base_SetConfig+0xe8>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d013      	beq.n	800c1b0 <TIM_Base_SetConfig+0x44>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a33      	ldr	r2, [pc, #204]	; (800c258 <TIM_Base_SetConfig+0xec>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d00f      	beq.n	800c1b0 <TIM_Base_SetConfig+0x44>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c196:	d00b      	beq.n	800c1b0 <TIM_Base_SetConfig+0x44>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a30      	ldr	r2, [pc, #192]	; (800c25c <TIM_Base_SetConfig+0xf0>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d007      	beq.n	800c1b0 <TIM_Base_SetConfig+0x44>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a2f      	ldr	r2, [pc, #188]	; (800c260 <TIM_Base_SetConfig+0xf4>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d003      	beq.n	800c1b0 <TIM_Base_SetConfig+0x44>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a2e      	ldr	r2, [pc, #184]	; (800c264 <TIM_Base_SetConfig+0xf8>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d108      	bne.n	800c1c2 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a23      	ldr	r2, [pc, #140]	; (800c254 <TIM_Base_SetConfig+0xe8>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d013      	beq.n	800c1f2 <TIM_Base_SetConfig+0x86>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4a22      	ldr	r2, [pc, #136]	; (800c258 <TIM_Base_SetConfig+0xec>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d00f      	beq.n	800c1f2 <TIM_Base_SetConfig+0x86>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1d8:	d00b      	beq.n	800c1f2 <TIM_Base_SetConfig+0x86>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4a1f      	ldr	r2, [pc, #124]	; (800c25c <TIM_Base_SetConfig+0xf0>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d007      	beq.n	800c1f2 <TIM_Base_SetConfig+0x86>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4a1e      	ldr	r2, [pc, #120]	; (800c260 <TIM_Base_SetConfig+0xf4>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d003      	beq.n	800c1f2 <TIM_Base_SetConfig+0x86>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4a1d      	ldr	r2, [pc, #116]	; (800c264 <TIM_Base_SetConfig+0xf8>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d108      	bne.n	800c204 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	4313      	orrs	r3, r2
 800c202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c20a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	695b      	ldr	r3, [r3, #20]
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	4313      	orrs	r3, r2
 800c214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	689a      	ldr	r2, [r3, #8]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a09      	ldr	r2, [pc, #36]	; (800c254 <TIM_Base_SetConfig+0xe8>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d003      	beq.n	800c23c <TIM_Base_SetConfig+0xd0>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a08      	ldr	r2, [pc, #32]	; (800c258 <TIM_Base_SetConfig+0xec>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d103      	bne.n	800c244 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	691a      	ldr	r2, [r3, #16]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	615a      	str	r2, [r3, #20]
}
 800c24a:	bf00      	nop
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	bc80      	pop	{r7}
 800c252:	4770      	bx	lr
 800c254:	40012c00 	.word	0x40012c00
 800c258:	40013400 	.word	0x40013400
 800c25c:	40000400 	.word	0x40000400
 800c260:	40000800 	.word	0x40000800
 800c264:	40000c00 	.word	0x40000c00

0800c268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c268:	b480      	push	{r7}
 800c26a:	b087      	sub	sp, #28
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800c272:	2300      	movs	r3, #0
 800c274:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800c276:	2300      	movs	r3, #0
 800c278:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800c27a:	2300      	movs	r3, #0
 800c27c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	f023 0201 	bic.w	r2, r3, #1
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a1b      	ldr	r3, [r3, #32]
 800c28e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f023 0303 	bic.w	r3, r3, #3
 800c2aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	f023 0302 	bic.w	r3, r3, #2
 800c2bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	697a      	ldr	r2, [r7, #20]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a20      	ldr	r2, [pc, #128]	; (800c34c <TIM_OC1_SetConfig+0xe4>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d003      	beq.n	800c2d8 <TIM_OC1_SetConfig+0x70>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a1f      	ldr	r2, [pc, #124]	; (800c350 <TIM_OC1_SetConfig+0xe8>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d10c      	bne.n	800c2f2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	f023 0308 	bic.w	r3, r3, #8
 800c2de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	f023 0304 	bic.w	r3, r3, #4
 800c2f0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4a15      	ldr	r2, [pc, #84]	; (800c34c <TIM_OC1_SetConfig+0xe4>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d003      	beq.n	800c302 <TIM_OC1_SetConfig+0x9a>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4a14      	ldr	r2, [pc, #80]	; (800c350 <TIM_OC1_SetConfig+0xe8>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d111      	bne.n	800c326 <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	695b      	ldr	r3, [r3, #20]
 800c316:	693a      	ldr	r2, [r7, #16]
 800c318:	4313      	orrs	r3, r2
 800c31a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	699b      	ldr	r3, [r3, #24]
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	4313      	orrs	r3, r2
 800c324:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	693a      	ldr	r2, [r7, #16]
 800c32a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	621a      	str	r2, [r3, #32]
}
 800c340:	bf00      	nop
 800c342:	371c      	adds	r7, #28
 800c344:	46bd      	mov	sp, r7
 800c346:	bc80      	pop	{r7}
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	40012c00 	.word	0x40012c00
 800c350:	40013400 	.word	0x40013400

0800c354 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c354:	b480      	push	{r7}
 800c356:	b087      	sub	sp, #28
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800c35e:	2300      	movs	r3, #0
 800c360:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800c362:	2300      	movs	r3, #0
 800c364:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800c366:	2300      	movs	r3, #0
 800c368:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a1b      	ldr	r3, [r3, #32]
 800c36e:	f023 0210 	bic.w	r2, r3, #16
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a1b      	ldr	r3, [r3, #32]
 800c37a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c38e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	021b      	lsls	r3, r3, #8
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	f023 0320 	bic.w	r3, r3, #32
 800c3aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	011b      	lsls	r3, r3, #4
 800c3b2:	697a      	ldr	r2, [r7, #20]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a21      	ldr	r2, [pc, #132]	; (800c440 <TIM_OC2_SetConfig+0xec>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d003      	beq.n	800c3c8 <TIM_OC2_SetConfig+0x74>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a20      	ldr	r2, [pc, #128]	; (800c444 <TIM_OC2_SetConfig+0xf0>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d10d      	bne.n	800c3e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	011b      	lsls	r3, r3, #4
 800c3d6:	697a      	ldr	r2, [r7, #20]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3e2:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a16      	ldr	r2, [pc, #88]	; (800c440 <TIM_OC2_SetConfig+0xec>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d003      	beq.n	800c3f4 <TIM_OC2_SetConfig+0xa0>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a15      	ldr	r2, [pc, #84]	; (800c444 <TIM_OC2_SetConfig+0xf0>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d113      	bne.n	800c41c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	699b      	ldr	r3, [r3, #24]
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	4313      	orrs	r3, r2
 800c41a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	685a      	ldr	r2, [r3, #4]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	697a      	ldr	r2, [r7, #20]
 800c434:	621a      	str	r2, [r3, #32]
}
 800c436:	bf00      	nop
 800c438:	371c      	adds	r7, #28
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bc80      	pop	{r7}
 800c43e:	4770      	bx	lr
 800c440:	40012c00 	.word	0x40012c00
 800c444:	40013400 	.word	0x40013400

0800c448 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c448:	b480      	push	{r7}
 800c44a:	b087      	sub	sp, #28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800c452:	2300      	movs	r3, #0
 800c454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800c456:	2300      	movs	r3, #0
 800c458:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800c45a:	2300      	movs	r3, #0
 800c45c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a1b      	ldr	r3, [r3, #32]
 800c462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6a1b      	ldr	r3, [r3, #32]
 800c46e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	69db      	ldr	r3, [r3, #28]
 800c47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f023 0303 	bic.w	r3, r3, #3
 800c48a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	4313      	orrs	r3, r2
 800c494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c49c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	021b      	lsls	r3, r3, #8
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a21      	ldr	r2, [pc, #132]	; (800c534 <TIM_OC3_SetConfig+0xec>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d003      	beq.n	800c4ba <TIM_OC3_SetConfig+0x72>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a20      	ldr	r2, [pc, #128]	; (800c538 <TIM_OC3_SetConfig+0xf0>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d10d      	bne.n	800c4d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	021b      	lsls	r3, r3, #8
 800c4c8:	697a      	ldr	r2, [r7, #20]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4d4:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4a16      	ldr	r2, [pc, #88]	; (800c534 <TIM_OC3_SetConfig+0xec>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d003      	beq.n	800c4e6 <TIM_OC3_SetConfig+0x9e>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a15      	ldr	r2, [pc, #84]	; (800c538 <TIM_OC3_SetConfig+0xf0>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d113      	bne.n	800c50e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c4f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	011b      	lsls	r3, r3, #4
 800c4fc:	693a      	ldr	r2, [r7, #16]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	011b      	lsls	r3, r3, #4
 800c508:	693a      	ldr	r2, [r7, #16]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	693a      	ldr	r2, [r7, #16]
 800c512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	685a      	ldr	r2, [r3, #4]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	621a      	str	r2, [r3, #32]
}
 800c528:	bf00      	nop
 800c52a:	371c      	adds	r7, #28
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bc80      	pop	{r7}
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	40012c00 	.word	0x40012c00
 800c538:	40013400 	.word	0x40013400

0800c53c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b087      	sub	sp, #28
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800c546:	2300      	movs	r3, #0
 800c548:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800c54a:	2300      	movs	r3, #0
 800c54c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800c54e:	2300      	movs	r3, #0
 800c550:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a1b      	ldr	r3, [r3, #32]
 800c556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a1b      	ldr	r3, [r3, #32]
 800c562:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	69db      	ldr	r3, [r3, #28]
 800c56e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c576:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c57e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	021b      	lsls	r3, r3, #8
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	4313      	orrs	r3, r2
 800c58a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c592:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	031b      	lsls	r3, r3, #12
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	4313      	orrs	r3, r2
 800c59e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a11      	ldr	r2, [pc, #68]	; (800c5e8 <TIM_OC4_SetConfig+0xac>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d003      	beq.n	800c5b0 <TIM_OC4_SetConfig+0x74>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4a10      	ldr	r2, [pc, #64]	; (800c5ec <TIM_OC4_SetConfig+0xb0>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d109      	bne.n	800c5c4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	695b      	ldr	r3, [r3, #20]
 800c5bc:	019b      	lsls	r3, r3, #6
 800c5be:	697a      	ldr	r2, [r7, #20]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	693a      	ldr	r2, [r7, #16]
 800c5ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	685a      	ldr	r2, [r3, #4]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	621a      	str	r2, [r3, #32]
}
 800c5de:	bf00      	nop
 800c5e0:	371c      	adds	r7, #28
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bc80      	pop	{r7}
 800c5e6:	4770      	bx	lr
 800c5e8:	40012c00 	.word	0x40012c00
 800c5ec:	40013400 	.word	0x40013400

0800c5f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b087      	sub	sp, #28
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800c600:	2300      	movs	r3, #0
 800c602:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6a1b      	ldr	r3, [r3, #32]
 800c608:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	6a1b      	ldr	r3, [r3, #32]
 800c60e:	f023 0201 	bic.w	r2, r3, #1
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	699b      	ldr	r3, [r3, #24]
 800c61a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c622:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	011b      	lsls	r3, r3, #4
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	f023 030a 	bic.w	r3, r3, #10
 800c634:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800c636:	693a      	ldr	r2, [r7, #16]
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	697a      	ldr	r2, [r7, #20]
 800c642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	621a      	str	r2, [r3, #32]
}
 800c64a:	bf00      	nop
 800c64c:	371c      	adds	r7, #28
 800c64e:	46bd      	mov	sp, r7
 800c650:	bc80      	pop	{r7}
 800c652:	4770      	bx	lr

0800c654 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c654:	b480      	push	{r7}
 800c656:	b087      	sub	sp, #28
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800c660:	2300      	movs	r3, #0
 800c662:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800c664:	2300      	movs	r3, #0
 800c666:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	6a1b      	ldr	r3, [r3, #32]
 800c66c:	f023 0210 	bic.w	r2, r3, #16
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	699b      	ldr	r3, [r3, #24]
 800c678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	6a1b      	ldr	r3, [r3, #32]
 800c67e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	031b      	lsls	r3, r3, #12
 800c68c:	697a      	ldr	r2, [r7, #20]
 800c68e:	4313      	orrs	r3, r2
 800c690:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c698:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	011b      	lsls	r3, r3, #4
 800c69e:	693a      	ldr	r2, [r7, #16]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	697a      	ldr	r2, [r7, #20]
 800c6a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	693a      	ldr	r2, [r7, #16]
 800c6ae:	621a      	str	r2, [r3, #32]
}
 800c6b0:	bf00      	nop
 800c6b2:	371c      	adds	r7, #28
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bc80      	pop	{r7}
 800c6b8:	4770      	bx	lr

0800c6ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800c6ba:	b480      	push	{r7}
 800c6bc:	b085      	sub	sp, #20
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6d6:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800c6d8:	887b      	ldrh	r3, [r7, #2]
 800c6da:	f043 0307 	orr.w	r3, r3, #7
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	609a      	str	r2, [r3, #8]
}
 800c6ee:	bf00      	nop
 800c6f0:	3714      	adds	r7, #20
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bc80      	pop	{r7}
 800c6f6:	4770      	bx	lr

0800c6f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b087      	sub	sp, #28
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
 800c704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800c706:	2300      	movs	r3, #0
 800c708:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	021a      	lsls	r2, r3, #8
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	431a      	orrs	r2, r3
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	4313      	orrs	r3, r2
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	4313      	orrs	r3, r2
 800c728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	697a      	ldr	r2, [r7, #20]
 800c72e:	609a      	str	r2, [r3, #8]
}
 800c730:	bf00      	nop
 800c732:	371c      	adds	r7, #28
 800c734:	46bd      	mov	sp, r7
 800c736:	bc80      	pop	{r7}
 800c738:	4770      	bx	lr

0800c73a <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c73a:	b480      	push	{r7}
 800c73c:	b087      	sub	sp, #28
 800c73e:	af00      	add	r7, sp, #0
 800c740:	60f8      	str	r0, [r7, #12]
 800c742:	60b9      	str	r1, [r7, #8]
 800c744:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800c746:	2300      	movs	r3, #0
 800c748:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800c74a:	2201      	movs	r2, #1
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	fa02 f303 	lsl.w	r3, r2, r3
 800c752:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6a1a      	ldr	r2, [r3, #32]
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	43db      	mvns	r3, r3
 800c75c:	401a      	ands	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	6a1a      	ldr	r2, [r3, #32]
 800c766:	6879      	ldr	r1, [r7, #4]
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	fa01 f303 	lsl.w	r3, r1, r3
 800c76e:	431a      	orrs	r2, r3
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	621a      	str	r2, [r3, #32]
}
 800c774:	bf00      	nop
 800c776:	371c      	adds	r7, #28
 800c778:	46bd      	mov	sp, r7
 800c77a:	bc80      	pop	{r7}
 800c77c:	4770      	bx	lr

0800c77e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c77e:	b480      	push	{r7}
 800c780:	b085      	sub	sp, #20
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
 800c786:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 800c788:	2300      	movs	r3, #0
 800c78a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c792:	2b01      	cmp	r3, #1
 800c794:	d101      	bne.n	800c79a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c796:	2302      	movs	r3, #2
 800c798:	e044      	b.n	800c824 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2201      	movs	r2, #1
 800c79e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	695b      	ldr	r3, [r3, #20]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	4313      	orrs	r3, r2
 800c802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	4313      	orrs	r3, r2
 800c810:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3714      	adds	r7, #20
 800c828:	46bd      	mov	sp, r7
 800c82a:	bc80      	pop	{r7}
 800c82c:	4770      	bx	lr

0800c82e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800c82e:	b480      	push	{r7}
 800c830:	b083      	sub	sp, #12
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
 800c836:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d101      	bne.n	800c846 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c842:	2302      	movs	r3, #2
 800c844:	e032      	b.n	800c8ac <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2202      	movs	r2, #2
 800c852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c864:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	6859      	ldr	r1, [r3, #4]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	430a      	orrs	r2, r1
 800c876:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	689a      	ldr	r2, [r3, #8]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c886:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	6899      	ldr	r1, [r3, #8]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	430a      	orrs	r2, r1
 800c898:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2201      	movs	r2, #1
 800c89e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bc80      	pop	{r7}
 800c8b4:	4770      	bx	lr

0800c8b6 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800c8b6:	b480      	push	{r7}
 800c8b8:	b083      	sub	sp, #12
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800c8be:	bf00      	nop
 800c8c0:	370c      	adds	r7, #12
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bc80      	pop	{r7}
 800c8c6:	4770      	bx	lr

0800c8c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bc80      	pop	{r7}
 800c8d8:	4770      	bx	lr

0800c8da <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b082      	sub	sp, #8
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d101      	bne.n	800c8ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e03f      	b.n	800c96c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d106      	bne.n	800c906 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7fc fbbd 	bl	8009080 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2224      	movs	r2, #36	; 0x24
 800c90a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	68da      	ldr	r2, [r3, #12]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c91c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fa5c 	bl	800cddc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	691a      	ldr	r2, [r3, #16]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c932:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	695a      	ldr	r2, [r3, #20]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c942:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68da      	ldr	r2, [r3, #12]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c952:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2220      	movs	r2, #32
 800c95e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2220      	movs	r2, #32
 800c966:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b088      	sub	sp, #32
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	695b      	ldr	r3, [r3, #20]
 800c992:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800c994:	2300      	movs	r3, #0
 800c996:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800c998:	2300      	movs	r3, #0
 800c99a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	f003 030f 	and.w	r3, r3, #15
 800c9a2:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d10d      	bne.n	800c9c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	f003 0320 	and.w	r3, r3, #32
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d008      	beq.n	800c9c6 <HAL_UART_IRQHandler+0x52>
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	f003 0320 	and.w	r3, r3, #32
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d003      	beq.n	800c9c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 f98b 	bl	800ccda <UART_Receive_IT>
      return;
 800c9c4:	e0cb      	b.n	800cb5e <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f000 80ab 	beq.w	800cb24 <HAL_UART_IRQHandler+0x1b0>
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	f003 0301 	and.w	r3, r3, #1
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d105      	bne.n	800c9e4 <HAL_UART_IRQHandler+0x70>
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f000 80a0 	beq.w	800cb24 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	f003 0301 	and.w	r3, r3, #1
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00a      	beq.n	800ca04 <HAL_UART_IRQHandler+0x90>
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d005      	beq.n	800ca04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9fc:	f043 0201 	orr.w	r2, r3, #1
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	f003 0304 	and.w	r3, r3, #4
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00a      	beq.n	800ca24 <HAL_UART_IRQHandler+0xb0>
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	f003 0301 	and.w	r3, r3, #1
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d005      	beq.n	800ca24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca1c:	f043 0202 	orr.w	r2, r3, #2
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	f003 0302 	and.w	r3, r3, #2
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00a      	beq.n	800ca44 <HAL_UART_IRQHandler+0xd0>
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d005      	beq.n	800ca44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca3c:	f043 0204 	orr.w	r2, r3, #4
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	f003 0308 	and.w	r3, r3, #8
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00a      	beq.n	800ca64 <HAL_UART_IRQHandler+0xf0>
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	f003 0301 	and.w	r3, r3, #1
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d005      	beq.n	800ca64 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca5c:	f043 0208 	orr.w	r2, r3, #8
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d077      	beq.n	800cb5c <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	f003 0320 	and.w	r3, r3, #32
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d007      	beq.n	800ca86 <HAL_UART_IRQHandler+0x112>
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	f003 0320 	and.w	r3, r3, #32
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d002      	beq.n	800ca86 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 f92a 	bl	800ccda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	695b      	ldr	r3, [r3, #20]
 800ca8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	bf14      	ite	ne
 800ca94:	2301      	movne	r3, #1
 800ca96:	2300      	moveq	r3, #0
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa0:	f003 0308 	and.w	r3, r3, #8
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d102      	bne.n	800caae <HAL_UART_IRQHandler+0x13a>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d031      	beq.n	800cb12 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 f875 	bl	800cb9e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	695b      	ldr	r3, [r3, #20]
 800caba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d023      	beq.n	800cb0a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	695a      	ldr	r2, [r3, #20]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cad0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d013      	beq.n	800cb02 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cade:	4a21      	ldr	r2, [pc, #132]	; (800cb64 <HAL_UART_IRQHandler+0x1f0>)
 800cae0:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fd fa9c 	bl	800a024 <HAL_DMA_Abort_IT>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d016      	beq.n	800cb20 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cafc:	4610      	mov	r0, r2
 800cafe:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb00:	e00e      	b.n	800cb20 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f842 	bl	800cb8c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb08:	e00a      	b.n	800cb20 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 f83e 	bl	800cb8c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb10:	e006      	b.n	800cb20 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f83a 	bl	800cb8c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800cb1e:	e01d      	b.n	800cb5c <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb20:	bf00      	nop
    return;
 800cb22:	e01b      	b.n	800cb5c <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d008      	beq.n	800cb40 <HAL_UART_IRQHandler+0x1cc>
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d003      	beq.n	800cb40 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 f861 	bl	800cc00 <UART_Transmit_IT>
    return;
 800cb3e:	e00e      	b.n	800cb5e <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d009      	beq.n	800cb5e <HAL_UART_IRQHandler+0x1ea>
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d004      	beq.n	800cb5e <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f8a8 	bl	800ccaa <UART_EndTransmit_IT>
    return;
 800cb5a:	e000      	b.n	800cb5e <HAL_UART_IRQHandler+0x1ea>
    return;
 800cb5c:	bf00      	nop
  }
}
 800cb5e:	3720      	adds	r7, #32
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	0800cbd9 	.word	0x0800cbd9

0800cb68 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800cb70:	bf00      	nop
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bc80      	pop	{r7}
 800cb78:	4770      	bx	lr

0800cb7a <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb7a:	b480      	push	{r7}
 800cb7c:	b083      	sub	sp, #12
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cb82:	bf00      	nop
 800cb84:	370c      	adds	r7, #12
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bc80      	pop	{r7}
 800cb8a:	4770      	bx	lr

0800cb8c <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bc80      	pop	{r7}
 800cb9c:	4770      	bx	lr

0800cb9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb9e:	b480      	push	{r7}
 800cba0:	b083      	sub	sp, #12
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	68da      	ldr	r2, [r3, #12]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cbb4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	695a      	ldr	r2, [r3, #20]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f022 0201 	bic.w	r2, r2, #1
 800cbc4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2220      	movs	r2, #32
 800cbca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800cbce:	bf00      	nop
 800cbd0:	370c      	adds	r7, #12
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bc80      	pop	{r7}
 800cbd6:	4770      	bx	lr

0800cbd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f7ff ffca 	bl	800cb8c <HAL_UART_ErrorCallback>
}
 800cbf8:	bf00      	nop
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b21      	cmp	r3, #33	; 0x21
 800cc12:	d144      	bne.n	800cc9e <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc1c:	d11a      	bne.n	800cc54 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a1b      	ldr	r3, [r3, #32]
 800cc22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	881b      	ldrh	r3, [r3, #0]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc32:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d105      	bne.n	800cc48 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6a1b      	ldr	r3, [r3, #32]
 800cc40:	1c9a      	adds	r2, r3, #2
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	621a      	str	r2, [r3, #32]
 800cc46:	e00e      	b.n	800cc66 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6a1b      	ldr	r3, [r3, #32]
 800cc4c:	1c5a      	adds	r2, r3, #1
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	621a      	str	r2, [r3, #32]
 800cc52:	e008      	b.n	800cc66 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6a1b      	ldr	r3, [r3, #32]
 800cc58:	1c59      	adds	r1, r3, #1
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	6211      	str	r1, [r2, #32]
 800cc5e:	781a      	ldrb	r2, [r3, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	4619      	mov	r1, r3
 800cc74:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10f      	bne.n	800cc9a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	68da      	ldr	r2, [r3, #12]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68da      	ldr	r2, [r3, #12]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e000      	b.n	800cca0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cc9e:	2302      	movs	r3, #2
  }
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3714      	adds	r7, #20
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bc80      	pop	{r7}
 800cca8:	4770      	bx	lr

0800ccaa <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b082      	sub	sp, #8
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68da      	ldr	r2, [r3, #12]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccc0:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2220      	movs	r2, #32
 800ccc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f7ff ff4c 	bl	800cb68 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b084      	sub	sp, #16
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	2b22      	cmp	r3, #34	; 0x22
 800ccec:	d171      	bne.n	800cdd2 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccf6:	d123      	bne.n	800cd40 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccfc:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	691b      	ldr	r3, [r3, #16]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10e      	bne.n	800cd24 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd1c:	1c9a      	adds	r2, r3, #2
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	629a      	str	r2, [r3, #40]	; 0x28
 800cd22:	e029      	b.n	800cd78 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd38:	1c5a      	adds	r2, r3, #1
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	629a      	str	r2, [r3, #40]	; 0x28
 800cd3e:	e01b      	b.n	800cd78 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	691b      	ldr	r3, [r3, #16]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10a      	bne.n	800cd5e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	6858      	ldr	r0, [r3, #4]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd52:	1c59      	adds	r1, r3, #1
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	6291      	str	r1, [r2, #40]	; 0x28
 800cd58:	b2c2      	uxtb	r2, r0
 800cd5a:	701a      	strb	r2, [r3, #0]
 800cd5c:	e00c      	b.n	800cd78 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd6a:	1c58      	adds	r0, r3, #1
 800cd6c:	6879      	ldr	r1, [r7, #4]
 800cd6e:	6288      	str	r0, [r1, #40]	; 0x28
 800cd70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd74:	b2d2      	uxtb	r2, r2
 800cd76:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	4619      	mov	r1, r3
 800cd86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d120      	bne.n	800cdce <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	68da      	ldr	r2, [r3, #12]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f022 0220 	bic.w	r2, r2, #32
 800cd9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	68da      	ldr	r2, [r3, #12]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cdaa:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	695a      	ldr	r2, [r3, #20]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f022 0201 	bic.w	r2, r2, #1
 800cdba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2220      	movs	r2, #32
 800cdc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f7ff fed8 	bl	800cb7a <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	e002      	b.n	800cdd4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	e000      	b.n	800cdd4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800cdd2:	2302      	movs	r3, #2
  }
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cddc:	b5b0      	push	{r4, r5, r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800cde4:	2300      	movs	r3, #0
 800cde6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	691b      	ldr	r3, [r3, #16]
 800cdee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68da      	ldr	r2, [r3, #12]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	430a      	orrs	r2, r1
 800cdfc:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	689a      	ldr	r2, [r3, #8]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	431a      	orrs	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800ce1e:	f023 030c 	bic.w	r3, r3, #12
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	6812      	ldr	r2, [r2, #0]
 800ce26:	68f9      	ldr	r1, [r7, #12]
 800ce28:	430b      	orrs	r3, r1
 800ce2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	695b      	ldr	r3, [r3, #20]
 800ce32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	699a      	ldr	r2, [r3, #24]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	430a      	orrs	r2, r1
 800ce40:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a6f      	ldr	r2, [pc, #444]	; (800d004 <UART_SetConfig+0x228>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d16b      	bne.n	800cf24 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800ce4c:	f7fe fa32 	bl	800b2b4 <HAL_RCC_GetPCLK2Freq>
 800ce50:	4602      	mov	r2, r0
 800ce52:	4613      	mov	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	4413      	add	r3, r2
 800ce58:	009a      	lsls	r2, r3, #2
 800ce5a:	441a      	add	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce66:	4a68      	ldr	r2, [pc, #416]	; (800d008 <UART_SetConfig+0x22c>)
 800ce68:	fba2 2303 	umull	r2, r3, r2, r3
 800ce6c:	095b      	lsrs	r3, r3, #5
 800ce6e:	011c      	lsls	r4, r3, #4
 800ce70:	f7fe fa20 	bl	800b2b4 <HAL_RCC_GetPCLK2Freq>
 800ce74:	4602      	mov	r2, r0
 800ce76:	4613      	mov	r3, r2
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	009a      	lsls	r2, r3, #2
 800ce7e:	441a      	add	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	fbb2 f5f3 	udiv	r5, r2, r3
 800ce8a:	f7fe fa13 	bl	800b2b4 <HAL_RCC_GetPCLK2Freq>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	4613      	mov	r3, r2
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	4413      	add	r3, r2
 800ce96:	009a      	lsls	r2, r3, #2
 800ce98:	441a      	add	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cea4:	4a58      	ldr	r2, [pc, #352]	; (800d008 <UART_SetConfig+0x22c>)
 800cea6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceaa:	095b      	lsrs	r3, r3, #5
 800ceac:	2264      	movs	r2, #100	; 0x64
 800ceae:	fb02 f303 	mul.w	r3, r2, r3
 800ceb2:	1aeb      	subs	r3, r5, r3
 800ceb4:	011b      	lsls	r3, r3, #4
 800ceb6:	3332      	adds	r3, #50	; 0x32
 800ceb8:	4a53      	ldr	r2, [pc, #332]	; (800d008 <UART_SetConfig+0x22c>)
 800ceba:	fba2 2303 	umull	r2, r3, r2, r3
 800cebe:	095b      	lsrs	r3, r3, #5
 800cec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cec4:	441c      	add	r4, r3
 800cec6:	f7fe f9f5 	bl	800b2b4 <HAL_RCC_GetPCLK2Freq>
 800ceca:	4602      	mov	r2, r0
 800cecc:	4613      	mov	r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	4413      	add	r3, r2
 800ced2:	009a      	lsls	r2, r3, #2
 800ced4:	441a      	add	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	fbb2 f5f3 	udiv	r5, r2, r3
 800cee0:	f7fe f9e8 	bl	800b2b4 <HAL_RCC_GetPCLK2Freq>
 800cee4:	4602      	mov	r2, r0
 800cee6:	4613      	mov	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	009a      	lsls	r2, r3, #2
 800ceee:	441a      	add	r2, r3
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cefa:	4a43      	ldr	r2, [pc, #268]	; (800d008 <UART_SetConfig+0x22c>)
 800cefc:	fba2 2303 	umull	r2, r3, r2, r3
 800cf00:	095b      	lsrs	r3, r3, #5
 800cf02:	2264      	movs	r2, #100	; 0x64
 800cf04:	fb02 f303 	mul.w	r3, r2, r3
 800cf08:	1aeb      	subs	r3, r5, r3
 800cf0a:	011b      	lsls	r3, r3, #4
 800cf0c:	3332      	adds	r3, #50	; 0x32
 800cf0e:	4a3e      	ldr	r2, [pc, #248]	; (800d008 <UART_SetConfig+0x22c>)
 800cf10:	fba2 2303 	umull	r2, r3, r2, r3
 800cf14:	095b      	lsrs	r3, r3, #5
 800cf16:	f003 020f 	and.w	r2, r3, #15
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4422      	add	r2, r4
 800cf20:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800cf22:	e06a      	b.n	800cffa <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800cf24:	f7fe f9b2 	bl	800b28c <HAL_RCC_GetPCLK1Freq>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	4413      	add	r3, r2
 800cf30:	009a      	lsls	r2, r3, #2
 800cf32:	441a      	add	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf3e:	4a32      	ldr	r2, [pc, #200]	; (800d008 <UART_SetConfig+0x22c>)
 800cf40:	fba2 2303 	umull	r2, r3, r2, r3
 800cf44:	095b      	lsrs	r3, r3, #5
 800cf46:	011c      	lsls	r4, r3, #4
 800cf48:	f7fe f9a0 	bl	800b28c <HAL_RCC_GetPCLK1Freq>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	4613      	mov	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	009a      	lsls	r2, r3, #2
 800cf56:	441a      	add	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	fbb2 f5f3 	udiv	r5, r2, r3
 800cf62:	f7fe f993 	bl	800b28c <HAL_RCC_GetPCLK1Freq>
 800cf66:	4602      	mov	r2, r0
 800cf68:	4613      	mov	r3, r2
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	4413      	add	r3, r2
 800cf6e:	009a      	lsls	r2, r3, #2
 800cf70:	441a      	add	r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf7c:	4a22      	ldr	r2, [pc, #136]	; (800d008 <UART_SetConfig+0x22c>)
 800cf7e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf82:	095b      	lsrs	r3, r3, #5
 800cf84:	2264      	movs	r2, #100	; 0x64
 800cf86:	fb02 f303 	mul.w	r3, r2, r3
 800cf8a:	1aeb      	subs	r3, r5, r3
 800cf8c:	011b      	lsls	r3, r3, #4
 800cf8e:	3332      	adds	r3, #50	; 0x32
 800cf90:	4a1d      	ldr	r2, [pc, #116]	; (800d008 <UART_SetConfig+0x22c>)
 800cf92:	fba2 2303 	umull	r2, r3, r2, r3
 800cf96:	095b      	lsrs	r3, r3, #5
 800cf98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf9c:	441c      	add	r4, r3
 800cf9e:	f7fe f975 	bl	800b28c <HAL_RCC_GetPCLK1Freq>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	009a      	lsls	r2, r3, #2
 800cfac:	441a      	add	r2, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	fbb2 f5f3 	udiv	r5, r2, r3
 800cfb8:	f7fe f968 	bl	800b28c <HAL_RCC_GetPCLK1Freq>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	4413      	add	r3, r2
 800cfc4:	009a      	lsls	r2, r3, #2
 800cfc6:	441a      	add	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfd2:	4a0d      	ldr	r2, [pc, #52]	; (800d008 <UART_SetConfig+0x22c>)
 800cfd4:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd8:	095b      	lsrs	r3, r3, #5
 800cfda:	2264      	movs	r2, #100	; 0x64
 800cfdc:	fb02 f303 	mul.w	r3, r2, r3
 800cfe0:	1aeb      	subs	r3, r5, r3
 800cfe2:	011b      	lsls	r3, r3, #4
 800cfe4:	3332      	adds	r3, #50	; 0x32
 800cfe6:	4a08      	ldr	r2, [pc, #32]	; (800d008 <UART_SetConfig+0x22c>)
 800cfe8:	fba2 2303 	umull	r2, r3, r2, r3
 800cfec:	095b      	lsrs	r3, r3, #5
 800cfee:	f003 020f 	and.w	r2, r3, #15
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4422      	add	r2, r4
 800cff8:	609a      	str	r2, [r3, #8]
}
 800cffa:	bf00      	nop
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bdb0      	pop	{r4, r5, r7, pc}
 800d002:	bf00      	nop
 800d004:	40013800 	.word	0x40013800
 800d008:	51eb851f 	.word	0x51eb851f

0800d00c <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d020:	683a      	ldr	r2, [r7, #0]
 800d022:	6812      	ldr	r2, [r2, #0]
 800d024:	f023 0101 	bic.w	r1, r3, #1
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	2b08      	cmp	r3, #8
 800d034:	d132      	bne.n	800d09c <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d040:	4b31      	ldr	r3, [pc, #196]	; (800d108 <FSMC_NORSRAM_Init+0xfc>)
 800d042:	4013      	ands	r3, r2
 800d044:	683a      	ldr	r2, [r7, #0]
 800d046:	6851      	ldr	r1, [r2, #4]
 800d048:	683a      	ldr	r2, [r7, #0]
 800d04a:	6892      	ldr	r2, [r2, #8]
 800d04c:	4311      	orrs	r1, r2
 800d04e:	683a      	ldr	r2, [r7, #0]
 800d050:	68d2      	ldr	r2, [r2, #12]
 800d052:	4311      	orrs	r1, r2
 800d054:	683a      	ldr	r2, [r7, #0]
 800d056:	6912      	ldr	r2, [r2, #16]
 800d058:	4311      	orrs	r1, r2
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	6952      	ldr	r2, [r2, #20]
 800d05e:	4311      	orrs	r1, r2
 800d060:	683a      	ldr	r2, [r7, #0]
 800d062:	6992      	ldr	r2, [r2, #24]
 800d064:	4311      	orrs	r1, r2
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	69d2      	ldr	r2, [r2, #28]
 800d06a:	4311      	orrs	r1, r2
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	6a12      	ldr	r2, [r2, #32]
 800d070:	4311      	orrs	r1, r2
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d076:	4311      	orrs	r1, r2
 800d078:	683a      	ldr	r2, [r7, #0]
 800d07a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d07c:	4311      	orrs	r1, r2
 800d07e:	683a      	ldr	r2, [r7, #0]
 800d080:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d082:	4311      	orrs	r1, r2
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d088:	430a      	orrs	r2, r1
 800d08a:	4313      	orrs	r3, r2
 800d08c:	683a      	ldr	r2, [r7, #0]
 800d08e:	6812      	ldr	r2, [r2, #0]
 800d090:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d09a:	e02f      	b.n	800d0fc <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d0a6:	4b18      	ldr	r3, [pc, #96]	; (800d108 <FSMC_NORSRAM_Init+0xfc>)
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	6851      	ldr	r1, [r2, #4]
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	6892      	ldr	r2, [r2, #8]
 800d0b2:	4311      	orrs	r1, r2
 800d0b4:	683a      	ldr	r2, [r7, #0]
 800d0b6:	68d2      	ldr	r2, [r2, #12]
 800d0b8:	4311      	orrs	r1, r2
 800d0ba:	683a      	ldr	r2, [r7, #0]
 800d0bc:	6912      	ldr	r2, [r2, #16]
 800d0be:	4311      	orrs	r1, r2
 800d0c0:	683a      	ldr	r2, [r7, #0]
 800d0c2:	6952      	ldr	r2, [r2, #20]
 800d0c4:	4311      	orrs	r1, r2
 800d0c6:	683a      	ldr	r2, [r7, #0]
 800d0c8:	6992      	ldr	r2, [r2, #24]
 800d0ca:	4311      	orrs	r1, r2
 800d0cc:	683a      	ldr	r2, [r7, #0]
 800d0ce:	69d2      	ldr	r2, [r2, #28]
 800d0d0:	4311      	orrs	r1, r2
 800d0d2:	683a      	ldr	r2, [r7, #0]
 800d0d4:	6a12      	ldr	r2, [r2, #32]
 800d0d6:	4311      	orrs	r1, r2
 800d0d8:	683a      	ldr	r2, [r7, #0]
 800d0da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d0dc:	4311      	orrs	r1, r2
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d0e2:	4311      	orrs	r1, r2
 800d0e4:	683a      	ldr	r2, [r7, #0]
 800d0e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d0e8:	4311      	orrs	r1, r2
 800d0ea:	683a      	ldr	r2, [r7, #0]
 800d0ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d0ee:	4311      	orrs	r1, r2
 800d0f0:	683a      	ldr	r2, [r7, #0]
 800d0f2:	6812      	ldr	r2, [r2, #0]
 800d0f4:	4319      	orrs	r1, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 800d0fc:	2300      	movs	r3, #0
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	370c      	adds	r7, #12
 800d102:	46bd      	mov	sp, r7
 800d104:	bc80      	pop	{r7}
 800d106:	4770      	bx	lr
 800d108:	fff70081 	.word	0xfff70081

0800d10c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	1c5a      	adds	r2, r3, #1
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d122:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	011b      	lsls	r3, r3, #4
 800d130:	431a      	orrs	r2, r3
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	021b      	lsls	r3, r3, #8
 800d138:	431a      	orrs	r2, r3
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	041b      	lsls	r3, r3, #16
 800d140:	431a      	orrs	r2, r3
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	3b01      	subs	r3, #1
 800d148:	051b      	lsls	r3, r3, #20
 800d14a:	431a      	orrs	r2, r3
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	695b      	ldr	r3, [r3, #20]
 800d150:	3b02      	subs	r3, #2
 800d152:	061b      	lsls	r3, r3, #24
 800d154:	431a      	orrs	r2, r3
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	699b      	ldr	r3, [r3, #24]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	3201      	adds	r2, #1
 800d160:	4319      	orrs	r1, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3714      	adds	r7, #20
 800d16e:	46bd      	mov	sp, r7
 800d170:	bc80      	pop	{r7}
 800d172:	4770      	bx	lr

0800d174 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800d174:	b480      	push	{r7}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
 800d180:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d188:	d11d      	bne.n	800d1c6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d192:	4b13      	ldr	r3, [pc, #76]	; (800d1e0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800d194:	4013      	ands	r3, r2
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	6811      	ldr	r1, [r2, #0]
 800d19a:	68ba      	ldr	r2, [r7, #8]
 800d19c:	6852      	ldr	r2, [r2, #4]
 800d19e:	0112      	lsls	r2, r2, #4
 800d1a0:	4311      	orrs	r1, r2
 800d1a2:	68ba      	ldr	r2, [r7, #8]
 800d1a4:	6892      	ldr	r2, [r2, #8]
 800d1a6:	0212      	lsls	r2, r2, #8
 800d1a8:	4311      	orrs	r1, r2
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	6992      	ldr	r2, [r2, #24]
 800d1ae:	4311      	orrs	r1, r2
 800d1b0:	68ba      	ldr	r2, [r7, #8]
 800d1b2:	68d2      	ldr	r2, [r2, #12]
 800d1b4:	0412      	lsls	r2, r2, #16
 800d1b6:	430a      	orrs	r2, r1
 800d1b8:	ea43 0102 	orr.w	r1, r3, r2
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d1c4:	e005      	b.n	800d1d2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d1ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800d1d2:	2300      	movs	r3, #0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3714      	adds	r7, #20
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bc80      	pop	{r7}
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	cff00000 	.word	0xcff00000

0800d1e4 <__cxa_pure_virtual>:
 800d1e4:	b508      	push	{r3, lr}
 800d1e6:	f000 f80d 	bl	800d204 <_ZSt9terminatev>

0800d1ea <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d1ea:	b508      	push	{r3, lr}
 800d1ec:	4780      	blx	r0
 800d1ee:	f000 f8fa 	bl	800d3e6 <abort>
	...

0800d1f4 <_ZSt13get_terminatev>:
 800d1f4:	4b02      	ldr	r3, [pc, #8]	; (800d200 <_ZSt13get_terminatev+0xc>)
 800d1f6:	6818      	ldr	r0, [r3, #0]
 800d1f8:	f3bf 8f5b 	dmb	ish
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	20000060 	.word	0x20000060

0800d204 <_ZSt9terminatev>:
 800d204:	b508      	push	{r3, lr}
 800d206:	f7ff fff5 	bl	800d1f4 <_ZSt13get_terminatev>
 800d20a:	f7ff ffee 	bl	800d1ea <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800d210 <floor>:
 800d210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d214:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d218:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d21c:	2e13      	cmp	r6, #19
 800d21e:	4602      	mov	r2, r0
 800d220:	460b      	mov	r3, r1
 800d222:	4607      	mov	r7, r0
 800d224:	460c      	mov	r4, r1
 800d226:	4605      	mov	r5, r0
 800d228:	dc33      	bgt.n	800d292 <floor+0x82>
 800d22a:	2e00      	cmp	r6, #0
 800d22c:	da14      	bge.n	800d258 <floor+0x48>
 800d22e:	a334      	add	r3, pc, #208	; (adr r3, 800d300 <floor+0xf0>)
 800d230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d234:	f7f3 f806 	bl	8000244 <__adddf3>
 800d238:	2200      	movs	r2, #0
 800d23a:	2300      	movs	r3, #0
 800d23c:	f7f3 fc48 	bl	8000ad0 <__aeabi_dcmpgt>
 800d240:	b138      	cbz	r0, 800d252 <floor+0x42>
 800d242:	2c00      	cmp	r4, #0
 800d244:	da58      	bge.n	800d2f8 <floor+0xe8>
 800d246:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d24a:	431d      	orrs	r5, r3
 800d24c:	d001      	beq.n	800d252 <floor+0x42>
 800d24e:	2500      	movs	r5, #0
 800d250:	4c2d      	ldr	r4, [pc, #180]	; (800d308 <floor+0xf8>)
 800d252:	4623      	mov	r3, r4
 800d254:	462f      	mov	r7, r5
 800d256:	e025      	b.n	800d2a4 <floor+0x94>
 800d258:	4a2c      	ldr	r2, [pc, #176]	; (800d30c <floor+0xfc>)
 800d25a:	fa42 f806 	asr.w	r8, r2, r6
 800d25e:	ea01 0208 	and.w	r2, r1, r8
 800d262:	4302      	orrs	r2, r0
 800d264:	d01e      	beq.n	800d2a4 <floor+0x94>
 800d266:	a326      	add	r3, pc, #152	; (adr r3, 800d300 <floor+0xf0>)
 800d268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26c:	f7f2 ffea 	bl	8000244 <__adddf3>
 800d270:	2200      	movs	r2, #0
 800d272:	2300      	movs	r3, #0
 800d274:	f7f3 fc2c 	bl	8000ad0 <__aeabi_dcmpgt>
 800d278:	2800      	cmp	r0, #0
 800d27a:	d0ea      	beq.n	800d252 <floor+0x42>
 800d27c:	2c00      	cmp	r4, #0
 800d27e:	bfbe      	ittt	lt
 800d280:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d284:	fa43 f606 	asrlt.w	r6, r3, r6
 800d288:	19a4      	addlt	r4, r4, r6
 800d28a:	2500      	movs	r5, #0
 800d28c:	ea24 0408 	bic.w	r4, r4, r8
 800d290:	e7df      	b.n	800d252 <floor+0x42>
 800d292:	2e33      	cmp	r6, #51	; 0x33
 800d294:	dd0a      	ble.n	800d2ac <floor+0x9c>
 800d296:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d29a:	d103      	bne.n	800d2a4 <floor+0x94>
 800d29c:	f7f2 ffd2 	bl	8000244 <__adddf3>
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	4638      	mov	r0, r7
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2b0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d2b4:	fa22 f808 	lsr.w	r8, r2, r8
 800d2b8:	ea18 0f00 	tst.w	r8, r0
 800d2bc:	d0f2      	beq.n	800d2a4 <floor+0x94>
 800d2be:	a310      	add	r3, pc, #64	; (adr r3, 800d300 <floor+0xf0>)
 800d2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c4:	f7f2 ffbe 	bl	8000244 <__adddf3>
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	f7f3 fc00 	bl	8000ad0 <__aeabi_dcmpgt>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d0be      	beq.n	800d252 <floor+0x42>
 800d2d4:	2c00      	cmp	r4, #0
 800d2d6:	da02      	bge.n	800d2de <floor+0xce>
 800d2d8:	2e14      	cmp	r6, #20
 800d2da:	d103      	bne.n	800d2e4 <floor+0xd4>
 800d2dc:	3401      	adds	r4, #1
 800d2de:	ea25 0508 	bic.w	r5, r5, r8
 800d2e2:	e7b6      	b.n	800d252 <floor+0x42>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d2ea:	fa03 f606 	lsl.w	r6, r3, r6
 800d2ee:	4435      	add	r5, r6
 800d2f0:	42bd      	cmp	r5, r7
 800d2f2:	bf38      	it	cc
 800d2f4:	18e4      	addcc	r4, r4, r3
 800d2f6:	e7f2      	b.n	800d2de <floor+0xce>
 800d2f8:	2500      	movs	r5, #0
 800d2fa:	462c      	mov	r4, r5
 800d2fc:	e7a9      	b.n	800d252 <floor+0x42>
 800d2fe:	bf00      	nop
 800d300:	8800759c 	.word	0x8800759c
 800d304:	7e37e43c 	.word	0x7e37e43c
 800d308:	bff00000 	.word	0xbff00000
 800d30c:	000fffff 	.word	0x000fffff

0800d310 <sqrtf>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	4605      	mov	r5, r0
 800d314:	f000 f816 	bl	800d344 <__ieee754_sqrtf>
 800d318:	4629      	mov	r1, r5
 800d31a:	4604      	mov	r4, r0
 800d31c:	4628      	mov	r0, r5
 800d31e:	f7f3 ff4d 	bl	80011bc <__aeabi_fcmpun>
 800d322:	b968      	cbnz	r0, 800d340 <sqrtf+0x30>
 800d324:	2100      	movs	r1, #0
 800d326:	4628      	mov	r0, r5
 800d328:	f7f3 ff20 	bl	800116c <__aeabi_fcmplt>
 800d32c:	b140      	cbz	r0, 800d340 <sqrtf+0x30>
 800d32e:	f000 f861 	bl	800d3f4 <__errno>
 800d332:	2321      	movs	r3, #33	; 0x21
 800d334:	2100      	movs	r1, #0
 800d336:	6003      	str	r3, [r0, #0]
 800d338:	4608      	mov	r0, r1
 800d33a:	f7f3 fe2d 	bl	8000f98 <__aeabi_fdiv>
 800d33e:	4604      	mov	r4, r0
 800d340:	4620      	mov	r0, r4
 800d342:	bd38      	pop	{r3, r4, r5, pc}

0800d344 <__ieee754_sqrtf>:
 800d344:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d348:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d34c:	b570      	push	{r4, r5, r6, lr}
 800d34e:	4603      	mov	r3, r0
 800d350:	4604      	mov	r4, r0
 800d352:	d309      	bcc.n	800d368 <__ieee754_sqrtf+0x24>
 800d354:	4601      	mov	r1, r0
 800d356:	f7f3 fd6b 	bl	8000e30 <__aeabi_fmul>
 800d35a:	4601      	mov	r1, r0
 800d35c:	4620      	mov	r0, r4
 800d35e:	f7f3 fc5f 	bl	8000c20 <__addsf3>
 800d362:	4604      	mov	r4, r0
 800d364:	4620      	mov	r0, r4
 800d366:	bd70      	pop	{r4, r5, r6, pc}
 800d368:	2a00      	cmp	r2, #0
 800d36a:	d0fb      	beq.n	800d364 <__ieee754_sqrtf+0x20>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	da06      	bge.n	800d37e <__ieee754_sqrtf+0x3a>
 800d370:	4601      	mov	r1, r0
 800d372:	f7f3 fc53 	bl	8000c1c <__aeabi_fsub>
 800d376:	4601      	mov	r1, r0
 800d378:	f7f3 fe0e 	bl	8000f98 <__aeabi_fdiv>
 800d37c:	e7f1      	b.n	800d362 <__ieee754_sqrtf+0x1e>
 800d37e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800d382:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800d386:	d029      	beq.n	800d3dc <__ieee754_sqrtf+0x98>
 800d388:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800d38c:	07cb      	lsls	r3, r1, #31
 800d38e:	f04f 0300 	mov.w	r3, #0
 800d392:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800d396:	f04f 0419 	mov.w	r4, #25
 800d39a:	461e      	mov	r6, r3
 800d39c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800d3a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d3a4:	bf58      	it	pl
 800d3a6:	0052      	lslpl	r2, r2, #1
 800d3a8:	1040      	asrs	r0, r0, #1
 800d3aa:	0052      	lsls	r2, r2, #1
 800d3ac:	1875      	adds	r5, r6, r1
 800d3ae:	4295      	cmp	r5, r2
 800d3b0:	bfde      	ittt	le
 800d3b2:	186e      	addle	r6, r5, r1
 800d3b4:	1b52      	suble	r2, r2, r5
 800d3b6:	185b      	addle	r3, r3, r1
 800d3b8:	3c01      	subs	r4, #1
 800d3ba:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d3be:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d3c2:	d1f3      	bne.n	800d3ac <__ieee754_sqrtf+0x68>
 800d3c4:	b112      	cbz	r2, 800d3cc <__ieee754_sqrtf+0x88>
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	f023 0301 	bic.w	r3, r3, #1
 800d3cc:	105c      	asrs	r4, r3, #1
 800d3ce:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800d3d2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800d3d6:	e7c5      	b.n	800d364 <__ieee754_sqrtf+0x20>
 800d3d8:	005b      	lsls	r3, r3, #1
 800d3da:	3201      	adds	r2, #1
 800d3dc:	0218      	lsls	r0, r3, #8
 800d3de:	d5fb      	bpl.n	800d3d8 <__ieee754_sqrtf+0x94>
 800d3e0:	3a01      	subs	r2, #1
 800d3e2:	1a89      	subs	r1, r1, r2
 800d3e4:	e7d0      	b.n	800d388 <__ieee754_sqrtf+0x44>

0800d3e6 <abort>:
 800d3e6:	2006      	movs	r0, #6
 800d3e8:	b508      	push	{r3, lr}
 800d3ea:	f000 f85d 	bl	800d4a8 <raise>
 800d3ee:	2001      	movs	r0, #1
 800d3f0:	f7fb f8d1 	bl	8008596 <_exit>

0800d3f4 <__errno>:
 800d3f4:	4b01      	ldr	r3, [pc, #4]	; (800d3fc <__errno+0x8>)
 800d3f6:	6818      	ldr	r0, [r3, #0]
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	20000064 	.word	0x20000064

0800d400 <__libc_init_array>:
 800d400:	b570      	push	{r4, r5, r6, lr}
 800d402:	2600      	movs	r6, #0
 800d404:	4d0c      	ldr	r5, [pc, #48]	; (800d438 <__libc_init_array+0x38>)
 800d406:	4c0d      	ldr	r4, [pc, #52]	; (800d43c <__libc_init_array+0x3c>)
 800d408:	1b64      	subs	r4, r4, r5
 800d40a:	10a4      	asrs	r4, r4, #2
 800d40c:	42a6      	cmp	r6, r4
 800d40e:	d109      	bne.n	800d424 <__libc_init_array+0x24>
 800d410:	f000 f86e 	bl	800d4f0 <_init>
 800d414:	2600      	movs	r6, #0
 800d416:	4d0a      	ldr	r5, [pc, #40]	; (800d440 <__libc_init_array+0x40>)
 800d418:	4c0a      	ldr	r4, [pc, #40]	; (800d444 <__libc_init_array+0x44>)
 800d41a:	1b64      	subs	r4, r4, r5
 800d41c:	10a4      	asrs	r4, r4, #2
 800d41e:	42a6      	cmp	r6, r4
 800d420:	d105      	bne.n	800d42e <__libc_init_array+0x2e>
 800d422:	bd70      	pop	{r4, r5, r6, pc}
 800d424:	f855 3b04 	ldr.w	r3, [r5], #4
 800d428:	4798      	blx	r3
 800d42a:	3601      	adds	r6, #1
 800d42c:	e7ee      	b.n	800d40c <__libc_init_array+0xc>
 800d42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d432:	4798      	blx	r3
 800d434:	3601      	adds	r6, #1
 800d436:	e7f2      	b.n	800d41e <__libc_init_array+0x1e>
 800d438:	0802f540 	.word	0x0802f540
 800d43c:	0802f540 	.word	0x0802f540
 800d440:	0802f540 	.word	0x0802f540
 800d444:	0802f550 	.word	0x0802f550

0800d448 <memset>:
 800d448:	4603      	mov	r3, r0
 800d44a:	4402      	add	r2, r0
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d100      	bne.n	800d452 <memset+0xa>
 800d450:	4770      	bx	lr
 800d452:	f803 1b01 	strb.w	r1, [r3], #1
 800d456:	e7f9      	b.n	800d44c <memset+0x4>

0800d458 <_raise_r>:
 800d458:	291f      	cmp	r1, #31
 800d45a:	b538      	push	{r3, r4, r5, lr}
 800d45c:	4604      	mov	r4, r0
 800d45e:	460d      	mov	r5, r1
 800d460:	d904      	bls.n	800d46c <_raise_r+0x14>
 800d462:	2316      	movs	r3, #22
 800d464:	6003      	str	r3, [r0, #0]
 800d466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d46a:	bd38      	pop	{r3, r4, r5, pc}
 800d46c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d46e:	b112      	cbz	r2, 800d476 <_raise_r+0x1e>
 800d470:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d474:	b94b      	cbnz	r3, 800d48a <_raise_r+0x32>
 800d476:	4620      	mov	r0, r4
 800d478:	f000 f830 	bl	800d4dc <_getpid_r>
 800d47c:	462a      	mov	r2, r5
 800d47e:	4601      	mov	r1, r0
 800d480:	4620      	mov	r0, r4
 800d482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d486:	f000 b817 	b.w	800d4b8 <_kill_r>
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d00a      	beq.n	800d4a4 <_raise_r+0x4c>
 800d48e:	1c59      	adds	r1, r3, #1
 800d490:	d103      	bne.n	800d49a <_raise_r+0x42>
 800d492:	2316      	movs	r3, #22
 800d494:	6003      	str	r3, [r0, #0]
 800d496:	2001      	movs	r0, #1
 800d498:	e7e7      	b.n	800d46a <_raise_r+0x12>
 800d49a:	2400      	movs	r4, #0
 800d49c:	4628      	mov	r0, r5
 800d49e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4a2:	4798      	blx	r3
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	e7e0      	b.n	800d46a <_raise_r+0x12>

0800d4a8 <raise>:
 800d4a8:	4b02      	ldr	r3, [pc, #8]	; (800d4b4 <raise+0xc>)
 800d4aa:	4601      	mov	r1, r0
 800d4ac:	6818      	ldr	r0, [r3, #0]
 800d4ae:	f7ff bfd3 	b.w	800d458 <_raise_r>
 800d4b2:	bf00      	nop
 800d4b4:	20000064 	.word	0x20000064

0800d4b8 <_kill_r>:
 800d4b8:	b538      	push	{r3, r4, r5, lr}
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	4d06      	ldr	r5, [pc, #24]	; (800d4d8 <_kill_r+0x20>)
 800d4be:	4604      	mov	r4, r0
 800d4c0:	4608      	mov	r0, r1
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	602b      	str	r3, [r5, #0]
 800d4c6:	f7fb f856 	bl	8008576 <_kill>
 800d4ca:	1c43      	adds	r3, r0, #1
 800d4cc:	d102      	bne.n	800d4d4 <_kill_r+0x1c>
 800d4ce:	682b      	ldr	r3, [r5, #0]
 800d4d0:	b103      	cbz	r3, 800d4d4 <_kill_r+0x1c>
 800d4d2:	6023      	str	r3, [r4, #0]
 800d4d4:	bd38      	pop	{r3, r4, r5, pc}
 800d4d6:	bf00      	nop
 800d4d8:	2000de30 	.word	0x2000de30

0800d4dc <_getpid_r>:
 800d4dc:	f7fb b844 	b.w	8008568 <_getpid>

0800d4e0 <strcpy>:
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4e6:	f803 2b01 	strb.w	r2, [r3], #1
 800d4ea:	2a00      	cmp	r2, #0
 800d4ec:	d1f9      	bne.n	800d4e2 <strcpy+0x2>
 800d4ee:	4770      	bx	lr

0800d4f0 <_init>:
 800d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f2:	bf00      	nop
 800d4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4f6:	bc08      	pop	{r3}
 800d4f8:	469e      	mov	lr, r3
 800d4fa:	4770      	bx	lr

0800d4fc <_fini>:
 800d4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fe:	bf00      	nop
 800d500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d502:	bc08      	pop	{r3}
 800d504:	469e      	mov	lr, r3
 800d506:	4770      	bx	lr
