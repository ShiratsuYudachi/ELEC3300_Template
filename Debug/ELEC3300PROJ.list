
ELEC3300PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c10  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  08006df4  08006df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800748c  0800748c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800748c  0800748c  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800748c  0800748c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08007494  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000070c  200000a4  08007538  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  08007538  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a98  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039cb  00000000  00000000  00031b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00035530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00036648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007bc8  00000000  00000000  000375b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b7b  00000000  00000000  0003f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895a4  00000000  00000000  00056cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0297  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f4  00000000  00000000  000e02e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000a4 	.word	0x200000a4
 8000200:	00000000 	.word	0x00000000
 8000204:	08006ddc 	.word	0x08006ddc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000a8 	.word	0x200000a8
 8000220:	08006ddc 	.word	0x08006ddc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	; 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_dmul>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ba:	bf1d      	ittte	ne
 80005bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c0:	ea94 0f0c 	teqne	r4, ip
 80005c4:	ea95 0f0c 	teqne	r5, ip
 80005c8:	f000 f8de 	bleq	8000788 <__aeabi_dmul+0x1dc>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea81 0603 	eor.w	r6, r1, r3
 80005d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005de:	bf18      	it	ne
 80005e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ec:	d038      	beq.n	8000660 <__aeabi_dmul+0xb4>
 80005ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000602:	f04f 0600 	mov.w	r6, #0
 8000606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060a:	f09c 0f00 	teq	ip, #0
 800060e:	bf18      	it	ne
 8000610:	f04e 0e01 	orrne.w	lr, lr, #1
 8000614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800061c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000620:	d204      	bcs.n	800062c <__aeabi_dmul+0x80>
 8000622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000626:	416d      	adcs	r5, r5
 8000628:	eb46 0606 	adc.w	r6, r6, r6
 800062c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800063c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000644:	bf88      	it	hi
 8000646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064a:	d81e      	bhi.n	800068a <__aeabi_dmul+0xde>
 800064c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000664:	ea46 0101 	orr.w	r1, r6, r1
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	ea81 0103 	eor.w	r1, r1, r3
 8000670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000674:	bfc2      	ittt	gt
 8000676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067e:	bd70      	popgt	{r4, r5, r6, pc}
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f04f 0e00 	mov.w	lr, #0
 8000688:	3c01      	subs	r4, #1
 800068a:	f300 80ab 	bgt.w	80007e4 <__aeabi_dmul+0x238>
 800068e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000692:	bfde      	ittt	le
 8000694:	2000      	movle	r0, #0
 8000696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069a:	bd70      	pople	{r4, r5, r6, pc}
 800069c:	f1c4 0400 	rsb	r4, r4, #0
 80006a0:	3c20      	subs	r4, #32
 80006a2:	da35      	bge.n	8000710 <__aeabi_dmul+0x164>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc1b      	bgt.n	80006e0 <__aeabi_dmul+0x134>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f305 	lsl.w	r3, r0, r5
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	fa21 f604 	lsr.w	r6, r1, r4
 80006d0:	eb42 0106 	adc.w	r1, r2, r6
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 040c 	rsb	r4, r4, #12
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ec:	fa20 f005 	lsr.w	r0, r0, r5
 80006f0:	fa01 f204 	lsl.w	r2, r1, r4
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	f141 0100 	adc.w	r1, r1, #0
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f205 	lsl.w	r2, r0, r5
 8000718:	ea4e 0e02 	orr.w	lr, lr, r2
 800071c:	fa20 f304 	lsr.w	r3, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea43 0302 	orr.w	r3, r3, r2
 8000728:	fa21 f004 	lsr.w	r0, r1, r4
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	fa21 f204 	lsr.w	r2, r1, r4
 8000734:	ea20 0002 	bic.w	r0, r0, r2
 8000738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f094 0f00 	teq	r4, #0
 800074c:	d10f      	bne.n	800076e <__aeabi_dmul+0x1c2>
 800074e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000752:	0040      	lsls	r0, r0, #1
 8000754:	eb41 0101 	adc.w	r1, r1, r1
 8000758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3c01      	subeq	r4, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1a6>
 8000762:	ea41 0106 	orr.w	r1, r1, r6
 8000766:	f095 0f00 	teq	r5, #0
 800076a:	bf18      	it	ne
 800076c:	4770      	bxne	lr
 800076e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	eb43 0303 	adc.w	r3, r3, r3
 8000778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3d01      	subeq	r5, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1c6>
 8000782:	ea43 0306 	orr.w	r3, r3, r6
 8000786:	4770      	bx	lr
 8000788:	ea94 0f0c 	teq	r4, ip
 800078c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000790:	bf18      	it	ne
 8000792:	ea95 0f0c 	teqne	r5, ip
 8000796:	d00c      	beq.n	80007b2 <__aeabi_dmul+0x206>
 8000798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079c:	bf18      	it	ne
 800079e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a2:	d1d1      	bne.n	8000748 <__aeabi_dmul+0x19c>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b6:	bf06      	itte	eq
 80007b8:	4610      	moveq	r0, r2
 80007ba:	4619      	moveq	r1, r3
 80007bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c0:	d019      	beq.n	80007f6 <__aeabi_dmul+0x24a>
 80007c2:	ea94 0f0c 	teq	r4, ip
 80007c6:	d102      	bne.n	80007ce <__aeabi_dmul+0x222>
 80007c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007cc:	d113      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007ce:	ea95 0f0c 	teq	r5, ip
 80007d2:	d105      	bne.n	80007e0 <__aeabi_dmul+0x234>
 80007d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d8:	bf1c      	itt	ne
 80007da:	4610      	movne	r0, r2
 80007dc:	4619      	movne	r1, r3
 80007de:	d10a      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fe:	bd70      	pop	{r4, r5, r6, pc}

08000800 <__aeabi_ddiv>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080e:	bf1d      	ittte	ne
 8000810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000814:	ea94 0f0c 	teqne	r4, ip
 8000818:	ea95 0f0c 	teqne	r5, ip
 800081c:	f000 f8a7 	bleq	800096e <__aeabi_ddiv+0x16e>
 8000820:	eba4 0405 	sub.w	r4, r4, r5
 8000824:	ea81 0e03 	eor.w	lr, r1, r3
 8000828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800082c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000830:	f000 8088 	beq.w	8000944 <__aeabi_ddiv+0x144>
 8000834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800083c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800084c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000858:	429d      	cmp	r5, r3
 800085a:	bf08      	it	eq
 800085c:	4296      	cmpeq	r6, r2
 800085e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000866:	d202      	bcs.n	800086e <__aeabi_ddiv+0x6e>
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	1ab6      	subs	r6, r6, r2
 8000870:	eb65 0503 	sbc.w	r5, r5, r3
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 000c 	orrcs.w	r0, r0, ip
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e0:	d018      	beq.n	8000914 <__aeabi_ddiv+0x114>
 80008e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fe:	d1c0      	bne.n	8000882 <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	d10b      	bne.n	800091e <__aeabi_ddiv+0x11e>
 8000906:	ea41 0100 	orr.w	r1, r1, r0
 800090a:	f04f 0000 	mov.w	r0, #0
 800090e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000912:	e7b6      	b.n	8000882 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	bf04      	itt	eq
 800091a:	4301      	orreq	r1, r0
 800091c:	2000      	moveq	r0, #0
 800091e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000922:	bf88      	it	hi
 8000924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000928:	f63f aeaf 	bhi.w	800068a <__aeabi_dmul+0xde>
 800092c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000930:	bf04      	itt	eq
 8000932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093a:	f150 0000 	adcs.w	r0, r0, #0
 800093e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800094c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	e690      	b.n	800068a <__aeabi_dmul+0xde>
 8000968:	ea45 0e06 	orr.w	lr, r5, r6
 800096c:	e68d      	b.n	800068a <__aeabi_dmul+0xde>
 800096e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000972:	ea94 0f0c 	teq	r4, ip
 8000976:	bf08      	it	eq
 8000978:	ea95 0f0c 	teqeq	r5, ip
 800097c:	f43f af3b 	beq.w	80007f6 <__aeabi_dmul+0x24a>
 8000980:	ea94 0f0c 	teq	r4, ip
 8000984:	d10a      	bne.n	800099c <__aeabi_ddiv+0x19c>
 8000986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098a:	f47f af34 	bne.w	80007f6 <__aeabi_dmul+0x24a>
 800098e:	ea95 0f0c 	teq	r5, ip
 8000992:	f47f af25 	bne.w	80007e0 <__aeabi_dmul+0x234>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e72c      	b.n	80007f6 <__aeabi_dmul+0x24a>
 800099c:	ea95 0f0c 	teq	r5, ip
 80009a0:	d106      	bne.n	80009b0 <__aeabi_ddiv+0x1b0>
 80009a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a6:	f43f aefd 	beq.w	80007a4 <__aeabi_dmul+0x1f8>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e722      	b.n	80007f6 <__aeabi_dmul+0x24a>
 80009b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ba:	f47f aec5 	bne.w	8000748 <__aeabi_dmul+0x19c>
 80009be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c2:	f47f af0d 	bne.w	80007e0 <__aeabi_dmul+0x234>
 80009c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ca:	f47f aeeb 	bne.w	80007a4 <__aeabi_dmul+0x1f8>
 80009ce:	e712      	b.n	80007f6 <__aeabi_dmul+0x24a>

080009d0 <__gedf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d4:	e006      	b.n	80009e4 <__cmpdf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__ledf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpdf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpdf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fa:	d01b      	beq.n	8000a34 <__cmpdf2+0x54>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a02:	bf0c      	ite	eq
 8000a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a08:	ea91 0f03 	teqne	r1, r3
 8000a0c:	bf02      	ittt	eq
 8000a0e:	ea90 0f02 	teqeq	r0, r2
 8000a12:	2000      	moveq	r0, #0
 8000a14:	4770      	bxeq	lr
 8000a16:	f110 0f00 	cmn.w	r0, #0
 8000a1a:	ea91 0f03 	teq	r1, r3
 8000a1e:	bf58      	it	pl
 8000a20:	4299      	cmppl	r1, r3
 8000a22:	bf08      	it	eq
 8000a24:	4290      	cmpeq	r0, r2
 8000a26:	bf2c      	ite	cs
 8000a28:	17d8      	asrcs	r0, r3, #31
 8000a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2e:	f040 0001 	orr.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__cmpdf2+0x64>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d107      	bne.n	8000a54 <__cmpdf2+0x74>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d1d6      	bne.n	80009fc <__cmpdf2+0x1c>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d0d3      	beq.n	80009fc <__cmpdf2+0x1c>
 8000a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_cdrcmple>:
 8000a5c:	4684      	mov	ip, r0
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4662      	mov	r2, ip
 8000a62:	468c      	mov	ip, r1
 8000a64:	4619      	mov	r1, r3
 8000a66:	4663      	mov	r3, ip
 8000a68:	e000      	b.n	8000a6c <__aeabi_cdcmpeq>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdcmpeq>:
 8000a6c:	b501      	push	{r0, lr}
 8000a6e:	f7ff ffb7 	bl	80009e0 <__cmpdf2>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	bf48      	it	mi
 8000a76:	f110 0f00 	cmnmi.w	r0, #0
 8000a7a:	bd01      	pop	{r0, pc}

08000a7c <__aeabi_dcmpeq>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff fff4 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a84:	bf0c      	ite	eq
 8000a86:	2001      	moveq	r0, #1
 8000a88:	2000      	movne	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmplt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffea 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmple>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffe0 	bl	8000a6c <__aeabi_cdcmpeq>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpge>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffce 	bl	8000a5c <__aeabi_cdrcmple>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpgt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffc4 	bl	8000a5c <__aeabi_cdrcmple>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_ADC1_Init+0x74>)
 8000b32:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <MX_ADC1_Init+0x78>)
 8000b34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_ADC1_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_ADC1_Init+0x74>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_ADC1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_ADC1_Init+0x74>)
 8000b4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_ADC1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_ADC1_Init+0x74>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b5c:	480d      	ldr	r0, [pc, #52]	; (8000b94 <MX_ADC1_Init+0x74>)
 8000b5e:	f002 fbed 	bl	800333c <HAL_ADC_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b68:	f000 ff80 	bl	8001a6c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000b74:	2305      	movs	r3, #5
 8000b76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_ADC1_Init+0x74>)
 8000b7e:	f002 fcc7 	bl	8003510 <HAL_ADC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b88:	f000 ff70 	bl	8001a6c <Error_Handler>
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000c0 	.word	0x200000c0
 8000b98:	40012400 	.word	0x40012400

08000b9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <HAL_ADC_MspInit+0x6c>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d121      	bne.n	8000c00 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HAL_ADC_MspInit+0x70>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <HAL_ADC_MspInit+0x70>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_ADC_MspInit+0x70>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <HAL_ADC_MspInit+0x70>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a0c      	ldr	r2, [pc, #48]	; (8000c0c <HAL_ADC_MspInit+0x70>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_ADC_MspInit+0x70>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0310 	and.w	r3, r3, #16
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bec:	2304      	movs	r3, #4
 8000bee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <HAL_ADC_MspInit+0x74>)
 8000bfc:	f002 ffcc 	bl	8003b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c00:	bf00      	nop
 8000c02:	3720      	adds	r7, #32
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40012400 	.word	0x40012400
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40011000 	.word	0x40011000

08000c14 <DEBUG_USART_Config>:
//WifiUart
UART_HandleTypeDef WifiUartHandle;

//配置与硬件底层无关内容：如串口协议，其中包括波特率，奇偶校验，停止位
void DEBUG_USART_Config()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
    DebugUartHandle.Instance = DEBUG_USART;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <DEBUG_USART_Config+0x4c>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <DEBUG_USART_Config+0x50>)
 8000c1c:	601a      	str	r2, [r3, #0]

    //波特率，8位字长，1停止位，无奇偶校验，无硬件控制，收发模式
    DebugUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <DEBUG_USART_Config+0x4c>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
    DebugUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <DEBUG_USART_Config+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
    DebugUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <DEBUG_USART_Config+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
    DebugUartHandle.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <DEBUG_USART_Config+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
    DebugUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <DEBUG_USART_Config+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
    DebugUartHandle.Init.Mode = UART_MODE_TX_RX;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <DEBUG_USART_Config+0x4c>)
 8000c40:	220c      	movs	r2, #12
 8000c42:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&DebugUartHandle);
 8000c44:	4806      	ldr	r0, [pc, #24]	; (8000c60 <DEBUG_USART_Config+0x4c>)
 8000c46:	f004 fe0e 	bl	8005866 <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&DebugUartHandle,UART_IT_RXNE);
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <DEBUG_USART_Config+0x4c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <DEBUG_USART_Config+0x4c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f042 0220 	orr.w	r2, r2, #32
 8000c58:	60da      	str	r2, [r3, #12]
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000f0 	.word	0x200000f0
 8000c64:	40013800 	.word	0x40013800

08000c68 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	615a      	str	r2, [r3, #20]
 8000c7e:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c80:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000c82:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000c86:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000c8a:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <MX_FSMC_Init+0xc0>)
 8000c8c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000ca2:	2210      	movs	r2, #16
 8000ca4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000cc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000cde:	230f      	movs	r3, #15
 8000ce0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000ce6:	23ff      	movs	r3, #255	; 0xff
 8000ce8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000cea:	230f      	movs	r3, #15
 8000cec:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000cee:	2310      	movs	r3, #16
 8000cf0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000cf2:	2311      	movs	r3, #17
 8000cf4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <MX_FSMC_Init+0xbc>)
 8000d02:	f003 fe09 	bl	8004918 <HAL_SRAM_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000d0c:	f000 feae 	bl	8001a6c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_FSMC_Init+0xc4>)
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <MX_FSMC_Init+0xc4>)
 8000d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1a:	61d3      	str	r3, [r2, #28]

}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000170 	.word	0x20000170
 8000d28:	a0000104 	.word	0xa0000104
 8000d2c:	40010000 	.word	0x40010000

08000d30 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_FSMC_MspInit+0x78>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d129      	bne.n	8000da0 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_FSMC_MspInit+0x78>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_FSMC_MspInit+0x7c>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <HAL_FSMC_MspInit+0x7c>)
 8000d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5c:	6153      	str	r3, [r2, #20]
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_FSMC_MspInit+0x7c>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d6a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000d6e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480c      	ldr	r0, [pc, #48]	; (8000db0 <HAL_FSMC_MspInit+0x80>)
 8000d80:	f002 ff0a 	bl	8003b98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d84:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000d88:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	4619      	mov	r1, r3
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <HAL_FSMC_MspInit+0x84>)
 8000d9a:	f002 fefd 	bl	8003b98 <HAL_GPIO_Init>
 8000d9e:	e000      	b.n	8000da2 <HAL_FSMC_MspInit+0x72>
    return;
 8000da0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200001b4 	.word	0x200001b4
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40011800 	.word	0x40011800
 8000db4:	40011400 	.word	0x40011400

08000db8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000dc0:	f7ff ffb6 	bl	8000d30 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de0:	4b6f      	ldr	r3, [pc, #444]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a6e      	ldr	r2, [pc, #440]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b6c      	ldr	r3, [pc, #432]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df8:	4b69      	ldr	r3, [pc, #420]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a68      	ldr	r2, [pc, #416]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b66      	ldr	r3, [pc, #408]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b63      	ldr	r3, [pc, #396]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a62      	ldr	r2, [pc, #392]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b60      	ldr	r3, [pc, #384]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	4b5d      	ldr	r3, [pc, #372]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a5c      	ldr	r2, [pc, #368]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b5a      	ldr	r3, [pc, #360]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e40:	4b57      	ldr	r3, [pc, #348]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a56      	ldr	r2, [pc, #344]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000e46:	f043 0320 	orr.w	r3, r3, #32
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0320 	and.w	r3, r3, #32
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2107      	movs	r1, #7
 8000e5c:	4851      	ldr	r0, [pc, #324]	; (8000fa4 <MX_GPIO_Init+0x1d8>)
 8000e5e:	f003 f84a 	bl	8003ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2140      	movs	r1, #64	; 0x40
 8000e66:	484f      	ldr	r0, [pc, #316]	; (8000fa4 <MX_GPIO_Init+0x1d8>)
 8000e68:	f003 f845 	bl	8003ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2123      	movs	r1, #35	; 0x23
 8000e70:	484d      	ldr	r0, [pc, #308]	; (8000fa8 <MX_GPIO_Init+0x1dc>)
 8000e72:	f003 f840 	bl	8003ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000e7c:	484b      	ldr	r0, [pc, #300]	; (8000fac <MX_GPIO_Init+0x1e0>)
 8000e7e:	f003 f83a 	bl	8003ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000e88:	4847      	ldr	r0, [pc, #284]	; (8000fa8 <MX_GPIO_Init+0x1dc>)
 8000e8a:	f003 f834 	bl	8003ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PEPin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8000e8e:	2347      	movs	r3, #71	; 0x47
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	483f      	ldr	r0, [pc, #252]	; (8000fa4 <MX_GPIO_Init+0x1d8>)
 8000ea6:	f002 fe77 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eaa:	2308      	movs	r3, #8
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4839      	ldr	r0, [pc, #228]	; (8000fa4 <MX_GPIO_Init+0x1d8>)
 8000ebe:	f002 fe6b 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec6:	4b3a      	ldr	r3, [pc, #232]	; (8000fb0 <MX_GPIO_Init+0x1e4>)
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4833      	ldr	r0, [pc, #204]	; (8000fa4 <MX_GPIO_Init+0x1d8>)
 8000ed6:	f002 fe5f 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K2_Pin;
 8000eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee0:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <MX_GPIO_Init+0x1e8>)
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	4619      	mov	r1, r3
 8000eee:	4832      	ldr	r0, [pc, #200]	; (8000fb8 <MX_GPIO_Init+0x1ec>)
 8000ef0:	f002 fe52 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef8:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <MX_GPIO_Init+0x1e8>)
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0318 	add.w	r3, r7, #24
 8000f04:	4619      	mov	r1, r3
 8000f06:	482d      	ldr	r0, [pc, #180]	; (8000fbc <MX_GPIO_Init+0x1f0>)
 8000f08:	f002 fe46 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8;
 8000f0c:	f240 1323 	movw	r3, #291	; 0x123
 8000f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 0318 	add.w	r3, r7, #24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4820      	ldr	r0, [pc, #128]	; (8000fa8 <MX_GPIO_Init+0x1dc>)
 8000f26:	f002 fe37 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	4619      	mov	r1, r3
 8000f42:	481a      	ldr	r0, [pc, #104]	; (8000fac <MX_GPIO_Init+0x1e0>)
 8000f44:	f002 fe28 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2302      	movs	r3, #2
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0318 	add.w	r3, r7, #24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <MX_GPIO_Init+0x1dc>)
 8000f62:	f002 fe19 	bl	8003b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2006      	movs	r0, #6
 8000f6c:	f002 fcd5 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f70:	2006      	movs	r0, #6
 8000f72:	f002 fcee 	bl	8003952 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	200a      	movs	r0, #10
 8000f7c:	f002 fccd 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f002 fce6 	bl	8003952 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2028      	movs	r0, #40	; 0x28
 8000f8c:	f002 fcc5 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f90:	2028      	movs	r0, #40	; 0x28
 8000f92:	f002 fcde 	bl	8003952 <HAL_NVIC_EnableIRQ>

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40011800 	.word	0x40011800
 8000fa8:	40010c00 	.word	0x40010c00
 8000fac:	40011400 	.word	0x40011400
 8000fb0:	10210000 	.word	0x10210000
 8000fb4:	10110000 	.word	0x10110000
 8000fb8:	40011000 	.word	0x40011000
 8000fbc:	40010800 	.word	0x40010800

08000fc0 <_ZN8SERVO42C6getCHKEPhh>:
    uint32_t encoderCarry = 0;
    
    uint8_t stepSpeed = 3;
    

    static uint8_t getCHK(uint8_t instruction[], uint8_t len){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
        uint16_t result = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	da0b      	bge.n	8000ff4 <_ZN8SERVO42C6getCHKEPhh+0x34>
            result+=instruction[i];
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	4413      	add	r3, r2
 8000fea:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i<len; i++){
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	e7ef      	b.n	8000fd4 <_ZN8SERVO42C6getCHKEPhh+0x14>
        }
        return result & 0xFF;
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	b2db      	uxtb	r3, r3
    }
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>:

public:
    SERVO42C(uint8_t address, UART_HandleTypeDef* pUART) : address(address), pUART(pUART){}
 8001002:	b480      	push	{r7}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	460b      	mov	r3, r1
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	72fb      	strb	r3, [r7, #11]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	7afa      	ldrb	r2, [r7, #11]
 800101a:	711a      	strb	r2, [r3, #4]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	80da      	strh	r2, [r3, #6]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2203      	movs	r2, #3
 800102c:	731a      	strb	r2, [r3, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <_ZN8SERVO42C4stepEhhm>:

    // direction : 1 or 0
    // speed: 0~7
    // stepCount: each stepCount/stepDivision for 1.8 deg, currently stepDivision=1
    void step(uint8_t direction, uint8_t speed, uint32_t stepCount){
 800103a:	b580      	push	{r7, lr}
 800103c:	b088      	sub	sp, #32
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	72fb      	strb	r3, [r7, #11]
 8001048:	4613      	mov	r3, r2
 800104a:	72bb      	strb	r3, [r7, #10]
        uint8_t instruction[8] = {};
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
        instruction[0] = address;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	791b      	ldrb	r3, [r3, #4]
 8001058:	753b      	strb	r3, [r7, #20]
        instruction[1] = 0xfd;
 800105a:	23fd      	movs	r3, #253	; 0xfd
 800105c:	757b      	strb	r3, [r7, #21]
        instruction[2] = (direction<<7)|(speed & 0x7F);
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	01db      	lsls	r3, r3, #7
 8001062:	b25a      	sxtb	r2, r3
 8001064:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b25b      	sxtb	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	75bb      	strb	r3, [r7, #22]
        for (int i=0; i<4; i++){
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	2b03      	cmp	r3, #3
 800107e:	dc16      	bgt.n	80010ae <_ZN8SERVO42C4stepEhhm+0x74>
            instruction[6-i] = (stepCount & (0xFF << 8*i))>>8*i;
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	22ff      	movs	r2, #255	; 0xff
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	401a      	ands	r2, r3
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	40da      	lsrs	r2, r3
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f1c3 0306 	rsb	r3, r3, #6
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	3320      	adds	r3, #32
 80010a0:	443b      	add	r3, r7
 80010a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i=0; i<4; i++){
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	e7e5      	b.n	800107a <_ZN8SERVO42C4stepEhhm+0x40>
        }
        instruction[7] = getCHK(instruction, 8);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2108      	movs	r1, #8
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff83 	bl	8000fc0 <_ZN8SERVO42C6getCHKEPhh>
 80010ba:	4603      	mov	r3, r0
 80010bc:	76fb      	strb	r3, [r7, #27]
        HAL_UART_Transmit(pUART, instruction, 8, 100);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f107 0114 	add.w	r1, r7, #20
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	2208      	movs	r2, #8
 80010ca:	f004 fc19 	bl	8005900 <HAL_UART_Transmit>
    }
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_ZN8SERVO42C13stepClockwiseEh>:
    void stepClockwise(uint8_t stepCount){
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	70fb      	strb	r3, [r7, #3]
        step(0, stepSpeed, stepCount);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7b1a      	ldrb	r2, [r3, #12]
 80010e6:	78fb      	ldrb	r3, [r7, #3]
 80010e8:	2100      	movs	r1, #0
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffa5 	bl	800103a <_ZN8SERVO42C4stepEhhm>
    }
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZN8SERVO42C20stepCounterClockwiseEh>:
    void stepCounterClockwise(uint8_t stepCount){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
        step(1, stepSpeed, stepCount);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7b1a      	ldrb	r2, [r3, #12]
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	2101      	movs	r1, #1
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff94 	bl	800103a <_ZN8SERVO42C4stepEhhm>
    }
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <myfunc>:
#include "interface.hpp"
#include "usart.h"

#include <stdio.h>

void myfunc(){
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
  SERVO42C servo(0xe0, &huart2);
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4a24      	ldr	r2, [pc, #144]	; (80011b8 <myfunc+0x9c>)
 8001128:	21e0      	movs	r1, #224	; 0xe0
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff69 	bl	8001002 <_ZN8SERVO42CC1EhP18UART_HandleTypeDef>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8001130:	2101      	movs	r1, #1
 8001132:	4822      	ldr	r0, [pc, #136]	; (80011bc <myfunc+0xa0>)
 8001134:	f002 fec8 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	2b01      	cmp	r3, #1
 800113c:	bf0c      	ite	eq
 800113e:	2301      	moveq	r3, #1
 8001140:	2300      	movne	r3, #0
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <myfunc+0x38>
      servo.stepCounterClockwise(10);
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	210a      	movs	r1, #10
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ffd2 	bl	80010f8 <_ZN8SERVO42C20stepCounterClockwiseEh>
    }
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001158:	4819      	ldr	r0, [pc, #100]	; (80011c0 <myfunc+0xa4>)
 800115a:	f002 feb5 	bl	8003ec8 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b01      	cmp	r3, #1
 8001162:	bf0c      	ite	eq
 8001164:	2301      	moveq	r3, #1
 8001166:	2300      	movne	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <myfunc+0x5e>
      servo.stepClockwise(10);
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	210a      	movs	r1, #10
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ffae 	bl	80010d6 <_ZN8SERVO42C13stepClockwiseEh>
    }


    uint8_t data[3] = {};
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <myfunc+0xa8>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	713b      	strb	r3, [r7, #4]
 8001180:	1d7b      	adds	r3, r7, #5
 8001182:	2200      	movs	r2, #0
 8001184:	801a      	strh	r2, [r3, #0]
    HAL_UART_Receive(&huart2, data, 3, 500) == HAL_OK;
 8001186:	1d39      	adds	r1, r7, #4
 8001188:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800118c:	2203      	movs	r2, #3
 800118e:	480a      	ldr	r0, [pc, #40]	; (80011b8 <myfunc+0x9c>)
 8001190:	f004 fc4f 	bl	8005a32 <HAL_UART_Receive>
    char str[3] = {};
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <myfunc+0xa8>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	703b      	strb	r3, [r7, #0]
 800119a:	1c7b      	adds	r3, r7, #1
 800119c:	2200      	movs	r2, #0
 800119e:	801a      	strh	r2, [r3, #0]
    sprintf(str, "%02X", data[0]);
 80011a0:	793b      	ldrb	r3, [r7, #4]
 80011a2:	461a      	mov	r2, r3
 80011a4:	463b      	mov	r3, r7
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <myfunc+0xac>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f005 f99d 	bl	80064e8 <siprintf>
    
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); 
    HAL_Delay(100);
 80011ae:	2064      	movs	r0, #100	; 0x64
 80011b0:	f002 f8a0 	bl	80032f4 <HAL_Delay>
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); 
    // HAL_Delay(500);
  }
 80011b4:	e7bc      	b.n	8001130 <myfunc+0x14>
 80011b6:	bf00      	nop
 80011b8:	20000718 	.word	0x20000718
 80011bc:	40010800 	.word	0x40010800
 80011c0:	40011000 	.word	0x40011000
 80011c4:	08006dfc 	.word	0x08006dfc
 80011c8:	08006df4 	.word	0x08006df4

080011cc <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	e002      	b.n	80011dc <Delay+0x10>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3b01      	subs	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f9      	bne.n	80011d6 <Delay+0xa>
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 f826 	bl	8001244 <LCD_BackLed_Control>
	LCD_Rst();
 80011f8:	f000 f80c 	bl	8001214 <LCD_Rst>
	LCD_REG_Config();
 80011fc:	f000 f85c 	bl	80012b8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 8001200:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001204:	22f0      	movs	r2, #240	; 0xf0
 8001206:	2100      	movs	r1, #0
 8001208:	2000      	movs	r0, #0
 800120a:	f000 f9e7 	bl	80015dc <LCD_Clear>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2102      	movs	r1, #2
 800121c:	4807      	ldr	r0, [pc, #28]	; (800123c <LCD_Rst+0x28>)
 800121e:	f002 fe6a 	bl	8003ef6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <LCD_Rst+0x2c>)
 8001224:	f7ff ffd2 	bl	80011cc <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2102      	movs	r1, #2
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <LCD_Rst+0x28>)
 800122e:	f002 fe62 	bl	8003ef6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <LCD_Rst+0x2c>)
 8001234:	f7ff ffca 	bl	80011cc <Delay>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40011800 	.word	0x40011800
 8001240:	0002bffc 	.word	0x0002bffc

08001244 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <LCD_BackLed_Control+0x34>)
 800125c:	f002 fe4b 	bl	8003ef6 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001260:	e005      	b.n	800126e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001268:	4803      	ldr	r0, [pc, #12]	; (8001278 <LCD_BackLed_Control+0x34>)
 800126a:	f002 fe44 	bl	8003ef6 <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40011400 	.word	0x40011400

0800127c <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001286:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	8013      	strh	r3, [r2, #0]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <LCD_Write_Data+0x1c>)
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	8013      	strh	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	60020000 	.word	0x60020000

080012b8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80012bc:	20cf      	movs	r0, #207	; 0xcf
 80012be:	f7ff ffdd 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff ffe8 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80012c8:	2081      	movs	r0, #129	; 0x81
 80012ca:	f7ff ffe5 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80012ce:	2030      	movs	r0, #48	; 0x30
 80012d0:	f7ff ffe2 	bl	8001298 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80012d4:	20ed      	movs	r0, #237	; 0xed
 80012d6:	f7ff ffd1 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80012da:	2064      	movs	r0, #100	; 0x64
 80012dc:	f7ff ffdc 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80012e0:	2003      	movs	r0, #3
 80012e2:	f7ff ffd9 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80012e6:	2012      	movs	r0, #18
 80012e8:	f7ff ffd6 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80012ec:	2081      	movs	r0, #129	; 0x81
 80012ee:	f7ff ffd3 	bl	8001298 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80012f2:	20e8      	movs	r0, #232	; 0xe8
 80012f4:	f7ff ffc2 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80012f8:	2085      	movs	r0, #133	; 0x85
 80012fa:	f7ff ffcd 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80012fe:	2010      	movs	r0, #16
 8001300:	f7ff ffca 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001304:	2078      	movs	r0, #120	; 0x78
 8001306:	f7ff ffc7 	bl	8001298 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800130a:	20cb      	movs	r0, #203	; 0xcb
 800130c:	f7ff ffb6 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001310:	2039      	movs	r0, #57	; 0x39
 8001312:	f7ff ffc1 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001316:	202c      	movs	r0, #44	; 0x2c
 8001318:	f7ff ffbe 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ffbb 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001322:	2034      	movs	r0, #52	; 0x34
 8001324:	f7ff ffb8 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001328:	2002      	movs	r0, #2
 800132a:	f7ff ffb5 	bl	8001298 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800132e:	20f7      	movs	r0, #247	; 0xf7
 8001330:	f7ff ffa4 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001334:	2020      	movs	r0, #32
 8001336:	f7ff ffaf 	bl	8001298 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800133a:	20ea      	movs	r0, #234	; 0xea
 800133c:	f7ff ff9e 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff ffa9 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff ffa6 	bl	8001298 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 800134c:	20b1      	movs	r0, #177	; 0xb1
 800134e:	f7ff ff95 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff ffa0 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001358:	201b      	movs	r0, #27
 800135a:	f7ff ff9d 	bl	8001298 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800135e:	20b6      	movs	r0, #182	; 0xb6
 8001360:	f7ff ff8c 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001364:	200a      	movs	r0, #10
 8001366:	f7ff ff97 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800136a:	20a2      	movs	r0, #162	; 0xa2
 800136c:	f7ff ff94 	bl	8001298 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001370:	20c0      	movs	r0, #192	; 0xc0
 8001372:	f7ff ff83 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001376:	2035      	movs	r0, #53	; 0x35
 8001378:	f7ff ff8e 	bl	8001298 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 800137c:	20c1      	movs	r0, #193	; 0xc1
 800137e:	f7ff ff7d 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001382:	2011      	movs	r0, #17
 8001384:	f7ff ff88 	bl	8001298 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001388:	20c5      	movs	r0, #197	; 0xc5
 800138a:	f7ff ff77 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800138e:	2045      	movs	r0, #69	; 0x45
 8001390:	f7ff ff82 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001394:	2045      	movs	r0, #69	; 0x45
 8001396:	f7ff ff7f 	bl	8001298 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800139a:	20c7      	movs	r0, #199	; 0xc7
 800139c:	f7ff ff6e 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80013a0:	20a2      	movs	r0, #162	; 0xa2
 80013a2:	f7ff ff79 	bl	8001298 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80013a6:	20f2      	movs	r0, #242	; 0xf2
 80013a8:	f7ff ff68 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff ff73 	bl	8001298 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80013b2:	2026      	movs	r0, #38	; 0x26
 80013b4:	f7ff ff62 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff ff6d 	bl	8001298 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80013be:	20e0      	movs	r0, #224	; 0xe0
 80013c0:	f7ff ff5c 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80013c4:	200f      	movs	r0, #15
 80013c6:	f7ff ff67 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80013ca:	2026      	movs	r0, #38	; 0x26
 80013cc:	f7ff ff64 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80013d0:	2024      	movs	r0, #36	; 0x24
 80013d2:	f7ff ff61 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80013d6:	200b      	movs	r0, #11
 80013d8:	f7ff ff5e 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80013dc:	200e      	movs	r0, #14
 80013de:	f7ff ff5b 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80013e2:	2009      	movs	r0, #9
 80013e4:	f7ff ff58 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80013e8:	2054      	movs	r0, #84	; 0x54
 80013ea:	f7ff ff55 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80013ee:	20a8      	movs	r0, #168	; 0xa8
 80013f0:	f7ff ff52 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80013f4:	2046      	movs	r0, #70	; 0x46
 80013f6:	f7ff ff4f 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80013fa:	200c      	movs	r0, #12
 80013fc:	f7ff ff4c 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001400:	2017      	movs	r0, #23
 8001402:	f7ff ff49 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001406:	2009      	movs	r0, #9
 8001408:	f7ff ff46 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800140c:	200f      	movs	r0, #15
 800140e:	f7ff ff43 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001412:	2007      	movs	r0, #7
 8001414:	f7ff ff40 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff ff3d 	bl	8001298 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800141e:	20e1      	movs	r0, #225	; 0xe1
 8001420:	f7ff ff2c 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff ff37 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800142a:	2019      	movs	r0, #25
 800142c:	f7ff ff34 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001430:	201b      	movs	r0, #27
 8001432:	f7ff ff31 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001436:	2004      	movs	r0, #4
 8001438:	f7ff ff2e 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800143c:	2010      	movs	r0, #16
 800143e:	f7ff ff2b 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001442:	2007      	movs	r0, #7
 8001444:	f7ff ff28 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001448:	202a      	movs	r0, #42	; 0x2a
 800144a:	f7ff ff25 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800144e:	2047      	movs	r0, #71	; 0x47
 8001450:	f7ff ff22 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001454:	2039      	movs	r0, #57	; 0x39
 8001456:	f7ff ff1f 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800145a:	2003      	movs	r0, #3
 800145c:	f7ff ff1c 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001460:	2006      	movs	r0, #6
 8001462:	f7ff ff19 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001466:	2006      	movs	r0, #6
 8001468:	f7ff ff16 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 800146c:	2030      	movs	r0, #48	; 0x30
 800146e:	f7ff ff13 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001472:	2038      	movs	r0, #56	; 0x38
 8001474:	f7ff ff10 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001478:	200f      	movs	r0, #15
 800147a:	f7ff ff0d 	bl	8001298 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800147e:	2036      	movs	r0, #54	; 0x36
 8001480:	f7ff fefc 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001484:	20c8      	movs	r0, #200	; 0xc8
 8001486:	f7ff ff07 	bl	8001298 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800148a:	202a      	movs	r0, #42	; 0x2a
 800148c:	f7ff fef6 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff ff01 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff fefe 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff fefb 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80014a2:	20ef      	movs	r0, #239	; 0xef
 80014a4:	f7ff fef8 	bl	8001298 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80014a8:	202b      	movs	r0, #43	; 0x2b
 80014aa:	f7ff fee7 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff fef2 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff feef 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff feec 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80014c0:	203f      	movs	r0, #63	; 0x3f
 80014c2:	f7ff fee9 	bl	8001298 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80014c6:	203a      	movs	r0, #58	; 0x3a
 80014c8:	f7ff fed8 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80014cc:	2055      	movs	r0, #85	; 0x55
 80014ce:	f7ff fee3 	bl	8001298 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80014d2:	2011      	movs	r0, #17
 80014d4:	f7ff fed2 	bl	800127c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <LCD_REG_Config+0x230>)
 80014da:	f7ff fe77 	bl	80011cc <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80014de:	2029      	movs	r0, #41	; 0x29
 80014e0:	f7ff fecc 	bl	800127c <LCD_Write_Cmd>
	
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0002bffc 	.word	0x0002bffc

080014ec <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4604      	mov	r4, r0
 80014f4:	4608      	mov	r0, r1
 80014f6:	4611      	mov	r1, r2
 80014f8:	461a      	mov	r2, r3
 80014fa:	4623      	mov	r3, r4
 80014fc:	80fb      	strh	r3, [r7, #6]
 80014fe:	4603      	mov	r3, r0
 8001500:	80bb      	strh	r3, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]
 8001506:	4613      	mov	r3, r2
 8001508:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800150a:	202a      	movs	r0, #42	; 0x2a
 800150c:	f7ff feb6 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	b29b      	uxth	r3, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff febe 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	b29b      	uxth	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff feb8 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001528:	88fa      	ldrh	r2, [r7, #6]
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	4413      	add	r3, r2
 800152e:	3b01      	subs	r3, #1
 8001530:	121b      	asrs	r3, r3, #8
 8001532:	b29b      	uxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff feaf 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800153a:	88fa      	ldrh	r2, [r7, #6]
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	4413      	add	r3, r2
 8001540:	b29b      	uxth	r3, r3
 8001542:	3b01      	subs	r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	b29b      	uxth	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fea4 	bl	8001298 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001550:	202b      	movs	r0, #43	; 0x2b
 8001552:	f7ff fe93 	bl	800127c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001556:	88bb      	ldrh	r3, [r7, #4]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	b29b      	uxth	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fe9b 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	b29b      	uxth	r3, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fe95 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800156e:	88ba      	ldrh	r2, [r7, #4]
 8001570:	883b      	ldrh	r3, [r7, #0]
 8001572:	4413      	add	r3, r2
 8001574:	3b01      	subs	r3, #1
 8001576:	121b      	asrs	r3, r3, #8
 8001578:	b29b      	uxth	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe8c 	bl	8001298 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001580:	88ba      	ldrh	r2, [r7, #4]
 8001582:	883b      	ldrh	r3, [r7, #0]
 8001584:	4413      	add	r3, r2
 8001586:	b29b      	uxth	r3, r3
 8001588:	3b01      	subs	r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	b29b      	uxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fe81 	bl	8001298 <LCD_Write_Data>
	
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}

0800159e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80015ae:	202c      	movs	r0, #44	; 0x2c
 80015b0:	f7ff fe64 	bl	800127c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e006      	b.n	80015c8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fe6b 	bl	8001298 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3301      	adds	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d3f4      	bcc.n	80015ba <LCD_FillColor+0x1c>
		
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4604      	mov	r4, r0
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4623      	mov	r3, r4
 80015ec:	80fb      	strh	r3, [r7, #6]
 80015ee:	4603      	mov	r3, r0
 80015f0:	80bb      	strh	r3, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <LCD_Clear+0x58>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <LCD_Clear+0x2a>
 8001602:	2300      	movs	r3, #0
 8001604:	e001      	b.n	800160a <LCD_Clear+0x2e>
 8001606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160a:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800160c:	883b      	ldrh	r3, [r7, #0]
 800160e:	887a      	ldrh	r2, [r7, #2]
 8001610:	88b9      	ldrh	r1, [r7, #4]
 8001612:	88f8      	ldrh	r0, [r7, #6]
 8001614:	f7ff ff6a 	bl	80014ec <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	883a      	ldrh	r2, [r7, #0]
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	461a      	mov	r2, r3
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f7ff ffb9 	bl	800159e <LCD_FillColor>
	
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	200001b8 	.word	0x200001b8

08001638 <LCD_Clear_Color>:

void LCD_Clear_Color ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor){
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4604      	mov	r4, r0
 8001640:	4608      	mov	r0, r1
 8001642:	4611      	mov	r1, r2
 8001644:	461a      	mov	r2, r3
 8001646:	4623      	mov	r3, r4
 8001648:	80fb      	strh	r3, [r7, #6]
 800164a:	4603      	mov	r3, r0
 800164c:	80bb      	strh	r3, [r7, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	807b      	strh	r3, [r7, #2]
 8001652:	4613      	mov	r3, r2
 8001654:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001656:	883b      	ldrh	r3, [r7, #0]
 8001658:	887a      	ldrh	r2, [r7, #2]
 800165a:	88b9      	ldrh	r1, [r7, #4]
 800165c:	88f8      	ldrh	r0, [r7, #6]
 800165e:	f7ff ff45 	bl	80014ec <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	883a      	ldrh	r2, [r7, #0]
 8001666:	fb02 f303 	mul.w	r3, r2, r3
 800166a:	461a      	mov	r2, r3
 800166c:	8b3b      	ldrh	r3, [r7, #24]
 800166e:	4619      	mov	r1, r3
 8001670:	4610      	mov	r0, r2
 8001672:	f7ff ff94 	bl	800159e <LCD_FillColor>
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bd90      	pop	{r4, r7, pc}
	...

08001680 <LCD_DrawChar_Color>:
			LCD_DrawDot(x,y,usColor);
		}
}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	4604      	mov	r4, r0
 8001688:	4608      	mov	r0, r1
 800168a:	4611      	mov	r1, r2
 800168c:	461a      	mov	r2, r3
 800168e:	4623      	mov	r3, r4
 8001690:	80fb      	strh	r3, [r7, #6]
 8001692:	4603      	mov	r3, r0
 8001694:	80bb      	strh	r3, [r7, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	70fb      	strb	r3, [r7, #3]
 800169a:	4613      	mov	r3, r2
 800169c:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	3b20      	subs	r3, #32
 80016a2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80016a4:	88b9      	ldrh	r1, [r7, #4]
 80016a6:	88f8      	ldrh	r0, [r7, #6]
 80016a8:	2310      	movs	r3, #16
 80016aa:	2208      	movs	r2, #8
 80016ac:	f7ff ff1e 	bl	80014ec <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80016b0:	202c      	movs	r0, #44	; 0x2c
 80016b2:	f7ff fde3 	bl	800127c <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80016b6:	2300      	movs	r3, #0
 80016b8:	73bb      	strb	r3, [r7, #14]
 80016ba:	e024      	b.n	8001706 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80016bc:	7b3a      	ldrb	r2, [r7, #12]
 80016be:	7bbb      	ldrb	r3, [r7, #14]
 80016c0:	4915      	ldr	r1, [pc, #84]	; (8001718 <LCD_DrawChar_Color+0x98>)
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	440a      	add	r2, r1
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80016cc:	2300      	movs	r3, #0
 80016ce:	737b      	strb	r3, [r7, #13]
 80016d0:	e013      	b.n	80016fa <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80016dc:	8c3b      	ldrh	r3, [r7, #32]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fdda 	bl	8001298 <LCD_Write_Data>
 80016e4:	e003      	b.n	80016ee <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 80016e6:	883b      	ldrh	r3, [r7, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fdd5 	bl	8001298 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80016f4:	7b7b      	ldrb	r3, [r7, #13]
 80016f6:	3301      	adds	r3, #1
 80016f8:	737b      	strb	r3, [r7, #13]
 80016fa:	7b7b      	ldrb	r3, [r7, #13]
 80016fc:	2b07      	cmp	r3, #7
 80016fe:	d9e8      	bls.n	80016d2 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	3301      	adds	r3, #1
 8001704:	73bb      	strb	r3, [r7, #14]
 8001706:	7bbb      	ldrb	r3, [r7, #14]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d9d7      	bls.n	80016bc <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bd90      	pop	{r4, r7, pc}
 8001716:	bf00      	nop
 8001718:	08006e50 	.word	0x08006e50

0800171c <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af02      	add	r7, sp, #8
 8001722:	4603      	mov	r3, r0
 8001724:	460a      	mov	r2, r1
 8001726:	80fb      	strh	r3, [r7, #6]
 8001728:	4613      	mov	r3, r2
 800172a:	80bb      	strh	r3, [r7, #4]
  LCD_Clear_Color ( usX - 10, usY, 20, 1, RED);
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	3b0a      	subs	r3, #10
 8001730:	b298      	uxth	r0, r3
 8001732:	88b9      	ldrh	r1, [r7, #4]
 8001734:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2301      	movs	r3, #1
 800173c:	2214      	movs	r2, #20
 800173e:	f7ff ff7b 	bl	8001638 <LCD_Clear_Color>
  LCD_Clear_Color ( usX, usY - 10, 1, 20, RED);
 8001742:	88bb      	ldrh	r3, [r7, #4]
 8001744:	3b0a      	subs	r3, #10
 8001746:	b299      	uxth	r1, r3
 8001748:	88f8      	ldrh	r0, [r7, #6]
 800174a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2314      	movs	r3, #20
 8001752:	2201      	movs	r2, #1
 8001754:	f7ff ff70 	bl	8001638 <LCD_Clear_Color>
	
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b087      	sub	sp, #28
 8001764:	af02      	add	r7, sp, #8
 8001766:	60ba      	str	r2, [r7, #8]
 8001768:	461a      	mov	r2, r3
 800176a:	4603      	mov	r3, r0
 800176c:	81fb      	strh	r3, [r7, #14]
 800176e:	460b      	mov	r3, r1
 8001770:	81bb      	strh	r3, [r7, #12]
 8001772:	4613      	mov	r3, r2
 8001774:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001776:	e01f      	b.n	80017b8 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001778:	89fb      	ldrh	r3, [r7, #14]
 800177a:	2be8      	cmp	r3, #232	; 0xe8
 800177c:	d904      	bls.n	8001788 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800177e:	2300      	movs	r3, #0
 8001780:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8001782:	89bb      	ldrh	r3, [r7, #12]
 8001784:	3310      	adds	r3, #16
 8001786:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001788:	89bb      	ldrh	r3, [r7, #12]
 800178a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800178e:	d903      	bls.n	8001798 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001790:	2300      	movs	r3, #0
 8001792:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8001794:	2300      	movs	r3, #0
 8001796:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	781a      	ldrb	r2, [r3, #0]
 800179c:	88fc      	ldrh	r4, [r7, #6]
 800179e:	89b9      	ldrh	r1, [r7, #12]
 80017a0:	89f8      	ldrh	r0, [r7, #14]
 80017a2:	8c3b      	ldrh	r3, [r7, #32]
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4623      	mov	r3, r4
 80017a8:	f7ff ff6a 	bl	8001680 <LCD_DrawChar_Color>
		
		pStr ++;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	3301      	adds	r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 80017b2:	89fb      	ldrh	r3, [r7, #14]
 80017b4:	3308      	adds	r3, #8
 80017b6:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1db      	bne.n	8001778 <LCD_DrawString_Color+0x18>
		
	}
	
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd90      	pop	{r4, r7, pc}
	...

080017cc <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	3b01      	subs	r3, #1
 80017da:	2b03      	cmp	r3, #3
 80017dc:	f200 80a0 	bhi.w	8001920 <LCD_GramScan+0x154>
 80017e0:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <LCD_GramScan+0x1c>)
 80017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e6:	bf00      	nop
 80017e8:	080017f9 	.word	0x080017f9
 80017ec:	08001843 	.word	0x08001843
 80017f0:	0800188d 	.word	0x0800188d
 80017f4:	080018d7 	.word	0x080018d7

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 80017f8:	2036      	movs	r0, #54	; 0x36
 80017fa:	f7ff fd3f 	bl	800127c <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 80017fe:	20c8      	movs	r0, #200	; 0xc8
 8001800:	f7ff fd4a 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001804:	202a      	movs	r0, #42	; 0x2a
 8001806:	f7ff fd39 	bl	800127c <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fd44 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff fd41 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fd3e 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 800181c:	20ef      	movs	r0, #239	; 0xef
 800181e:	f7ff fd3b 	bl	8001298 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001822:	202b      	movs	r0, #43	; 0x2b
 8001824:	f7ff fd2a 	bl	800127c <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fd35 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800182e:	2000      	movs	r0, #0
 8001830:	f7ff fd32 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 8001834:	2001      	movs	r0, #1
 8001836:	f7ff fd2f 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 800183a:	203f      	movs	r0, #63	; 0x3f
 800183c:	f7ff fd2c 	bl	8001298 <LCD_Write_Data>
					
		  break;
 8001840:	e06e      	b.n	8001920 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001842:	2036      	movs	r0, #54	; 0x36
 8001844:	f7ff fd1a 	bl	800127c <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 8001848:	2068      	movs	r0, #104	; 0x68
 800184a:	f7ff fd25 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 800184e:	202a      	movs	r0, #42	; 0x2a
 8001850:	f7ff fd14 	bl	800127c <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff fd1f 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff fd1c 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff fd19 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001866:	203f      	movs	r0, #63	; 0x3f
 8001868:	f7ff fd16 	bl	8001298 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 800186c:	202b      	movs	r0, #43	; 0x2b
 800186e:	f7ff fd05 	bl	800127c <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff fd10 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fd0d 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fd0a 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8001884:	20ef      	movs	r0, #239	; 0xef
 8001886:	f7ff fd07 	bl	8001298 <LCD_Write_Data>
		
		  break;
 800188a:	e049      	b.n	8001920 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 800188c:	2036      	movs	r0, #54	; 0x36
 800188e:	f7ff fcf5 	bl	800127c <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 8001892:	2028      	movs	r0, #40	; 0x28
 8001894:	f7ff fd00 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001898:	202a      	movs	r0, #42	; 0x2a
 800189a:	f7ff fcef 	bl	800127c <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff fcfa 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff fcf7 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 80018aa:	2001      	movs	r0, #1
 80018ac:	f7ff fcf4 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 80018b0:	203f      	movs	r0, #63	; 0x3f
 80018b2:	f7ff fcf1 	bl	8001298 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 80018b6:	202b      	movs	r0, #43	; 0x2b
 80018b8:	f7ff fce0 	bl	800127c <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80018bc:	2000      	movs	r0, #0
 80018be:	f7ff fceb 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7ff fce8 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff fce5 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 80018ce:	20ef      	movs	r0, #239	; 0xef
 80018d0:	f7ff fce2 	bl	8001298 <LCD_Write_Data>
		  
		  break;
 80018d4:	e024      	b.n	8001920 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 80018d6:	2036      	movs	r0, #54	; 0x36
 80018d8:	f7ff fcd0 	bl	800127c <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 80018dc:	2048      	movs	r0, #72	; 0x48
 80018de:	f7ff fcdb 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80018e2:	202a      	movs	r0, #42	; 0x2a
 80018e4:	f7ff fcca 	bl	800127c <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff fcd5 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff fcd2 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fccf 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 80018fa:	20ef      	movs	r0, #239	; 0xef
 80018fc:	f7ff fccc 	bl	8001298 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001900:	202b      	movs	r0, #43	; 0x2b
 8001902:	f7ff fcbb 	bl	800127c <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff fcc6 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff fcc3 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001912:	2001      	movs	r0, #1
 8001914:	f7ff fcc0 	bl	8001298 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8001918:	203f      	movs	r0, #63	; 0x3f
 800191a:	f7ff fcbd 	bl	8001298 <LCD_Write_Data>
		
	    break;
 800191e:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8001920:	202c      	movs	r0, #44	; 0x2c
 8001922:	f7ff fcab 	bl	800127c <LCD_Write_Cmd>
	
	
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001934:	f001 fc7c 	bl	8003230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001938:	f000 f836 	bl	80019a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193c:	f7ff fa46 	bl	8000dcc <MX_GPIO_Init>
  MX_FSMC_Init();
 8001940:	f7ff f992 	bl	8000c68 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001944:	f000 fcf4 	bl	8002330 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001948:	f000 fb3a 	bl	8001fc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800194c:	f000 fb84 	bl	8002058 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001950:	f000 fbd0 	bl	80020f4 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001954:	f000 fa8e 	bl	8001e74 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001958:	f7ff f8e2 	bl	8000b20 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800195c:	f000 fd3c 	bl	80023d8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001960:	f000 fd10 	bl	8002384 <MX_USART2_UART_Init>
  	 * LCD
  	 * ADC (Photoresistor)
  	 * ESP8266
  	 */
	
	macXPT2046_CS_DISABLE();
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196a:	480c      	ldr	r0, [pc, #48]	; (800199c <main+0x6c>)
 800196c:	f002 fac3 	bl	8003ef6 <HAL_GPIO_WritePin>
	LCD_INIT();
 8001970:	f7ff fc3d 	bl	80011ee <LCD_INIT>
	
	
	DEBUG_USART_Config();
 8001974:	f7ff f94e 	bl	8000c14 <DEBUG_USART_Config>
	
	//Calibration of TouchPad
	while( ! XPT2046_Touch_Calibrate () );
 8001978:	bf00      	nop
 800197a:	f001 f993 	bl	8002ca4 <XPT2046_Touch_Calibrate>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0fa      	beq.n	800197a <main+0x4a>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 8001984:	f000 fca0 	bl	80022c8 <TIMER_INIT>
	timer_min(1);
 8001988:	2001      	movs	r0, #1
 800198a:	f000 fcaf 	bl	80022ec <timer_min>
  myfunc();
 800198e:	f7ff fbc5 	bl	800111c <myfunc>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8001992:	4903      	ldr	r1, [pc, #12]	; (80019a0 <main+0x70>)
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <main+0x74>)
 8001996:	f001 fb9d 	bl	80030d4 <XPT2046_Get_TouchedPoint>
 800199a:	e7fa      	b.n	8001992 <main+0x62>
 800199c:	40011400 	.word	0x40011400
 80019a0:	20000008 	.word	0x20000008
 80019a4:	200001bc 	.word	0x200001bc

080019a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b096      	sub	sp, #88	; 0x58
 80019ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b2:	2228      	movs	r2, #40	; 0x28
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f004 fd8e 	bl	80064d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80019dc:	2305      	movs	r3, #5
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019e6:	2300      	movs	r3, #0
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019ea:	2301      	movs	r3, #1
 80019ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ee:	2301      	movs	r3, #1
 80019f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f2:	2302      	movs	r3, #2
 80019f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a00:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fab0 	bl	8003f6c <HAL_RCC_OscConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a12:	f000 f82b 	bl	8001a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a16:	230f      	movs	r3, #15
 8001a18:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	2102      	movs	r1, #2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fcfe 	bl	8004434 <HAL_RCC_ClockConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a3e:	f000 f815 	bl	8001a6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001a42:	2303      	movs	r3, #3
 8001a44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a50:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 fea9 	bl	80047ac <HAL_RCCEx_PeriphCLKConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001a60:	f000 f804 	bl	8001a6c <Error_Handler>
  }
}
 8001a64:	bf00      	nop
 8001a66:	3758      	adds	r7, #88	; 0x58
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a90:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d009      	beq.n	8001ab2 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	79f9      	ldrb	r1, [r7, #7]
 8001aa8:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d017      	beq.n	8001b0e <Uart_isr+0x52>
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d012      	beq.n	8001b0e <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <Uart_isr+0xbc>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ffba 	bl	8001a78 <store_char>

        extern UART_HandleTypeDef DebugUartHandle;
        WRITE_REG ( DebugUartHandle.Instance->DR,c);
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <Uart_isr+0xc0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	605a      	str	r2, [r3, #4]
        return;
 8001b0c:	e031      	b.n	8001b72 <Uart_isr+0xb6>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d02c      	beq.n	8001b72 <Uart_isr+0xb6>
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d027      	beq.n	8001b72 <Uart_isr+0xb6>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <Uart_isr+0xc4>)
 8001b24:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <Uart_isr+0xc4>)
 8001b2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d108      	bne.n	8001b44 <Uart_isr+0x88>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b40:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001b42:	e015      	b.n	8001b70 <Uart_isr+0xb4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <Uart_isr+0xc4>)
 8001b46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001b4a:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <Uart_isr+0xc4>)
 8001b4c:	5cd3      	ldrb	r3, [r2, r3]
 8001b4e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <Uart_isr+0xc4>)
 8001b52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001b56:	3301      	adds	r3, #1
 8001b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b5c:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <Uart_isr+0xc4>)
 8001b5e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	7bba      	ldrb	r2, [r7, #14]
 8001b6e:	605a      	str	r2, [r3, #4]
    	return;
 8001b70:	bf00      	nop
    }
}
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200005cc 	.word	0x200005cc
 8001b7c:	200000f0 	.word	0x200000f0
 8001b80:	200001c4 	.word	0x200001c4

08001b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_MspInit+0x5c>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_MspInit+0x5c>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6193      	str	r3, [r2, #24]
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_MspInit+0x5c>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_MspInit+0x5c>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_MspInit+0x5c>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_MspInit+0x5c>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_MspInit+0x60>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_MspInit+0x60>)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <MemManage_Handler+0x4>

08001c00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <BusFault_Handler+0x4>

08001c06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <UsageFault_Handler+0x4>

08001c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern uint16_t timeout_rb;
  if(timeout_rb >0)  timeout_rb--;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <SysTick_Handler+0x20>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <SysTick_Handler+0x18>
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SysTick_Handler+0x20>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <SysTick_Handler+0x20>)
 8001c46:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c48:	f001 fb38 	bl	80032bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200001c0 	.word	0x200001c0

08001c54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <EXTI0_IRQHandler+0x28>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <EXTI0_IRQHandler+0x1c>
	{
		extern uint32_t exertimer;
		// exertimer = RTC_raw() + 3;
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <EXTI0_IRQHandler+0x28>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f002 f974 	bl	8003f58 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f002 f959 	bl	8003f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40010400 	.word	0x40010400

08001c80 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <EXTI4_IRQHandler+0x2c>)
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <EXTI4_IRQHandler+0x30>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <EXTI4_IRQHandler+0x2c>)
 8001c98:	2210      	movs	r2, #16
 8001c9a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8001c9c:	2010      	movs	r0, #16
 8001c9e:	f002 f95b 	bl	8003f58 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001ca2:	2010      	movs	r0, #16
 8001ca4:	f002 f940 	bl	8003f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40010400 	.word	0x40010400
 8001cb0:	20000798 	.word	0x20000798

08001cb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <TIM3_IRQHandler+0x3c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <TIM3_IRQHandler+0x3c>)
 8001cc2:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <TIM3_IRQHandler+0x3c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10c      	bne.n	8001ce6 <TIM3_IRQHandler+0x32>
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <TIM3_IRQHandler+0x40>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d108      	bne.n	8001ce6 <TIM3_IRQHandler+0x32>
		/*Timer Ends, Handle the water drinking progress*/
		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 8001cd4:	4808      	ldr	r0, [pc, #32]	; (8001cf8 <TIM3_IRQHandler+0x44>)
 8001cd6:	f002 fea8 	bl	8004a2a <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001cda:	4807      	ldr	r0, [pc, #28]	; (8001cf8 <TIM3_IRQHandler+0x44>)
 8001cdc:	f002 fee9 	bl	8004ab2 <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <TIM3_IRQHandler+0x40>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ce6:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <TIM3_IRQHandler+0x44>)
 8001ce8:	f002 ff41 	bl	8004b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200006d4 	.word	0x200006d4
 8001cf4:	200006d5 	.word	0x200006d5
 8001cf8:	20000654 	.word	0x20000654

08001cfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    uint8_t ch = 1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	71fb      	strb	r3, [r7, #7]
    if (__HAL_UART_GET_FLAG( &DebugUartHandle, UART_FLAG_RXNE ) != RESET)
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <USART1_IRQHandler+0x38>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	d107      	bne.n	8001d24 <USART1_IRQHandler+0x28>
    {
        ch=( uint16_t)READ_REG(DebugUartHandle.Instance->DR);
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <USART1_IRQHandler+0x38>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	71fb      	strb	r3, [r7, #7]

        WRITE_REG ( WifiUartHandle.Instance->DR,ch);
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <USART1_IRQHandler+0x3c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	79fa      	ldrb	r2, [r7, #7]
 8001d22:	605a      	str	r2, [r3, #4]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d24:	4805      	ldr	r0, [pc, #20]	; (8001d3c <USART1_IRQHandler+0x40>)
 8001d26:	f003 ff2b 	bl	8005b80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200000f0 	.word	0x200000f0
 8001d38:	20000130 	.word	0x20000130
 8001d3c:	200006d8 	.word	0x200006d8

08001d40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern void Uart_isr (UART_HandleTypeDef *huart);
	Uart_isr (&huart3);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <USART3_IRQHandler+0x10>)
 8001d46:	f7ff feb9 	bl	8001abc <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000758 	.word	0x20000758

08001d54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <EXTI15_10_IRQHandler+0x2c>)
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <EXTI15_10_IRQHandler+0x20>
	{
		// extern void debug_alarm_set();
		// debug_alarm_set();
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <EXTI15_10_IRQHandler+0x2c>)
 8001d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d6a:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8001d6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d70:	f002 f8f2 	bl	8003f58 <HAL_GPIO_EXTI_Callback>
	}
	/* USER
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d78:	f002 f8d6 	bl	8003f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40010400 	.word	0x40010400

08001d84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <TIM5_IRQHandler+0x14>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d8e:	4803      	ldr	r0, [pc, #12]	; (8001d9c <TIM5_IRQHandler+0x18>)
 8001d90:	f002 feed 	bl	8004b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000694 	.word	0x20000694

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f004 fb58 	bl	8006484 <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20010000 	.word	0x20010000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	200005d0 	.word	0x200005d0
 8001e08:	200007b0 	.word	0x200007b0

08001e0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <SystemInit+0x5c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <SystemInit+0x5c>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <SystemInit+0x5c>)
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4911      	ldr	r1, [pc, #68]	; (8001e68 <SystemInit+0x5c>)
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <SystemInit+0x60>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <SystemInit+0x5c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <SystemInit+0x5c>)
 8001e2e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <SystemInit+0x5c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <SystemInit+0x5c>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e42:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <SystemInit+0x5c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <SystemInit+0x5c>)
 8001e4a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e4e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <SystemInit+0x5c>)
 8001e52:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e56:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SystemInit+0x64>)
 8001e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e5e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	f8ff0000 	.word	0xf8ff0000
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b094      	sub	sp, #80	; 0x50
 8001e78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	611a      	str	r2, [r3, #16]
 8001ea2:	615a      	str	r2, [r3, #20]
 8001ea4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
 8001eb4:	615a      	str	r2, [r3, #20]
 8001eb6:	619a      	str	r2, [r3, #24]

  htim1.Instance = TIM1;
 8001eb8:	4b3f      	ldr	r3, [pc, #252]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001eba:	4a40      	ldr	r2, [pc, #256]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001ebc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001ec0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001ec4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1125;
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001ece:	f240 4265 	movw	r2, #1125	; 0x465
 8001ed2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eda:	4b37      	ldr	r3, [pc, #220]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee0:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ee6:	4834      	ldr	r0, [pc, #208]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001ee8:	f002 fd5a 	bl	80049a0 <HAL_TIM_Base_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001ef2:	f7ff fdbb 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001efc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f00:	4619      	mov	r1, r3
 8001f02:	482d      	ldr	r0, [pc, #180]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001f04:	f003 f802 	bl	8004f0c <HAL_TIM_ConfigClockSource>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001f0e:	f7ff fdad 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f12:	4829      	ldr	r0, [pc, #164]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001f14:	f002 fdf7 	bl	8004b06 <HAL_TIM_PWM_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001f1e:	f7ff fda5 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4821      	ldr	r0, [pc, #132]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001f32:	f003 fc42 	bl	80057ba <HAL_TIMEx_MasterConfigSynchronization>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001f3c:	f7ff fd96 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f40:	2360      	movs	r3, #96	; 0x60
 8001f42:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 300;
 8001f44:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001f48:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	2200      	movs	r2, #0
 8001f64:	4619      	mov	r1, r3
 8001f66:	4814      	ldr	r0, [pc, #80]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001f68:	f002 ff0a 	bl	8004d80 <HAL_TIM_PWM_ConfigChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001f72:	f7ff fd7b 	bl	8001a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f94:	463b      	mov	r3, r7
 8001f96:	4619      	mov	r1, r3
 8001f98:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001f9a:	f003 fbb6 	bl	800570a <HAL_TIMEx_ConfigBreakDeadTime>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001fa4:	f7ff fd62 	bl	8001a6c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <MX_TIM1_Init+0x144>)
 8001faa:	f000 f959 	bl	8002260 <HAL_TIM_MspPostInit>

}
 8001fae:	bf00      	nop
 8001fb0:	3750      	adds	r7, #80	; 0x50
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200005d4 	.word	0x200005d4
 8001fbc:	40012c00 	.word	0x40012c00

08001fc0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <MX_TIM2_Init+0x94>)
 8001fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <MX_TIM2_Init+0x94>)
 8001fe6:	2247      	movs	r2, #71	; 0x47
 8001fe8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MX_TIM2_Init+0x94>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <MX_TIM2_Init+0x94>)
 8001ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MX_TIM2_Init+0x94>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <MX_TIM2_Init+0x94>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002004:	4813      	ldr	r0, [pc, #76]	; (8002054 <MX_TIM2_Init+0x94>)
 8002006:	f002 fccb 	bl	80049a0 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002010:	f7ff fd2c 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002018:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4619      	mov	r1, r3
 8002020:	480c      	ldr	r0, [pc, #48]	; (8002054 <MX_TIM2_Init+0x94>)
 8002022:	f002 ff73 	bl	8004f0c <HAL_TIM_ConfigClockSource>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800202c:	f7ff fd1e 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002038:	463b      	mov	r3, r7
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_TIM2_Init+0x94>)
 800203e:	f003 fbbc 	bl	80057ba <HAL_TIMEx_MasterConfigSynchronization>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002048:	f7ff fd10 	bl	8001a6c <Error_Handler>
  }

}
 800204c:	bf00      	nop
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000614 	.word	0x20000614

08002058 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	463b      	mov	r3, r7
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <MX_TIM3_Init+0x94>)
 8002076:	4a1e      	ldr	r2, [pc, #120]	; (80020f0 <MX_TIM3_Init+0x98>)
 8002078:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <MX_TIM3_Init+0x94>)
 800207c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002080:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <MX_TIM3_Init+0x94>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33749;
 8002088:	4b18      	ldr	r3, [pc, #96]	; (80020ec <MX_TIM3_Init+0x94>)
 800208a:	f248 32d5 	movw	r2, #33749	; 0x83d5
 800208e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <MX_TIM3_Init+0x94>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <MX_TIM3_Init+0x94>)
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800209c:	4813      	ldr	r0, [pc, #76]	; (80020ec <MX_TIM3_Init+0x94>)
 800209e:	f002 fc7f 	bl	80049a0 <HAL_TIM_Base_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80020a8:	f7ff fce0 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020b2:	f107 0308 	add.w	r3, r7, #8
 80020b6:	4619      	mov	r1, r3
 80020b8:	480c      	ldr	r0, [pc, #48]	; (80020ec <MX_TIM3_Init+0x94>)
 80020ba:	f002 ff27 	bl	8004f0c <HAL_TIM_ConfigClockSource>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80020c4:	f7ff fcd2 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020d0:	463b      	mov	r3, r7
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_TIM3_Init+0x94>)
 80020d6:	f003 fb70 	bl	80057ba <HAL_TIMEx_MasterConfigSynchronization>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80020e0:	f7ff fcc4 	bl	8001a6c <Error_Handler>
  }

}
 80020e4:	bf00      	nop
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000654 	.word	0x20000654
 80020f0:	40000400 	.word	0x40000400

080020f4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002108:	463b      	mov	r3, r7
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <MX_TIM5_Init+0x94>)
 8002112:	4a1e      	ldr	r2, [pc, #120]	; (800218c <MX_TIM5_Init+0x98>)
 8002114:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 8002116:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <MX_TIM5_Init+0x94>)
 8002118:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800211c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <MX_TIM5_Init+0x94>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <MX_TIM5_Init+0x94>)
 8002126:	f248 32d5 	movw	r2, #33749	; 0x83d5
 800212a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <MX_TIM5_Init+0x94>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <MX_TIM5_Init+0x94>)
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002138:	4813      	ldr	r0, [pc, #76]	; (8002188 <MX_TIM5_Init+0x94>)
 800213a:	f002 fc31 	bl	80049a0 <HAL_TIM_Base_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002144:	f7ff fc92 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800214e:	f107 0308 	add.w	r3, r7, #8
 8002152:	4619      	mov	r1, r3
 8002154:	480c      	ldr	r0, [pc, #48]	; (8002188 <MX_TIM5_Init+0x94>)
 8002156:	f002 fed9 	bl	8004f0c <HAL_TIM_ConfigClockSource>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002160:	f7ff fc84 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800216c:	463b      	mov	r3, r7
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_TIM5_Init+0x94>)
 8002172:	f003 fb22 	bl	80057ba <HAL_TIMEx_MasterConfigSynchronization>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800217c:	f7ff fc76 	bl	8001a6c <Error_Handler>
  }

}
 8002180:	bf00      	nop
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000694 	.word	0x20000694
 800218c:	40000c00 	.word	0x40000c00

08002190 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <HAL_TIM_Base_MspInit+0xc0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10c      	bne.n	80021bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_TIM_Base_MspInit+0xc4>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <HAL_TIM_Base_MspInit+0xc4>)
 80021a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021ac:	6193      	str	r3, [r2, #24]
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_TIM_Base_MspInit+0xc4>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80021ba:	e044      	b.n	8002246 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c4:	d10c      	bne.n	80021e0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021c6:	4b23      	ldr	r3, [pc, #140]	; (8002254 <HAL_TIM_Base_MspInit+0xc4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4a22      	ldr	r2, [pc, #136]	; (8002254 <HAL_TIM_Base_MspInit+0xc4>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	61d3      	str	r3, [r2, #28]
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_TIM_Base_MspInit+0xc4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
}
 80021de:	e032      	b.n	8002246 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_TIM_Base_MspInit+0xc8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d114      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_TIM_Base_MspInit+0xc4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_TIM_Base_MspInit+0xc4>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_TIM_Base_MspInit+0xc4>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	201d      	movs	r0, #29
 8002208:	f001 fb87 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800220c:	201d      	movs	r0, #29
 800220e:	f001 fba0 	bl	8003952 <HAL_NVIC_EnableIRQ>
}
 8002212:	e018      	b.n	8002246 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_TIM_Base_MspInit+0xcc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d113      	bne.n	8002246 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_TIM_Base_MspInit+0xc4>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_TIM_Base_MspInit+0xc4>)
 8002224:	f043 0308 	orr.w	r3, r3, #8
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_TIM_Base_MspInit+0xc4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	2032      	movs	r0, #50	; 0x32
 800223c:	f001 fb6d 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002240:	2032      	movs	r0, #50	; 0x32
 8002242:	f001 fb86 	bl	8003952 <HAL_NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40012c00 	.word	0x40012c00
 8002254:	40021000 	.word	0x40021000
 8002258:	40000400 	.word	0x40000400
 800225c:	40000c00 	.word	0x40000c00

08002260 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_TIM_MspPostInit+0x5c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d118      	bne.n	80022b2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_TIM_MspPostInit+0x60>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_TIM_MspPostInit+0x60>)
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	6193      	str	r3, [r2, #24]
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_TIM_MspPostInit+0x60>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800229c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f107 0310 	add.w	r3, r7, #16
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	; (80022c4 <HAL_TIM_MspPostInit+0x64>)
 80022ae:	f001 fc73 	bl	8003b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022b2:	bf00      	nop
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40010800 	.word	0x40010800

080022c8 <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <TIMER_INIT+0x20>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0201 	mvn.w	r2, #1
 80022d4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 80022d6:	4804      	ldr	r0, [pc, #16]	; (80022e8 <TIMER_INIT+0x20>)
 80022d8:	f002 fb8d 	bl	80049f6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <TIMER_INIT+0x20>)
 80022de:	f002 fbce 	bl	8004a7e <HAL_TIM_Base_Start_IT>
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000694 	.word	0x20000694

080022ec <timer_min>:
	}
	__HAL_TIM_DISABLE(&htim2);
}

void timer_min(uint8_t min)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <timer_min+0x38>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f06f 0201 	mvn.w	r2, #1
 80022fe:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <timer_min+0x3c>)
 8002308:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <timer_min+0x40>)
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8002310:	4804      	ldr	r0, [pc, #16]	; (8002324 <timer_min+0x38>)
 8002312:	f002 fb70 	bl	80049f6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002316:	4803      	ldr	r0, [pc, #12]	; (8002324 <timer_min+0x38>)
 8002318:	f002 fbb1 	bl	8004a7e <HAL_TIM_Base_Start_IT>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000654 	.word	0x20000654
 8002328:	200006d4 	.word	0x200006d4
 800232c:	200006d5 	.word	0x200006d5

08002330 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <MX_USART1_UART_Init+0x4c>)
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <MX_USART1_UART_Init+0x50>)
 8002338:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <MX_USART1_UART_Init+0x4c>)
 800233c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002340:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <MX_USART1_UART_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <MX_USART1_UART_Init+0x4c>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <MX_USART1_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <MX_USART1_UART_Init+0x4c>)
 8002356:	220c      	movs	r2, #12
 8002358:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <MX_USART1_UART_Init+0x4c>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <MX_USART1_UART_Init+0x4c>)
 8002362:	2200      	movs	r2, #0
 8002364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002366:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_USART1_UART_Init+0x4c>)
 8002368:	f003 fa7d 	bl	8005866 <HAL_UART_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002372:	f7ff fb7b 	bl	8001a6c <Error_Handler>
  }

}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200006d8 	.word	0x200006d8
 8002380:	40013800 	.word	0x40013800

08002384 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <MX_USART2_UART_Init+0x4c>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <MX_USART2_UART_Init+0x50>)
 800238c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <MX_USART2_UART_Init+0x4c>)
 8002390:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <MX_USART2_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <MX_USART2_UART_Init+0x4c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <MX_USART2_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <MX_USART2_UART_Init+0x4c>)
 80023aa:	220c      	movs	r2, #12
 80023ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <MX_USART2_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <MX_USART2_UART_Init+0x4c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <MX_USART2_UART_Init+0x4c>)
 80023bc:	f003 fa53 	bl	8005866 <HAL_UART_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023c6:	f7ff fb51 	bl	8001a6c <Error_Handler>
  }

}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000718 	.word	0x20000718
 80023d4:	40004400 	.word	0x40004400

080023d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <MX_USART3_UART_Init+0x4c>)
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <MX_USART3_UART_Init+0x50>)
 80023e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <MX_USART3_UART_Init+0x4c>)
 80023e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_USART3_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MX_USART3_UART_Init+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <MX_USART3_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MX_USART3_UART_Init+0x4c>)
 80023fe:	220c      	movs	r2, #12
 8002400:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <MX_USART3_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_USART3_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_USART3_UART_Init+0x4c>)
 8002410:	f003 fa29 	bl	8005866 <HAL_UART_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800241a:	f7ff fb27 	bl	8001a6c <Error_Handler>
  }

}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000758 	.word	0x20000758
 8002428:	40004800 	.word	0x40004800

0800242c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08c      	sub	sp, #48	; 0x30
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0320 	add.w	r3, r7, #32
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a5b      	ldr	r2, [pc, #364]	; (80025b4 <HAL_UART_MspInit+0x188>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d13a      	bne.n	80024c2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800244c:	4b5a      	ldr	r3, [pc, #360]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a59      	ldr	r2, [pc, #356]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 8002452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002464:	4b54      	ldr	r3, [pc, #336]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a53      	ldr	r2, [pc, #332]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800247c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 0320 	add.w	r3, r7, #32
 800248e:	4619      	mov	r1, r3
 8002490:	484a      	ldr	r0, [pc, #296]	; (80025bc <HAL_UART_MspInit+0x190>)
 8002492:	f001 fb81 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a4:	f107 0320 	add.w	r3, r7, #32
 80024a8:	4619      	mov	r1, r3
 80024aa:	4844      	ldr	r0, [pc, #272]	; (80025bc <HAL_UART_MspInit+0x190>)
 80024ac:	f001 fb74 	bl	8003b98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	2025      	movs	r0, #37	; 0x25
 80024b6:	f001 fa30 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024ba:	2025      	movs	r0, #37	; 0x25
 80024bc:	f001 fa49 	bl	8003952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024c0:	e074      	b.n	80025ac <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a3e      	ldr	r2, [pc, #248]	; (80025c0 <HAL_UART_MspInit+0x194>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d130      	bne.n	800252e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024cc:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	4a39      	ldr	r2, [pc, #228]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 80024d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d6:	61d3      	str	r3, [r2, #28]
 80024d8:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	4a33      	ldr	r2, [pc, #204]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	6193      	str	r3, [r2, #24]
 80024f0:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024fc:	2304      	movs	r3, #4
 80024fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	f107 0320 	add.w	r3, r7, #32
 800250c:	4619      	mov	r1, r3
 800250e:	482b      	ldr	r0, [pc, #172]	; (80025bc <HAL_UART_MspInit+0x190>)
 8002510:	f001 fb42 	bl	8003b98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002514:	2308      	movs	r3, #8
 8002516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002520:	f107 0320 	add.w	r3, r7, #32
 8002524:	4619      	mov	r1, r3
 8002526:	4825      	ldr	r0, [pc, #148]	; (80025bc <HAL_UART_MspInit+0x190>)
 8002528:	f001 fb36 	bl	8003b98 <HAL_GPIO_Init>
}
 800252c:	e03e      	b.n	80025ac <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART3)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <HAL_UART_MspInit+0x198>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d139      	bne.n	80025ac <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002538:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 800253e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002542:	61d3      	str	r3, [r2, #28]
 8002544:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <HAL_UART_MspInit+0x18c>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002572:	2303      	movs	r3, #3
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002576:	f107 0320 	add.w	r3, r7, #32
 800257a:	4619      	mov	r1, r3
 800257c:	4812      	ldr	r0, [pc, #72]	; (80025c8 <HAL_UART_MspInit+0x19c>)
 800257e:	f001 fb0b 	bl	8003b98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002582:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002590:	f107 0320 	add.w	r3, r7, #32
 8002594:	4619      	mov	r1, r3
 8002596:	480c      	ldr	r0, [pc, #48]	; (80025c8 <HAL_UART_MspInit+0x19c>)
 8002598:	f001 fafe 	bl	8003b98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	2027      	movs	r0, #39	; 0x27
 80025a2:	f001 f9ba 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025a6:	2027      	movs	r0, #39	; 0x27
 80025a8:	f001 f9d3 	bl	8003952 <HAL_NVIC_EnableIRQ>
}
 80025ac:	bf00      	nop
 80025ae:	3730      	adds	r7, #48	; 0x30
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40013800 	.word	0x40013800
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40010800 	.word	0x40010800
 80025c0:	40004400 	.word	0x40004400
 80025c4:	40004800 	.word	0x40004800
 80025c8:	40010c00 	.word	0x40010c00

080025cc <XPT2046_DelayUS>:
		-4.979353, -0.001750, 0.065168, -13.318824 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e00a      	b.n	80025f0 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 80025da:	230c      	movs	r3, #12
 80025dc:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 80025de:	bf00      	nop
 80025e0:	7afb      	ldrb	r3, [r7, #11]
 80025e2:	1e5a      	subs	r2, r3, #1
 80025e4:	72fa      	strb	r2, [r7, #11]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1fa      	bne.n	80025e0 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3301      	adds	r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d3f0      	bcc.n	80025da <XPT2046_DelayUS+0xe>
			;

	}

}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 800260e:	2200      	movs	r2, #0
 8002610:	2104      	movs	r1, #4
 8002612:	481d      	ldr	r0, [pc, #116]	; (8002688 <XPT2046_WriteCMD+0x84>)
 8002614:	f001 fc6f 	bl	8003ef6 <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 8002618:	2200      	movs	r2, #0
 800261a:	2101      	movs	r1, #1
 800261c:	481a      	ldr	r0, [pc, #104]	; (8002688 <XPT2046_WriteCMD+0x84>)
 800261e:	f001 fc6a 	bl	8003ef6 <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
 8002626:	e027      	b.n	8002678 <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002628:	79fa      	ldrb	r2, [r7, #7]
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	f1c3 0307 	rsb	r3, r3, #7
 8002630:	fa42 f303 	asr.w	r3, r2, r3
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <XPT2046_WriteCMD+0x44>
 800263c:	2201      	movs	r2, #1
 800263e:	2104      	movs	r1, #4
 8002640:	4811      	ldr	r0, [pc, #68]	; (8002688 <XPT2046_WriteCMD+0x84>)
 8002642:	f001 fc58 	bl	8003ef6 <HAL_GPIO_WritePin>
 8002646:	e004      	b.n	8002652 <XPT2046_WriteCMD+0x4e>
 8002648:	2200      	movs	r2, #0
 800264a:	2104      	movs	r1, #4
 800264c:	480e      	ldr	r0, [pc, #56]	; (8002688 <XPT2046_WriteCMD+0x84>)
 800264e:	f001 fc52 	bl	8003ef6 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8002652:	2005      	movs	r0, #5
 8002654:	f7ff ffba 	bl	80025cc <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 8002658:	2201      	movs	r2, #1
 800265a:	2101      	movs	r1, #1
 800265c:	480a      	ldr	r0, [pc, #40]	; (8002688 <XPT2046_WriteCMD+0x84>)
 800265e:	f001 fc4a 	bl	8003ef6 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8002662:	2005      	movs	r0, #5
 8002664:	f7ff ffb2 	bl	80025cc <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8002668:	2200      	movs	r2, #0
 800266a:	2101      	movs	r1, #1
 800266c:	4806      	ldr	r0, [pc, #24]	; (8002688 <XPT2046_WriteCMD+0x84>)
 800266e:	f001 fc42 	bl	8003ef6 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	3301      	adds	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b07      	cmp	r3, #7
 800267c:	d9d4      	bls.n	8002628 <XPT2046_WriteCMD+0x24>
	}

}
 800267e:	bf00      	nop
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40011800 	.word	0x40011800

0800268c <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 8002692:	2300      	movs	r3, #0
 8002694:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 8002696:	2200      	movs	r2, #0
 8002698:	2104      	movs	r1, #4
 800269a:	4819      	ldr	r0, [pc, #100]	; (8002700 <XPT2046_ReadCMD+0x74>)
 800269c:	f001 fc2b 	bl	8003ef6 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80026a0:	2201      	movs	r2, #1
 80026a2:	2101      	movs	r1, #1
 80026a4:	4816      	ldr	r0, [pc, #88]	; (8002700 <XPT2046_ReadCMD+0x74>)
 80026a6:	f001 fc26 	bl	8003ef6 <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 80026aa:	2300      	movs	r3, #0
 80026ac:	71fb      	strb	r3, [r7, #7]
 80026ae:	e01e      	b.n	80026ee <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 80026b0:	2200      	movs	r2, #0
 80026b2:	2101      	movs	r1, #1
 80026b4:	4812      	ldr	r0, [pc, #72]	; (8002700 <XPT2046_ReadCMD+0x74>)
 80026b6:	f001 fc1e 	bl	8003ef6 <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 80026ba:	2108      	movs	r1, #8
 80026bc:	4810      	ldr	r0, [pc, #64]	; (8002700 <XPT2046_ReadCMD+0x74>)
 80026be:	f001 fc03 	bl	8003ec8 <HAL_GPIO_ReadPin>
 80026c2:	4603      	mov	r3, r0
 80026c4:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	f1c3 030b 	rsb	r3, r3, #11
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	b21a      	sxth	r2, r3
 80026d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80026d8:	4313      	orrs	r3, r2
 80026da:	b21b      	sxth	r3, r3
 80026dc:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 80026de:	2201      	movs	r2, #1
 80026e0:	2101      	movs	r1, #1
 80026e2:	4807      	ldr	r0, [pc, #28]	; (8002700 <XPT2046_ReadCMD+0x74>)
 80026e4:	f001 fc07 	bl	8003ef6 <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	3301      	adds	r3, #1
 80026ec:	71fb      	strb	r3, [r7, #7]
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b0b      	cmp	r3, #11
 80026f2:	d9dd      	bls.n	80026b0 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 80026f4:	88bb      	ldrh	r3, [r7, #4]

}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40011800 	.word	0x40011800

08002704 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff77 	bl	8002604 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 8002716:	f7ff ffb9 	bl	800268c <XPT2046_ReadCMD>
 800271a:	4603      	mov	r3, r0

}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 800272e:	2090      	movs	r0, #144	; 0x90
 8002730:	f7ff ffe8 	bl	8002704 <XPT2046_ReadAdc>
 8002734:	4603      	mov	r3, r0
 8002736:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 8002738:	2001      	movs	r0, #1
 800273a:	f7ff ff47 	bl	80025cc <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 800273e:	20d0      	movs	r0, #208	; 0xd0
 8002740:	f7ff ffe0 	bl	8002704 <XPT2046_ReadAdc>
 8002744:	4603      	mov	r3, r0
 8002746:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	89fa      	ldrh	r2, [r7, #14]
 800274c:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	89ba      	ldrh	r2, [r7, #12]
 8002752:	801a      	strh	r2, [r3, #0]

}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b092      	sub	sp, #72	; 0x48
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8002764:	2300      	movs	r3, #0
 8002766:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 800276a:	f107 0308 	add.w	r3, r7, #8
 800276e:	2228      	movs	r2, #40	; 0x28
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f003 feb0 	bl	80064d8 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 8002778:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800277c:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ffce 	bl	8002724 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 8002788:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800278c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	3348      	adds	r3, #72	; 0x48
 8002794:	443b      	add	r3, r7
 8002796:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 800279a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800279e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80027a2:	330a      	adds	r3, #10
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	3348      	adds	r3, #72	; 0x48
 80027a8:	443b      	add	r3, r7
 80027aa:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 80027ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027b2:	3301      	adds	r3, #1
 80027b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 80027b8:	2110      	movs	r1, #16
 80027ba:	4871      	ldr	r0, [pc, #452]	; (8002980 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80027bc:	f001 fb84 	bl	8003ec8 <HAL_GPIO_ReadPin>
 80027c0:	4603      	mov	r3, r0
			&& (ucCount < 10));
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <XPT2046_ReadAdc_Smooth_XY+0x72>
 80027c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027ca:	2b09      	cmp	r3, #9
 80027cc:	d9d4      	bls.n	8002778 <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 80027ce:	2110      	movs	r1, #16
 80027d0:	486b      	ldr	r0, [pc, #428]	; (8002980 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80027d2:	f001 fb79 	bl	8003ec8 <HAL_GPIO_ReadPin>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 80027dc:	4b69      	ldr	r3, [pc, #420]	; (8002984 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 80027e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027e6:	2b0a      	cmp	r3, #10
 80027e8:	f040 80c4 	bne.w	8002974 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 80027ec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
 80027f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 80027f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80027fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80027fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 8002800:	2301      	movs	r3, #1
 8002802:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002806:	e02b      	b.n	8002860 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 8002808:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	3348      	adds	r3, #72	; 0x48
 8002810:	443b      	add	r3, r7
 8002812:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002816:	461a      	mov	r2, r3
 8002818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800281a:	4293      	cmp	r3, r2
 800281c:	dd08      	ble.n	8002830 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 800281e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	3348      	adds	r3, #72	; 0x48
 8002826:	443b      	add	r3, r7
 8002828:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800282c:	643b      	str	r3, [r7, #64]	; 0x40
 800282e:	e012      	b.n	8002856 <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 8002830:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	3348      	adds	r3, #72	; 0x48
 8002838:	443b      	add	r3, r7
 800283a:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800283e:	461a      	mov	r2, r3
 8002840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002842:	4293      	cmp	r3, r2
 8002844:	da07      	bge.n	8002856 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 8002846:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	3348      	adds	r3, #72	; 0x48
 800284e:	443b      	add	r3, r7
 8002850:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002854:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8002856:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800285a:	3301      	adds	r3, #1
 800285c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002860:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002864:	2b09      	cmp	r3, #9
 8002866:	d9cf      	bls.n	8002808 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 8002868:	2301      	movs	r3, #1
 800286a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800286e:	e02f      	b.n	80028d0 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 8002870:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002874:	330a      	adds	r3, #10
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	3348      	adds	r3, #72	; 0x48
 800287a:	443b      	add	r3, r7
 800287c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002880:	461a      	mov	r2, r3
 8002882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002884:	4293      	cmp	r3, r2
 8002886:	dd09      	ble.n	800289c <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 8002888:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800288c:	330a      	adds	r3, #10
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	3348      	adds	r3, #72	; 0x48
 8002892:	443b      	add	r3, r7
 8002894:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002898:	63bb      	str	r3, [r7, #56]	; 0x38
 800289a:	e014      	b.n	80028c6 <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 800289c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028a0:	330a      	adds	r3, #10
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	3348      	adds	r3, #72	; 0x48
 80028a6:	443b      	add	r3, r7
 80028a8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80028ac:	461a      	mov	r2, r3
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	4293      	cmp	r3, r2
 80028b2:	da08      	bge.n	80028c6 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 80028b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028b8:	330a      	adds	r3, #10
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	3348      	adds	r3, #72	; 0x48
 80028be:	443b      	add	r3, r7
 80028c0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 80028c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028ca:	3301      	adds	r3, #1
 80028cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80028d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	d9cb      	bls.n	8002870 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 80028d8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80028dc:	461a      	mov	r2, r3
 80028de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80028e2:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 80028e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80028e8:	4413      	add	r3, r2
 80028ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80028ee:	4413      	add	r3, r2
 80028f0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80028f4:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 80028f6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80028fa:	4413      	add	r3, r2
 80028fc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002900:	4413      	add	r3, r2
 8002902:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002906:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 8002908:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002912:	441a      	add	r2, r3
 8002914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002916:	1ad2      	subs	r2, r2, r3
 8002918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291a:	1ad3      	subs	r3, r2, r3
				>> 3;
 800291c:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 800291e:	b29a      	uxth	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8002924:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002928:	461a      	mov	r2, r3
 800292a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800292e:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 8002930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002934:	4413      	add	r3, r2
 8002936:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800293a:	4413      	add	r3, r2
 800293c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002940:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 8002942:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002946:	4413      	add	r3, r2
 8002948:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800294c:	4413      	add	r3, r2
 800294e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8002952:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8002954:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8002958:	4413      	add	r3, r2
 800295a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800295e:	441a      	add	r2, r3
 8002960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002962:	1ad2      	subs	r2, r2, r3
 8002964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002966:	1ad3      	subs	r3, r2, r3
				>> 3;
 8002968:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 800296a:	b29a      	uxth	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	805a      	strh	r2, [r3, #2]

		return 1;
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8002974:	2300      	movs	r3, #0

}
 8002976:	4618      	mov	r0, r3
 8002978:	3748      	adds	r7, #72	; 0x48
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40011800 	.word	0x40011800
 8002984:	20000798 	.word	0x20000798

08002988 <XPT2046_Calculate_CalibrationFactor>:
#endif

static uint8_t XPT2046_Calculate_CalibrationFactor(
		strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_Coordinate *pScreenSample,
		strType_XPT2046_Calibration *pCalibrationFactor) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8002994:	2301      	movs	r3, #1
 8002996:	75fb      	strb	r3, [r7, #23]

	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3308      	adds	r3, #8
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	1ad3      	subs	r3, r2, r3
			* (pScreenSample[1].y - pScreenSample[2].y))
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	3204      	adds	r2, #4
 80029aa:	8852      	ldrh	r2, [r2, #2]
 80029ac:	4611      	mov	r1, r2
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	3208      	adds	r2, #8
 80029b2:	8852      	ldrh	r2, [r2, #2]
 80029b4:	1a8a      	subs	r2, r1, r2
 80029b6:	fb03 f202 	mul.w	r2, r3, r2
			- ((pScreenSample[1].x - pScreenSample[2].x)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3304      	adds	r3, #4
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	4619      	mov	r1, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3308      	adds	r3, #8
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	1acb      	subs	r3, r1, r3
					* (pScreenSample[0].y - pScreenSample[2].y));
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	8849      	ldrh	r1, [r1, #2]
 80029ce:	4608      	mov	r0, r1
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	3108      	adds	r1, #8
 80029d4:	8849      	ldrh	r1, [r1, #2]
 80029d6:	1a41      	subs	r1, r0, r1
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
			- ((pScreenSample[1].x - pScreenSample[2].x)
 80029dc:	1ad3      	subs	r3, r2, r3
	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fd7a 	bl	80004d8 <__aeabi_i2d>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	if (pCalibrationFactor->Divider == 0)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	f7fe f83e 	bl	8000a7c <__aeabi_dcmpeq>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	75fb      	strb	r3, [r7, #23]
 8002a0a:	e145      	b.n	8002c98 <XPT2046_Calculate_CalibrationFactor+0x310>

	else {

		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].x)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3308      	adds	r3, #8
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	3204      	adds	r2, #4
 8002a1e:	8852      	ldrh	r2, [r2, #2]
 8002a20:	4611      	mov	r1, r2
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	3208      	adds	r2, #8
 8002a26:	8852      	ldrh	r2, [r2, #2]
 8002a28:	1a8a      	subs	r2, r1, r2
 8002a2a:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3304      	adds	r3, #4
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	4619      	mov	r1, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3308      	adds	r3, #8
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	8849      	ldrh	r1, [r1, #2]
 8002a42:	4608      	mov	r0, r1
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	3108      	adds	r1, #8
 8002a48:	8849      	ldrh	r1, [r1, #2]
 8002a4a:	1a41      	subs	r1, r0, r1
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8002a50:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fd40 	bl	80004d8 <__aeabi_i2d>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x))
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	3204      	adds	r2, #4
 8002a74:	8812      	ldrh	r2, [r2, #0]
 8002a76:	4611      	mov	r1, r2
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	8812      	ldrh	r2, [r2, #0]
 8002a7e:	1a8a      	subs	r2, r1, r2
 8002a80:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3308      	adds	r3, #8
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	3104      	adds	r1, #4
 8002a96:	8809      	ldrh	r1, [r1, #0]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	3108      	adds	r1, #8
 8002a9e:	8809      	ldrh	r1, [r1, #0]
 8002aa0:	1a41      	subs	r1, r0, r1
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8002aa6:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd15 	bl	80004d8 <__aeabi_i2d>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	3308      	adds	r3, #8
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].x)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3304      	adds	r3, #4
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	8852      	ldrh	r2, [r2, #2]
 8002ae2:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	4619      	mov	r1, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3308      	adds	r3, #8
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].x)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	3308      	adds	r3, #8
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	fb00 f303 	mul.w	r3, r0, r3
 8002b06:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	3104      	adds	r1, #4
 8002b0c:	8849      	ldrh	r1, [r1, #2]
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8002b12:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	3304      	adds	r3, #4
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].x)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	fb00 f303 	mul.w	r3, r0, r3
 8002b34:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	3108      	adds	r1, #8
 8002b3a:	8849      	ldrh	r1, [r1, #2]
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8002b40:	4413      	add	r3, r2
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fcc8 	bl	80004d8 <__aeabi_i2d>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	885b      	ldrh	r3, [r3, #2]
 8002b56:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].y)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	885b      	ldrh	r3, [r3, #2]
 8002b5e:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	3204      	adds	r2, #4
 8002b64:	8852      	ldrh	r2, [r2, #2]
 8002b66:	4611      	mov	r1, r2
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	3208      	adds	r2, #8
 8002b6c:	8852      	ldrh	r2, [r2, #2]
 8002b6e:	1a8a      	subs	r2, r1, r2
 8002b70:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3304      	adds	r3, #4
 8002b78:	885b      	ldrh	r3, [r3, #2]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3308      	adds	r3, #8
 8002b80:	885b      	ldrh	r3, [r3, #2]
 8002b82:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	8849      	ldrh	r1, [r1, #2]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	3108      	adds	r1, #8
 8002b8e:	8849      	ldrh	r1, [r1, #2]
 8002b90:	1a41      	subs	r1, r0, r1
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8002b96:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fc9d 	bl	80004d8 <__aeabi_i2d>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y))
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	3204      	adds	r2, #4
 8002bba:	8852      	ldrh	r2, [r2, #2]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	8852      	ldrh	r2, [r2, #2]
 8002bc4:	1a8a      	subs	r2, r1, r2
 8002bc6:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	885b      	ldrh	r3, [r3, #2]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	885b      	ldrh	r3, [r3, #2]
 8002bd6:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	3104      	adds	r1, #4
 8002bdc:	8809      	ldrh	r1, [r1, #0]
 8002bde:	4608      	mov	r0, r1
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	3108      	adds	r1, #8
 8002be4:	8809      	ldrh	r1, [r1, #0]
 8002be6:	1a41      	subs	r1, r0, r1
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8002bec:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd fc72 	bl	80004d8 <__aeabi_i2d>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	e9c1 2308 	strd	r2, r3, [r1, #32]

		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	3308      	adds	r3, #8
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	885b      	ldrh	r3, [r3, #2]
 8002c0c:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].y)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	3304      	adds	r3, #4
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	4619      	mov	r1, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	885b      	ldrh	r3, [r3, #2]
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	8852      	ldrh	r2, [r2, #2]
 8002c28:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3308      	adds	r3, #8
 8002c36:	885b      	ldrh	r3, [r3, #2]
 8002c38:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].y)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	3308      	adds	r3, #8
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	885b      	ldrh	r3, [r3, #2]
 8002c48:	fb00 f303 	mul.w	r3, r0, r3
 8002c4c:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	3104      	adds	r1, #4
 8002c52:	8849      	ldrh	r1, [r1, #2]
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8002c58:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	885b      	ldrh	r3, [r3, #2]
 8002c66:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].y)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3304      	adds	r3, #4
 8002c74:	885b      	ldrh	r3, [r3, #2]
 8002c76:	fb00 f303 	mul.w	r3, r0, r3
 8002c7a:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	3108      	adds	r1, #8
 8002c80:	8849      	ldrh	r1, [r1, #2]
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8002c86:	4413      	add	r3, r2
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fc25 	bl	80004d8 <__aeabi_i2d>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	}

	return ucRet;
 8002c98:	7dfb      	ldrb	r3, [r7, #23]

}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <XPT2046_Touch_Calibrate>:

uint8_t XPT2046_Touch_Calibrate(void) {
 8002ca4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ca8:	b0a0      	sub	sp, #128	; 0x80
 8002caa:	af02      	add	r7, sp, #8
	uint8_t i;

	char cStr[10];

	uint16_t usScreenWidth, usScreenHeigth;
	uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	char *pStr = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	66bb      	str	r3, [r7, #104]	; 0x68
	strType_XPT2046_Coordinate strCrossCoordinate[4], strScreenSample[4];

	strType_XPT2046_Calibration CalibrationFactor;

#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	usScreenWidth = LCD_Default_Max_Width;
 8002cc8:	23f0      	movs	r3, #240	; 0xf0
 8002cca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	usScreenHeigth = LCD_Default_Max_Heigth;
 8002cce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002cd2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	    usScreenWidth = LCD_Default_Max_Heigth;
	    usScreenHeigth = LCD_Default_Max_Width;
	
	  #endif

	strCrossCoordinate[0].x = usScreenWidth >> 2;
 8002cd6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	strCrossCoordinate[0].y = usScreenHeigth >> 2;
 8002ce2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8002cee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002cf2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8002cf6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	109b      	asrs	r3, r3, #2
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8002d08:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	109b      	asrs	r3, r3, #2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 8002d1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d1e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8002d22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002d26:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8002d2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d2e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	LCD_GramScan(1);
 8002d32:	2001      	movs	r0, #1
 8002d34:	f7fe fd4a 	bl	80017cc <LCD_GramScan>

	for (i = 0; i < 4; i++) {
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d3e:	e047      	b.n	8002dd0 <XPT2046_Touch_Calibrate+0x12c>
		LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8002d40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d44:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7fe fc46 	bl	80015dc <LCD_Clear>

		pStr = "Touch Calibrate ......";
 8002d50:	4bb6      	ldr	r3, [pc, #728]	; (800302c <XPT2046_Touch_Calibrate+0x388>)
 8002d52:	66bb      	str	r3, [r7, #104]	; 0x68
		LCD_DrawString_Color(
				(usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1,
 8002d54:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8002d58:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002d5a:	f7fd fa63 	bl	8000224 <strlen>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	3b07      	subs	r3, #7
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	1ae3      	subs	r3, r4, r3
 8002d66:	085b      	lsrs	r3, r3, #1
		LCD_DrawString_Color(
 8002d68:	b298      	uxth	r0, r3
 8002d6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	b299      	uxth	r1, r3
 8002d72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d7e:	f7fe fcef 	bl	8001760 <LCD_DrawString_Color>
		/*
		sprintf(cStr, "%d", i + 1);
		LCD_DrawString_Color(usScreenWidth >> 1,
				(usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
		*/
		XPT2046_DelayUS(100000);
 8002d82:	48ab      	ldr	r0, [pc, #684]	; (8003030 <XPT2046_Touch_Calibrate+0x38c>)
 8002d84:	f7ff fc22 	bl	80025cc <XPT2046_DelayUS>

		LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 8002d88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	3378      	adds	r3, #120	; 0x78
 8002d90:	443b      	add	r3, r7
 8002d92:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002d96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	3378      	adds	r3, #120	; 0x78
 8002d9e:	443b      	add	r3, r7
 8002da0:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 8002da4:	4619      	mov	r1, r3
 8002da6:	4610      	mov	r0, r2
 8002da8:	f7fe fcb8 	bl	800171c <LCD_DrawCross>

		while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]))
 8002dac:	bf00      	nop
 8002dae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002db2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fcce 	bl	800275c <XPT2046_ReadAdc_Smooth_XY>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f3      	beq.n	8002dae <XPT2046_Touch_Calibrate+0x10a>
	for (i = 0; i < 4; i++) {
 8002dc6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002dd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d9b3      	bls.n	8002d40 <XPT2046_Touch_Calibrate+0x9c>
			;

	}

	XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample,
 8002dd8:	463a      	mov	r2, r7
 8002dda:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002dde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fdd0 	bl	8002988 <XPT2046_Calculate_CalibrationFactor>
			&CalibrationFactor);

	if (CalibrationFactor.Divider == 0)
 8002de8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	f7fd fe42 	bl	8000a7c <__aeabi_dcmpeq>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 8113 	bne.w	8003026 <XPT2046_Touch_Calibrate+0x382>
		goto Failure;

	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 8002e00:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fb65 	bl	80004d8 <__aeabi_i2d>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	f7fd fbc9 	bl	80005ac <__aeabi_dmul>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4699      	mov	r9, r3
			+ (CalibrationFactor.Bn * strScreenSample[3].y)
 8002e22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fb54 	bl	80004d8 <__aeabi_i2d>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4620      	mov	r0, r4
 8002e36:	4629      	mov	r1, r5
 8002e38:	f7fd fbb8 	bl	80005ac <__aeabi_dmul>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4640      	mov	r0, r8
 8002e42:	4649      	mov	r1, r9
 8002e44:	f7fd f9fc 	bl	8000240 <__adddf3>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
			+ CalibrationFactor.Cn) / CalibrationFactor.Divider;
 8002e50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e54:	f7fd f9f4 	bl	8000240 <__adddf3>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e64:	f7fd fccc 	bl	8000800 <__aeabi_ddiv>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f7fd fe36 	bl	8000ae0 <__aeabi_d2uiz>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 8002e7a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002e7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd fb28 	bl	80004d8 <__aeabi_i2d>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4629      	mov	r1, r5
 8002e90:	f7fd fb8c 	bl	80005ac <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4690      	mov	r8, r2
 8002e9a:	4699      	mov	r9, r3
			+ (CalibrationFactor.En * strScreenSample[3].y)
 8002e9c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ea0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fb17 	bl	80004d8 <__aeabi_i2d>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4620      	mov	r0, r4
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	f7fd fb7b 	bl	80005ac <__aeabi_dmul>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4640      	mov	r0, r8
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	f7fd f9bf 	bl	8000240 <__adddf3>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
			+ CalibrationFactor.Fn) / CalibrationFactor.Divider;
 8002eca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ece:	f7fd f9b7 	bl	8000240 <__adddf3>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ede:	f7fd fc8f 	bl	8000800 <__aeabi_ddiv>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f7fd fdf9 	bl	8000ae0 <__aeabi_d2uiz>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	usGap_x =
			(usTest_x > strCrossCoordinate[3].x) ?
 8002ef4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8002ef8:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d906      	bls.n	8002f0e <XPT2046_Touch_Calibrate+0x26a>
					(usTest_x - strCrossCoordinate[3].x) :
 8002f00:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8002f04:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	e005      	b.n	8002f1a <XPT2046_Touch_Calibrate+0x276>
					(strCrossCoordinate[3].x - usTest_x);
 8002f0e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
	usGap_x =
 8002f12:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	usGap_y =
			(usTest_y > strCrossCoordinate[3].y) ?
 8002f1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 8002f22:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d906      	bls.n	8002f38 <XPT2046_Touch_Calibrate+0x294>
					(usTest_y - strCrossCoordinate[3].y) :
 8002f2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 8002f2e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	e005      	b.n	8002f44 <XPT2046_Touch_Calibrate+0x2a0>
					(strCrossCoordinate[3].y - usTest_y);
 8002f38:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
	usGap_y =
 8002f3c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((usGap_x > 10) || (usGap_y > 10))
 8002f48:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002f4c:	2b0a      	cmp	r3, #10
 8002f4e:	d877      	bhi.n	8003040 <XPT2046_Touch_Calibrate+0x39c>
 8002f50:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002f54:	2b0a      	cmp	r3, #10
 8002f56:	d873      	bhi.n	8003040 <XPT2046_Touch_Calibrate+0x39c>
		goto Failure;

	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 8002f58:	e9d7 0100 	ldrd	r0, r1, [r7]
			/ CalibrationFactor.Divider;
 8002f5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f60:	f7fd fc4e 	bl	8000800 <__aeabi_ddiv>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 8002f68:	4932      	ldr	r1, [pc, #200]	; (8003034 <XPT2046_Touch_Calibrate+0x390>)
 8002f6a:	e9c1 2300 	strd	r2, r3, [r1]
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 8002f6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
			/ CalibrationFactor.Divider;
 8002f72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f76:	f7fd fc43 	bl	8000800 <__aeabi_ddiv>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 8002f7e:	492d      	ldr	r1, [pc, #180]	; (8003034 <XPT2046_Touch_Calibrate+0x390>)
 8002f80:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8002f84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
			/ CalibrationFactor.Divider;
 8002f88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f8c:	f7fd fc38 	bl	8000800 <__aeabi_ddiv>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8002f94:	4927      	ldr	r1, [pc, #156]	; (8003034 <XPT2046_Touch_Calibrate+0x390>)
 8002f96:	e9c1 2304 	strd	r2, r3, [r1, #16]

	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 8002f9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
			/ CalibrationFactor.Divider;
 8002f9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fa2:	f7fd fc2d 	bl	8000800 <__aeabi_ddiv>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 8002faa:	4922      	ldr	r1, [pc, #136]	; (8003034 <XPT2046_Touch_Calibrate+0x390>)
 8002fac:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8002fb0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
			/ CalibrationFactor.Divider;
 8002fb4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fb8:	f7fd fc22 	bl	8000800 <__aeabi_ddiv>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8002fc0:	491c      	ldr	r1, [pc, #112]	; (8003034 <XPT2046_Touch_Calibrate+0x390>)
 8002fc2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 8002fc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
			/ CalibrationFactor.Divider;
 8002fca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fce:	f7fd fc17 	bl	8000800 <__aeabi_ddiv>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 8002fd6:	4917      	ldr	r1, [pc, #92]	; (8003034 <XPT2046_Touch_Calibrate+0x390>)
 8002fd8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

#endif

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8002fdc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002fe0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fe faf8 	bl	80015dc <LCD_Clear>

	pStr = "Welcome !";
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <XPT2046_Touch_Calibrate+0x394>)
 8002fee:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8002ff0:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8002ff4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002ff6:	f7fd f915 	bl	8000224 <strlen>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	1ae3      	subs	r3, r4, r3
 8003000:	085b      	lsrs	r3, r3, #1
 8003002:	b298      	uxth	r0, r3
 8003004:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	b299      	uxth	r1, r3
 800300c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003016:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003018:	f7fe fba2 	bl	8001760 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(200000);
 800301c:	4807      	ldr	r0, [pc, #28]	; (800303c <XPT2046_Touch_Calibrate+0x398>)
 800301e:	f7ff fad5 	bl	80025cc <XPT2046_DelayUS>

	return 1;
 8003022:	2301      	movs	r3, #1
 8003024:	e04b      	b.n	80030be <XPT2046_Touch_Calibrate+0x41a>
		goto Failure;
 8003026:	bf00      	nop
 8003028:	e00b      	b.n	8003042 <XPT2046_Touch_Calibrate+0x39e>
 800302a:	bf00      	nop
 800302c:	08006e00 	.word	0x08006e00
 8003030:	000186a0 	.word	0x000186a0
 8003034:	20000008 	.word	0x20000008
 8003038:	08006e18 	.word	0x08006e18
 800303c:	00030d40 	.word	0x00030d40
		goto Failure;
 8003040:	bf00      	nop

	Failure:

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8003042:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003046:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800304a:	2100      	movs	r1, #0
 800304c:	2000      	movs	r0, #0
 800304e:	f7fe fac5 	bl	80015dc <LCD_Clear>

	pStr = "Calibrate fail";
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <XPT2046_Touch_Calibrate+0x424>)
 8003054:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8003056:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800305a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800305c:	f7fd f8e2 	bl	8000224 <strlen>
 8003060:	4603      	mov	r3, r0
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	1ae3      	subs	r3, r4, r3
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	b298      	uxth	r0, r3
 800306a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	b299      	uxth	r1, r3
 8003072:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800307c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800307e:	f7fe fb6f 	bl	8001760 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	pStr = "try again";
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <XPT2046_Touch_Calibrate+0x428>)
 8003084:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8003086:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800308a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800308c:	f7fd f8ca 	bl	8000224 <strlen>
 8003090:	4603      	mov	r3, r0
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1ae3      	subs	r3, r4, r3
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	b298      	uxth	r0, r3
 800309a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3310      	adds	r3, #16
 80030a4:	b299      	uxth	r1, r3
 80030a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030b2:	f7fe fb55 	bl	8001760 <LCD_DrawString_Color>
			(usScreenHeigth >> 1) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(1000000);
 80030b6:	4806      	ldr	r0, [pc, #24]	; (80030d0 <XPT2046_Touch_Calibrate+0x42c>)
 80030b8:	f7ff fa88 	bl	80025cc <XPT2046_DelayUS>

	return 0;
 80030bc:	2300      	movs	r3, #0

}
 80030be:	4618      	mov	r0, r3
 80030c0:	3778      	adds	r7, #120	; 0x78
 80030c2:	46bd      	mov	sp, r7
 80030c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030c8:	08006e24 	.word	0x08006e24
 80030cc:	08006e34 	.word	0x08006e34
 80030d0:	000f4240 	.word	0x000f4240

080030d4 <XPT2046_Get_TouchedPoint>:

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 80030d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 80030e4:	f107 0308 	add.w	r3, r7, #8
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fb37 	bl	800275c <XPT2046_ReadAdc_Smooth_XY>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d06e      	beq.n	80031d2 <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80030fa:	893b      	ldrh	r3, [r7, #8]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd f9eb 	bl	80004d8 <__aeabi_i2d>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4620      	mov	r0, r4
 8003108:	4629      	mov	r1, r5
 800310a:	f7fd fa4f 	bl	80005ac <__aeabi_dmul>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4690      	mov	r8, r2
 8003114:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800311c:	897b      	ldrh	r3, [r7, #10]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd f9da 	bl	80004d8 <__aeabi_i2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4620      	mov	r0, r4
 800312a:	4629      	mov	r1, r5
 800312c:	f7fd fa3e 	bl	80005ac <__aeabi_dmul>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4640      	mov	r0, r8
 8003136:	4649      	mov	r1, r9
 8003138:	f7fd f882 	bl	8000240 <__adddf3>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800314a:	f7fd f879 	bl	8000240 <__adddf3>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	f7fd fcc3 	bl	8000ae0 <__aeabi_d2uiz>
 800315a:	4603      	mov	r3, r0
 800315c:	b29a      	uxth	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003168:	893b      	ldrh	r3, [r7, #8]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd f9b4 	bl	80004d8 <__aeabi_i2d>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4620      	mov	r0, r4
 8003176:	4629      	mov	r1, r5
 8003178:	f7fd fa18 	bl	80005ac <__aeabi_dmul>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4690      	mov	r8, r2
 8003182:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800318a:	897b      	ldrh	r3, [r7, #10]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd f9a3 	bl	80004d8 <__aeabi_i2d>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4620      	mov	r0, r4
 8003198:	4629      	mov	r1, r5
 800319a:	f7fd fa07 	bl	80005ac <__aeabi_dmul>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4640      	mov	r0, r8
 80031a4:	4649      	mov	r1, r9
 80031a6:	f7fd f84b 	bl	8000240 <__adddf3>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80031b8:	f7fd f842 	bl	8000240 <__adddf3>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	f7fd fc8c 	bl	8000ae0 <__aeabi_d2uiz>
 80031c8:	4603      	mov	r3, r0
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	805a      	strh	r2, [r3, #2]
 80031d0:	e001      	b.n	80031d6 <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]

}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080031e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80031e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80031e6:	e003      	b.n	80031f0 <LoopCopyDataInit>

080031e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80031ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80031ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80031ee:	3104      	adds	r1, #4

080031f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80031f0:	480a      	ldr	r0, [pc, #40]	; (800321c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80031f2:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80031f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80031f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031f8:	d3f6      	bcc.n	80031e8 <CopyDataInit>
  ldr r2, =_sbss
 80031fa:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031fc:	e002      	b.n	8003204 <LoopFillZerobss>

080031fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003200:	f842 3b04 	str.w	r3, [r2], #4

08003204 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003206:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003208:	d3f9      	bcc.n	80031fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800320a:	f7fe fdff 	bl	8001e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800320e:	f003 f93f 	bl	8006490 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003212:	f7fe fb8d 	bl	8001930 <main>
  bx lr
 8003216:	4770      	bx	lr
  ldr r3, =_sidata
 8003218:	08007494 	.word	0x08007494
  ldr r0, =_sdata
 800321c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003220:	200000a4 	.word	0x200000a4
  ldr r2, =_sbss
 8003224:	200000a4 	.word	0x200000a4
  ldr r3, = _ebss
 8003228:	200007b0 	.word	0x200007b0

0800322c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800322c:	e7fe      	b.n	800322c <ADC1_2_IRQHandler>
	...

08003230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_Init+0x28>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a07      	ldr	r2, [pc, #28]	; (8003258 <HAL_Init+0x28>)
 800323a:	f043 0310 	orr.w	r3, r3, #16
 800323e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003240:	2003      	movs	r0, #3
 8003242:	f000 fb5f 	bl	8003904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003246:	2000      	movs	r0, #0
 8003248:	f000 f808 	bl	800325c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800324c:	f7fe fc9a 	bl	8001b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40022000 	.word	0x40022000

0800325c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_InitTick+0x54>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_InitTick+0x58>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4619      	mov	r1, r3
 800326e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003272:	fbb3 f3f1 	udiv	r3, r3, r1
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fb77 	bl	800396e <HAL_SYSTICK_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e00e      	b.n	80032a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b0f      	cmp	r3, #15
 800328e:	d80a      	bhi.n	80032a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003290:	2200      	movs	r2, #0
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003298:	f000 fb3f 	bl	800391a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800329c:	4a06      	ldr	r2, [pc, #24]	; (80032b8 <HAL_InitTick+0x5c>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e000      	b.n	80032a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000004 	.word	0x20000004
 80032b4:	2000003c 	.word	0x2000003c
 80032b8:	20000038 	.word	0x20000038

080032bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_IncTick+0x1c>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_IncTick+0x20>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	4a03      	ldr	r2, [pc, #12]	; (80032dc <HAL_IncTick+0x20>)
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	2000003c 	.word	0x2000003c
 80032dc:	2000079c 	.word	0x2000079c

080032e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return uwTick;
 80032e4:	4b02      	ldr	r3, [pc, #8]	; (80032f0 <HAL_GetTick+0x10>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	2000079c 	.word	0x2000079c

080032f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032fc:	f7ff fff0 	bl	80032e0 <HAL_GetTick>
 8003300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800330c:	d005      	beq.n	800331a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_Delay+0x44>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800331a:	bf00      	nop
 800331c:	f7ff ffe0 	bl	80032e0 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	429a      	cmp	r2, r3
 800332a:	d8f7      	bhi.n	800331c <HAL_Delay+0x28>
  {
  }
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	2000003c 	.word	0x2000003c

0800333c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e0ce      	b.n	80034fc <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	2b00      	cmp	r3, #0
 800336a:	d109      	bne.n	8003380 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fd fc0e 	bl	8000b9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f9bd 	bl	8003700 <ADC_ConversionStop_Disable>
 8003386:	4603      	mov	r3, r0
 8003388:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 80a9 	bne.w	80034ea <HAL_ADC_Init+0x1ae>
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 80a5 	bne.w	80034ea <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033a8:	f023 0302 	bic.w	r3, r3, #2
 80033ac:	f043 0202 	orr.w	r2, r3, #2
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4951      	ldr	r1, [pc, #324]	; (8003504 <HAL_ADC_Init+0x1c8>)
 80033be:	428b      	cmp	r3, r1
 80033c0:	d10a      	bne.n	80033d8 <HAL_ADC_Init+0x9c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033ca:	d002      	beq.n	80033d2 <HAL_ADC_Init+0x96>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	e004      	b.n	80033dc <HAL_ADC_Init+0xa0>
 80033d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033d6:	e001      	b.n	80033dc <HAL_ADC_Init+0xa0>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80033dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80033e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f4:	d003      	beq.n	80033fe <HAL_ADC_Init+0xc2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d102      	bne.n	8003404 <HAL_ADC_Init+0xc8>
 80033fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003402:	e000      	b.n	8003406 <HAL_ADC_Init+0xca>
 8003404:	2300      	movs	r3, #0
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d119      	bne.n	8003448 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	3b01      	subs	r3, #1
 8003422:	035a      	lsls	r2, r3, #13
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	e00b      	b.n	8003448 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	f043 0201 	orr.w	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	430a      	orrs	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_ADC_Init+0x1cc>)
 8003464:	4013      	ands	r3, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	430b      	orrs	r3, r1
 800346e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003478:	d003      	beq.n	8003482 <HAL_ADC_Init+0x146>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d104      	bne.n	800348c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	3b01      	subs	r3, #1
 8003488:	051b      	lsls	r3, r3, #20
 800348a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	430a      	orrs	r2, r1
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_ADC_Init+0x1d0>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d10b      	bne.n	80034c8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034c6:	e018      	b.n	80034fa <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	f023 0312 	bic.w	r3, r3, #18
 80034d0:	f043 0210 	orr.w	r2, r3, #16
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	f043 0201 	orr.w	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034e8:	e007      	b.n	80034fa <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	f043 0210 	orr.w	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40013c00 	.word	0x40013c00
 8003508:	ffe1f7fd 	.word	0xffe1f7fd
 800350c:	ff1f0efe 	.word	0xff1f0efe

08003510 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x20>
 800352c:	2302      	movs	r3, #2
 800352e:	e0dc      	b.n	80036ea <HAL_ADC_ConfigChannel+0x1da>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b06      	cmp	r3, #6
 800353e:	d81c      	bhi.n	800357a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	3b05      	subs	r3, #5
 8003552:	221f      	movs	r2, #31
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	4019      	ands	r1, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	3b05      	subs	r3, #5
 800356c:	fa00 f203 	lsl.w	r2, r0, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	635a      	str	r2, [r3, #52]	; 0x34
 8003578:	e03c      	b.n	80035f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d81c      	bhi.n	80035bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	3b23      	subs	r3, #35	; 0x23
 8003594:	221f      	movs	r2, #31
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	4019      	ands	r1, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	3b23      	subs	r3, #35	; 0x23
 80035ae:	fa00 f203 	lsl.w	r2, r0, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
 80035ba:	e01b      	b.n	80035f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	3b41      	subs	r3, #65	; 0x41
 80035ce:	221f      	movs	r2, #31
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	4019      	ands	r1, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	3b41      	subs	r3, #65	; 0x41
 80035e8:	fa00 f203 	lsl.w	r2, r0, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b09      	cmp	r3, #9
 80035fa:	d91c      	bls.n	8003636 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68d9      	ldr	r1, [r3, #12]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	3b1e      	subs	r3, #30
 800360e:	2207      	movs	r2, #7
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	4019      	ands	r1, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6898      	ldr	r0, [r3, #8]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	3b1e      	subs	r3, #30
 8003628:	fa00 f203 	lsl.w	r2, r0, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	e019      	b.n	800366a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6919      	ldr	r1, [r3, #16]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	2207      	movs	r2, #7
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	4019      	ands	r1, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	6898      	ldr	r0, [r3, #8]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	fa00 f203 	lsl.w	r2, r0, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b10      	cmp	r3, #16
 8003670:	d003      	beq.n	800367a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003676:	2b11      	cmp	r3, #17
 8003678:	d132      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1d      	ldr	r2, [pc, #116]	; (80036f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d125      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d126      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80036a0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b10      	cmp	r3, #16
 80036a8:	d11a      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a13      	ldr	r2, [pc, #76]	; (80036fc <HAL_ADC_ConfigChannel+0x1ec>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	0c9a      	lsrs	r2, r3, #18
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036c0:	e002      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f9      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x1b2>
 80036ce:	e007      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	f043 0220 	orr.w	r2, r3, #32
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr
 80036f4:	40012400 	.word	0x40012400
 80036f8:	20000004 	.word	0x20000004
 80036fc:	431bde83 	.word	0x431bde83

08003700 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d127      	bne.n	800376a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800372a:	f7ff fdd9 	bl	80032e0 <HAL_GetTick>
 800372e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003730:	e014      	b.n	800375c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003732:	f7ff fdd5 	bl	80032e0 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d90d      	bls.n	800375c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	f043 0210 	orr.w	r2, r3, #16
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	f043 0201 	orr.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e007      	b.n	800376c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d0e3      	beq.n	8003732 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <NVIC_SetPriorityGrouping+0x44>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003790:	4013      	ands	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800379c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a6:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <NVIC_SetPriorityGrouping+0x44>)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	60d3      	str	r3, [r2, #12]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <NVIC_GetPriorityGrouping+0x18>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	f003 0307 	and.w	r3, r3, #7
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4906      	ldr	r1, [pc, #24]	; (8003804 <NVIC_EnableIRQ+0x2c>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100

08003808 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	6039      	str	r1, [r7, #0]
 8003812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003818:	2b00      	cmp	r3, #0
 800381a:	da0b      	bge.n	8003834 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	490c      	ldr	r1, [pc, #48]	; (8003854 <NVIC_SetPriority+0x4c>)
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	3b04      	subs	r3, #4
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	440b      	add	r3, r1
 8003830:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003832:	e009      	b.n	8003848 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	4907      	ldr	r1, [pc, #28]	; (8003858 <NVIC_SetPriority+0x50>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	440b      	add	r3, r1
 8003844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000ed00 	.word	0xe000ed00
 8003858:	e000e100 	.word	0xe000e100

0800385c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f1c3 0307 	rsb	r3, r3, #7
 8003876:	2b04      	cmp	r3, #4
 8003878:	bf28      	it	cs
 800387a:	2304      	movcs	r3, #4
 800387c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3304      	adds	r3, #4
 8003882:	2b06      	cmp	r3, #6
 8003884:	d902      	bls.n	800388c <NVIC_EncodePriority+0x30>
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3b03      	subs	r3, #3
 800388a:	e000      	b.n	800388e <NVIC_EncodePriority+0x32>
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	401a      	ands	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	43d9      	mvns	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b4:	4313      	orrs	r3, r2
         );
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3724      	adds	r7, #36	; 0x24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d0:	d301      	bcc.n	80038d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00f      	b.n	80038f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <SysTick_Config+0x40>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038de:	210f      	movs	r1, #15
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e4:	f7ff ff90 	bl	8003808 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <SysTick_Config+0x40>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ee:	4b04      	ldr	r3, [pc, #16]	; (8003900 <SysTick_Config+0x40>)
 80038f0:	2207      	movs	r2, #7
 80038f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	e000e010 	.word	0xe000e010

08003904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff31 	bl	8003774 <NVIC_SetPriorityGrouping>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	4603      	mov	r3, r0
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800392c:	f7ff ff46 	bl	80037bc <NVIC_GetPriorityGrouping>
 8003930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	6978      	ldr	r0, [r7, #20]
 8003938:	f7ff ff90 	bl	800385c <NVIC_EncodePriority>
 800393c:	4602      	mov	r2, r0
 800393e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff5f 	bl	8003808 <NVIC_SetPriority>
}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	4603      	mov	r3, r0
 800395a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800395c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff39 	bl	80037d8 <NVIC_EnableIRQ>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ffa2 	bl	80038c0 <SysTick_Config>
 800397c:	4603      	mov	r3, r0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800399a:	2b02      	cmp	r3, #2
 800399c:	d005      	beq.n	80039aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2204      	movs	r2, #4
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
 80039a8:	e0d6      	b.n	8003b58 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 020e 	bic.w	r2, r2, #14
 80039b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0201 	bic.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	4b64      	ldr	r3, [pc, #400]	; (8003b64 <HAL_DMA_Abort_IT+0x1dc>)
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d958      	bls.n	8003a88 <HAL_DMA_Abort_IT+0x100>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a63      	ldr	r2, [pc, #396]	; (8003b68 <HAL_DMA_Abort_IT+0x1e0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d04f      	beq.n	8003a80 <HAL_DMA_Abort_IT+0xf8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a61      	ldr	r2, [pc, #388]	; (8003b6c <HAL_DMA_Abort_IT+0x1e4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d048      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xf4>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a60      	ldr	r2, [pc, #384]	; (8003b70 <HAL_DMA_Abort_IT+0x1e8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d040      	beq.n	8003a76 <HAL_DMA_Abort_IT+0xee>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a5e      	ldr	r2, [pc, #376]	; (8003b74 <HAL_DMA_Abort_IT+0x1ec>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d038      	beq.n	8003a70 <HAL_DMA_Abort_IT+0xe8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a5d      	ldr	r2, [pc, #372]	; (8003b78 <HAL_DMA_Abort_IT+0x1f0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d030      	beq.n	8003a6a <HAL_DMA_Abort_IT+0xe2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a5b      	ldr	r2, [pc, #364]	; (8003b7c <HAL_DMA_Abort_IT+0x1f4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d028      	beq.n	8003a64 <HAL_DMA_Abort_IT+0xdc>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a53      	ldr	r2, [pc, #332]	; (8003b64 <HAL_DMA_Abort_IT+0x1dc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d020      	beq.n	8003a5e <HAL_DMA_Abort_IT+0xd6>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a57      	ldr	r2, [pc, #348]	; (8003b80 <HAL_DMA_Abort_IT+0x1f8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d019      	beq.n	8003a5a <HAL_DMA_Abort_IT+0xd2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a56      	ldr	r2, [pc, #344]	; (8003b84 <HAL_DMA_Abort_IT+0x1fc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d012      	beq.n	8003a56 <HAL_DMA_Abort_IT+0xce>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a54      	ldr	r2, [pc, #336]	; (8003b88 <HAL_DMA_Abort_IT+0x200>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00a      	beq.n	8003a50 <HAL_DMA_Abort_IT+0xc8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a53      	ldr	r2, [pc, #332]	; (8003b8c <HAL_DMA_Abort_IT+0x204>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d102      	bne.n	8003a4a <HAL_DMA_Abort_IT+0xc2>
 8003a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a48:	e01b      	b.n	8003a82 <HAL_DMA_Abort_IT+0xfa>
 8003a4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a4e:	e018      	b.n	8003a82 <HAL_DMA_Abort_IT+0xfa>
 8003a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a54:	e015      	b.n	8003a82 <HAL_DMA_Abort_IT+0xfa>
 8003a56:	2310      	movs	r3, #16
 8003a58:	e013      	b.n	8003a82 <HAL_DMA_Abort_IT+0xfa>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e011      	b.n	8003a82 <HAL_DMA_Abort_IT+0xfa>
 8003a5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a62:	e00e      	b.n	8003a82 <HAL_DMA_Abort_IT+0xfa>
 8003a64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a68:	e00b      	b.n	8003a82 <HAL_DMA_Abort_IT+0xfa>
 8003a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a6e:	e008      	b.n	8003a82 <HAL_DMA_Abort_IT+0xfa>
 8003a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a74:	e005      	b.n	8003a82 <HAL_DMA_Abort_IT+0xfa>
 8003a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a7a:	e002      	b.n	8003a82 <HAL_DMA_Abort_IT+0xfa>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	e000      	b.n	8003a82 <HAL_DMA_Abort_IT+0xfa>
 8003a80:	2301      	movs	r3, #1
 8003a82:	4a43      	ldr	r2, [pc, #268]	; (8003b90 <HAL_DMA_Abort_IT+0x208>)
 8003a84:	6053      	str	r3, [r2, #4]
 8003a86:	e057      	b.n	8003b38 <HAL_DMA_Abort_IT+0x1b0>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a36      	ldr	r2, [pc, #216]	; (8003b68 <HAL_DMA_Abort_IT+0x1e0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d04f      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x1aa>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a35      	ldr	r2, [pc, #212]	; (8003b6c <HAL_DMA_Abort_IT+0x1e4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d048      	beq.n	8003b2e <HAL_DMA_Abort_IT+0x1a6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a33      	ldr	r2, [pc, #204]	; (8003b70 <HAL_DMA_Abort_IT+0x1e8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d040      	beq.n	8003b28 <HAL_DMA_Abort_IT+0x1a0>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a32      	ldr	r2, [pc, #200]	; (8003b74 <HAL_DMA_Abort_IT+0x1ec>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d038      	beq.n	8003b22 <HAL_DMA_Abort_IT+0x19a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a30      	ldr	r2, [pc, #192]	; (8003b78 <HAL_DMA_Abort_IT+0x1f0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d030      	beq.n	8003b1c <HAL_DMA_Abort_IT+0x194>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a2f      	ldr	r2, [pc, #188]	; (8003b7c <HAL_DMA_Abort_IT+0x1f4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d028      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x18e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a26      	ldr	r2, [pc, #152]	; (8003b64 <HAL_DMA_Abort_IT+0x1dc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d020      	beq.n	8003b10 <HAL_DMA_Abort_IT+0x188>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a2b      	ldr	r2, [pc, #172]	; (8003b80 <HAL_DMA_Abort_IT+0x1f8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d019      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x184>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a29      	ldr	r2, [pc, #164]	; (8003b84 <HAL_DMA_Abort_IT+0x1fc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d012      	beq.n	8003b08 <HAL_DMA_Abort_IT+0x180>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a28      	ldr	r2, [pc, #160]	; (8003b88 <HAL_DMA_Abort_IT+0x200>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00a      	beq.n	8003b02 <HAL_DMA_Abort_IT+0x17a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <HAL_DMA_Abort_IT+0x204>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d102      	bne.n	8003afc <HAL_DMA_Abort_IT+0x174>
 8003af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003afa:	e01b      	b.n	8003b34 <HAL_DMA_Abort_IT+0x1ac>
 8003afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b00:	e018      	b.n	8003b34 <HAL_DMA_Abort_IT+0x1ac>
 8003b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b06:	e015      	b.n	8003b34 <HAL_DMA_Abort_IT+0x1ac>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	e013      	b.n	8003b34 <HAL_DMA_Abort_IT+0x1ac>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e011      	b.n	8003b34 <HAL_DMA_Abort_IT+0x1ac>
 8003b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b14:	e00e      	b.n	8003b34 <HAL_DMA_Abort_IT+0x1ac>
 8003b16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b1a:	e00b      	b.n	8003b34 <HAL_DMA_Abort_IT+0x1ac>
 8003b1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b20:	e008      	b.n	8003b34 <HAL_DMA_Abort_IT+0x1ac>
 8003b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b26:	e005      	b.n	8003b34 <HAL_DMA_Abort_IT+0x1ac>
 8003b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b2c:	e002      	b.n	8003b34 <HAL_DMA_Abort_IT+0x1ac>
 8003b2e:	2310      	movs	r3, #16
 8003b30:	e000      	b.n	8003b34 <HAL_DMA_Abort_IT+0x1ac>
 8003b32:	2301      	movs	r3, #1
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_DMA_Abort_IT+0x20c>)
 8003b36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
    } 
  }
  return status;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40020080 	.word	0x40020080
 8003b68:	40020008 	.word	0x40020008
 8003b6c:	4002001c 	.word	0x4002001c
 8003b70:	40020030 	.word	0x40020030
 8003b74:	40020044 	.word	0x40020044
 8003b78:	40020058 	.word	0x40020058
 8003b7c:	4002006c 	.word	0x4002006c
 8003b80:	40020408 	.word	0x40020408
 8003b84:	4002041c 	.word	0x4002041c
 8003b88:	40020430 	.word	0x40020430
 8003b8c:	40020444 	.word	0x40020444
 8003b90:	40020400 	.word	0x40020400
 8003b94:	40020000 	.word	0x40020000

08003b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b08b      	sub	sp, #44	; 0x2c
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	e179      	b.n	8003eb0 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	f040 8168 	bne.w	8003eaa <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4a96      	ldr	r2, [pc, #600]	; (8003e38 <HAL_GPIO_Init+0x2a0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d05e      	beq.n	8003ca2 <HAL_GPIO_Init+0x10a>
 8003be4:	4a94      	ldr	r2, [pc, #592]	; (8003e38 <HAL_GPIO_Init+0x2a0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d875      	bhi.n	8003cd6 <HAL_GPIO_Init+0x13e>
 8003bea:	4a94      	ldr	r2, [pc, #592]	; (8003e3c <HAL_GPIO_Init+0x2a4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d058      	beq.n	8003ca2 <HAL_GPIO_Init+0x10a>
 8003bf0:	4a92      	ldr	r2, [pc, #584]	; (8003e3c <HAL_GPIO_Init+0x2a4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d86f      	bhi.n	8003cd6 <HAL_GPIO_Init+0x13e>
 8003bf6:	4a92      	ldr	r2, [pc, #584]	; (8003e40 <HAL_GPIO_Init+0x2a8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d052      	beq.n	8003ca2 <HAL_GPIO_Init+0x10a>
 8003bfc:	4a90      	ldr	r2, [pc, #576]	; (8003e40 <HAL_GPIO_Init+0x2a8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d869      	bhi.n	8003cd6 <HAL_GPIO_Init+0x13e>
 8003c02:	4a90      	ldr	r2, [pc, #576]	; (8003e44 <HAL_GPIO_Init+0x2ac>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d04c      	beq.n	8003ca2 <HAL_GPIO_Init+0x10a>
 8003c08:	4a8e      	ldr	r2, [pc, #568]	; (8003e44 <HAL_GPIO_Init+0x2ac>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d863      	bhi.n	8003cd6 <HAL_GPIO_Init+0x13e>
 8003c0e:	4a8e      	ldr	r2, [pc, #568]	; (8003e48 <HAL_GPIO_Init+0x2b0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d046      	beq.n	8003ca2 <HAL_GPIO_Init+0x10a>
 8003c14:	4a8c      	ldr	r2, [pc, #560]	; (8003e48 <HAL_GPIO_Init+0x2b0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d85d      	bhi.n	8003cd6 <HAL_GPIO_Init+0x13e>
 8003c1a:	2b12      	cmp	r3, #18
 8003c1c:	d82a      	bhi.n	8003c74 <HAL_GPIO_Init+0xdc>
 8003c1e:	2b12      	cmp	r3, #18
 8003c20:	d859      	bhi.n	8003cd6 <HAL_GPIO_Init+0x13e>
 8003c22:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <HAL_GPIO_Init+0x90>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003ca3 	.word	0x08003ca3
 8003c2c:	08003c7d 	.word	0x08003c7d
 8003c30:	08003c8f 	.word	0x08003c8f
 8003c34:	08003cd1 	.word	0x08003cd1
 8003c38:	08003cd7 	.word	0x08003cd7
 8003c3c:	08003cd7 	.word	0x08003cd7
 8003c40:	08003cd7 	.word	0x08003cd7
 8003c44:	08003cd7 	.word	0x08003cd7
 8003c48:	08003cd7 	.word	0x08003cd7
 8003c4c:	08003cd7 	.word	0x08003cd7
 8003c50:	08003cd7 	.word	0x08003cd7
 8003c54:	08003cd7 	.word	0x08003cd7
 8003c58:	08003cd7 	.word	0x08003cd7
 8003c5c:	08003cd7 	.word	0x08003cd7
 8003c60:	08003cd7 	.word	0x08003cd7
 8003c64:	08003cd7 	.word	0x08003cd7
 8003c68:	08003cd7 	.word	0x08003cd7
 8003c6c:	08003c85 	.word	0x08003c85
 8003c70:	08003c99 	.word	0x08003c99
 8003c74:	4a75      	ldr	r2, [pc, #468]	; (8003e4c <HAL_GPIO_Init+0x2b4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d013      	beq.n	8003ca2 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c7a:	e02c      	b.n	8003cd6 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	623b      	str	r3, [r7, #32]
          break;
 8003c82:	e029      	b.n	8003cd8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	623b      	str	r3, [r7, #32]
          break;
 8003c8c:	e024      	b.n	8003cd8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	3308      	adds	r3, #8
 8003c94:	623b      	str	r3, [r7, #32]
          break;
 8003c96:	e01f      	b.n	8003cd8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	623b      	str	r3, [r7, #32]
          break;
 8003ca0:	e01a      	b.n	8003cd8 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003caa:	2304      	movs	r3, #4
 8003cac:	623b      	str	r3, [r7, #32]
          break;
 8003cae:	e013      	b.n	8003cd8 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d105      	bne.n	8003cc4 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cb8:	2308      	movs	r3, #8
 8003cba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	611a      	str	r2, [r3, #16]
          break;
 8003cc2:	e009      	b.n	8003cd8 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	615a      	str	r2, [r3, #20]
          break;
 8003cce:	e003      	b.n	8003cd8 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	623b      	str	r3, [r7, #32]
          break;
 8003cd4:	e000      	b.n	8003cd8 <HAL_GPIO_Init+0x140>
          break;
 8003cd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2bff      	cmp	r3, #255	; 0xff
 8003cdc:	d801      	bhi.n	8003ce2 <HAL_GPIO_Init+0x14a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	e001      	b.n	8003ce6 <HAL_GPIO_Init+0x14e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2bff      	cmp	r3, #255	; 0xff
 8003cec:	d802      	bhi.n	8003cf4 <HAL_GPIO_Init+0x15c>
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	e002      	b.n	8003cfa <HAL_GPIO_Init+0x162>
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	3b08      	subs	r3, #8
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	210f      	movs	r1, #15
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	401a      	ands	r2, r3
 8003d0c:	6a39      	ldr	r1, [r7, #32]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	fa01 f303 	lsl.w	r3, r1, r3
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80c1 	beq.w	8003eaa <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d28:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <HAL_GPIO_Init+0x2b8>)
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	4a48      	ldr	r2, [pc, #288]	; (8003e50 <HAL_GPIO_Init+0x2b8>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6193      	str	r3, [r2, #24]
 8003d34:	4b46      	ldr	r3, [pc, #280]	; (8003e50 <HAL_GPIO_Init+0x2b8>)
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8003d40:	4a44      	ldr	r2, [pc, #272]	; (8003e54 <HAL_GPIO_Init+0x2bc>)
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	3302      	adds	r3, #2
 8003d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	220f      	movs	r2, #15
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4013      	ands	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a3c      	ldr	r2, [pc, #240]	; (8003e58 <HAL_GPIO_Init+0x2c0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d01f      	beq.n	8003dac <HAL_GPIO_Init+0x214>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a3b      	ldr	r2, [pc, #236]	; (8003e5c <HAL_GPIO_Init+0x2c4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d019      	beq.n	8003da8 <HAL_GPIO_Init+0x210>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a3a      	ldr	r2, [pc, #232]	; (8003e60 <HAL_GPIO_Init+0x2c8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_GPIO_Init+0x20c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a39      	ldr	r2, [pc, #228]	; (8003e64 <HAL_GPIO_Init+0x2cc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00d      	beq.n	8003da0 <HAL_GPIO_Init+0x208>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a38      	ldr	r2, [pc, #224]	; (8003e68 <HAL_GPIO_Init+0x2d0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <HAL_GPIO_Init+0x204>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a37      	ldr	r2, [pc, #220]	; (8003e6c <HAL_GPIO_Init+0x2d4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_GPIO_Init+0x200>
 8003d94:	2305      	movs	r3, #5
 8003d96:	e00a      	b.n	8003dae <HAL_GPIO_Init+0x216>
 8003d98:	2306      	movs	r3, #6
 8003d9a:	e008      	b.n	8003dae <HAL_GPIO_Init+0x216>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	e006      	b.n	8003dae <HAL_GPIO_Init+0x216>
 8003da0:	2303      	movs	r3, #3
 8003da2:	e004      	b.n	8003dae <HAL_GPIO_Init+0x216>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e002      	b.n	8003dae <HAL_GPIO_Init+0x216>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_GPIO_Init+0x216>
 8003dac:	2300      	movs	r3, #0
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	f002 0203 	and.w	r2, r2, #3
 8003db4:	0092      	lsls	r2, r2, #2
 8003db6:	4093      	lsls	r3, r2
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8003dbe:	4925      	ldr	r1, [pc, #148]	; (8003e54 <HAL_GPIO_Init+0x2bc>)
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d006      	beq.n	8003de6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4924      	ldr	r1, [pc, #144]	; (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	600b      	str	r3, [r1, #0]
 8003de4:	e006      	b.n	8003df4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003de6:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	4920      	ldr	r1, [pc, #128]	; (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d006      	beq.n	8003e0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	491a      	ldr	r1, [pc, #104]	; (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
 8003e0c:	e006      	b.n	8003e1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e0e:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	4916      	ldr	r1, [pc, #88]	; (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d025      	beq.n	8003e74 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e28:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	4910      	ldr	r1, [pc, #64]	; (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	608b      	str	r3, [r1, #8]
 8003e34:	e025      	b.n	8003e82 <HAL_GPIO_Init+0x2ea>
 8003e36:	bf00      	nop
 8003e38:	10320000 	.word	0x10320000
 8003e3c:	10310000 	.word	0x10310000
 8003e40:	10220000 	.word	0x10220000
 8003e44:	10210000 	.word	0x10210000
 8003e48:	10120000 	.word	0x10120000
 8003e4c:	10110000 	.word	0x10110000
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40010800 	.word	0x40010800
 8003e5c:	40010c00 	.word	0x40010c00
 8003e60:	40011000 	.word	0x40011000
 8003e64:	40011400 	.word	0x40011400
 8003e68:	40011800 	.word	0x40011800
 8003e6c:	40011c00 	.word	0x40011c00
 8003e70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <HAL_GPIO_Init+0x32c>)
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	4911      	ldr	r1, [pc, #68]	; (8003ec4 <HAL_GPIO_Init+0x32c>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d006      	beq.n	8003e9c <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <HAL_GPIO_Init+0x32c>)
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	490c      	ldr	r1, [pc, #48]	; (8003ec4 <HAL_GPIO_Init+0x32c>)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60cb      	str	r3, [r1, #12]
 8003e9a:	e006      	b.n	8003eaa <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_GPIO_Init+0x32c>)
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	4907      	ldr	r1, [pc, #28]	; (8003ec4 <HAL_GPIO_Init+0x32c>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	3301      	adds	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	2b0f      	cmp	r3, #15
 8003eb4:	f67f ae82 	bls.w	8003bbc <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	372c      	adds	r7, #44	; 0x2c
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	e001      	b.n	8003eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	460b      	mov	r3, r1
 8003f00:	807b      	strh	r3, [r7, #2]
 8003f02:	4613      	mov	r3, r2
 8003f04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f06:	787b      	ldrb	r3, [r7, #1]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f0c:	887a      	ldrh	r2, [r7, #2]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f12:	e003      	b.n	8003f1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f14:	887b      	ldrh	r3, [r7, #2]
 8003f16:	041a      	lsls	r2, r3, #16
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	611a      	str	r2, [r3, #16]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d006      	beq.n	8003f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f3e:	4a05      	ldr	r2, [pc, #20]	; (8003f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f806 	bl	8003f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40010400 	.word	0x40010400

08003f58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8087 	beq.w	8004094 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f86:	4b92      	ldr	r3, [pc, #584]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d00c      	beq.n	8003fac <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f92:	4b8f      	ldr	r3, [pc, #572]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d112      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x58>
 8003f9e:	4b8c      	ldr	r3, [pc, #560]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	4b88      	ldr	r3, [pc, #544]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d06c      	beq.n	8004092 <HAL_RCC_OscConfig+0x126>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d168      	bne.n	8004092 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e22d      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCC_OscConfig+0x70>
 8003fce:	4b80      	ldr	r3, [pc, #512]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a7f      	ldr	r2, [pc, #508]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e02e      	b.n	800403a <HAL_RCC_OscConfig+0xce>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10c      	bne.n	8003ffe <HAL_RCC_OscConfig+0x92>
 8003fe4:	4b7a      	ldr	r3, [pc, #488]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a79      	ldr	r2, [pc, #484]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b77      	ldr	r3, [pc, #476]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a76      	ldr	r2, [pc, #472]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8003ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	e01d      	b.n	800403a <HAL_RCC_OscConfig+0xce>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004006:	d10c      	bne.n	8004022 <HAL_RCC_OscConfig+0xb6>
 8004008:	4b71      	ldr	r3, [pc, #452]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a70      	ldr	r2, [pc, #448]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 800400e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	4b6e      	ldr	r3, [pc, #440]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a6d      	ldr	r2, [pc, #436]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 800401a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e00b      	b.n	800403a <HAL_RCC_OscConfig+0xce>
 8004022:	4b6b      	ldr	r3, [pc, #428]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a6a      	ldr	r2, [pc, #424]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8004028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b68      	ldr	r3, [pc, #416]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a67      	ldr	r2, [pc, #412]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8004034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004038:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d013      	beq.n	800406a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7ff f94d 	bl	80032e0 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404a:	f7ff f949 	bl	80032e0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b64      	cmp	r3, #100	; 0x64
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e1e1      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405c:	4b5c      	ldr	r3, [pc, #368]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0xde>
 8004068:	e014      	b.n	8004094 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406a:	f7ff f939 	bl	80032e0 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004072:	f7ff f935 	bl	80032e0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b64      	cmp	r3, #100	; 0x64
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e1cd      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004084:	4b52      	ldr	r3, [pc, #328]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f0      	bne.n	8004072 <HAL_RCC_OscConfig+0x106>
 8004090:	e000      	b.n	8004094 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004092:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d063      	beq.n	8004168 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80040a0:	4b4b      	ldr	r3, [pc, #300]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00b      	beq.n	80040c4 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040ac:	4b48      	ldr	r3, [pc, #288]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d11c      	bne.n	80040f2 <HAL_RCC_OscConfig+0x186>
 80040b8:	4b45      	ldr	r3, [pc, #276]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d116      	bne.n	80040f2 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c4:	4b42      	ldr	r3, [pc, #264]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_OscConfig+0x170>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e1a1      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040dc:	4b3c      	ldr	r3, [pc, #240]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4939      	ldr	r1, [pc, #228]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f0:	e03a      	b.n	8004168 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d020      	beq.n	800413c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040fa:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <HAL_RCC_OscConfig+0x268>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7ff f8ee 	bl	80032e0 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004108:	f7ff f8ea 	bl	80032e0 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e182      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411a:	4b2d      	ldr	r3, [pc, #180]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004126:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4926      	ldr	r1, [pc, #152]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]
 800413a:	e015      	b.n	8004168 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413c:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <HAL_RCC_OscConfig+0x268>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004142:	f7ff f8cd 	bl	80032e0 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800414a:	f7ff f8c9 	bl	80032e0 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e161      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415c:	4b1c      	ldr	r3, [pc, #112]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f0      	bne.n	800414a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d039      	beq.n	80041e8 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d019      	beq.n	80041b0 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417c:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <HAL_RCC_OscConfig+0x26c>)
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004182:	f7ff f8ad 	bl	80032e0 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800418a:	f7ff f8a9 	bl	80032e0 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e141      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <HAL_RCC_OscConfig+0x264>)
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80041a8:	2001      	movs	r0, #1
 80041aa:	f000 fadf 	bl	800476c <RCC_Delay>
 80041ae:	e01b      	b.n	80041e8 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_OscConfig+0x26c>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b6:	f7ff f893 	bl	80032e0 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041bc:	e00e      	b.n	80041dc <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041be:	f7ff f88f 	bl	80032e0 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d907      	bls.n	80041dc <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e127      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
 80041d0:	40021000 	.word	0x40021000
 80041d4:	42420000 	.word	0x42420000
 80041d8:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041dc:	4b92      	ldr	r3, [pc, #584]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1ea      	bne.n	80041be <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80a6 	beq.w	8004342 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fa:	4b8b      	ldr	r3, [pc, #556]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10d      	bne.n	8004222 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	4b88      	ldr	r3, [pc, #544]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4a87      	ldr	r2, [pc, #540]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 800420c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004210:	61d3      	str	r3, [r2, #28]
 8004212:	4b85      	ldr	r3, [pc, #532]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800421e:	2301      	movs	r3, #1
 8004220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004222:	4b82      	ldr	r3, [pc, #520]	; (800442c <HAL_RCC_OscConfig+0x4c0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d118      	bne.n	8004260 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422e:	4b7f      	ldr	r3, [pc, #508]	; (800442c <HAL_RCC_OscConfig+0x4c0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a7e      	ldr	r2, [pc, #504]	; (800442c <HAL_RCC_OscConfig+0x4c0>)
 8004234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800423a:	f7ff f851 	bl	80032e0 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004242:	f7ff f84d 	bl	80032e0 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b64      	cmp	r3, #100	; 0x64
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e0e5      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004254:	4b75      	ldr	r3, [pc, #468]	; (800442c <HAL_RCC_OscConfig+0x4c0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d106      	bne.n	8004276 <HAL_RCC_OscConfig+0x30a>
 8004268:	4b6f      	ldr	r3, [pc, #444]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	4a6e      	ldr	r2, [pc, #440]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6213      	str	r3, [r2, #32]
 8004274:	e02d      	b.n	80042d2 <HAL_RCC_OscConfig+0x366>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10c      	bne.n	8004298 <HAL_RCC_OscConfig+0x32c>
 800427e:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	4a69      	ldr	r2, [pc, #420]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	6213      	str	r3, [r2, #32]
 800428a:	4b67      	ldr	r3, [pc, #412]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	4a66      	ldr	r2, [pc, #408]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 8004290:	f023 0304 	bic.w	r3, r3, #4
 8004294:	6213      	str	r3, [r2, #32]
 8004296:	e01c      	b.n	80042d2 <HAL_RCC_OscConfig+0x366>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2b05      	cmp	r3, #5
 800429e:	d10c      	bne.n	80042ba <HAL_RCC_OscConfig+0x34e>
 80042a0:	4b61      	ldr	r3, [pc, #388]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	4a60      	ldr	r2, [pc, #384]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80042a6:	f043 0304 	orr.w	r3, r3, #4
 80042aa:	6213      	str	r3, [r2, #32]
 80042ac:	4b5e      	ldr	r3, [pc, #376]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	4a5d      	ldr	r2, [pc, #372]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6213      	str	r3, [r2, #32]
 80042b8:	e00b      	b.n	80042d2 <HAL_RCC_OscConfig+0x366>
 80042ba:	4b5b      	ldr	r3, [pc, #364]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	4a5a      	ldr	r2, [pc, #360]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	6213      	str	r3, [r2, #32]
 80042c6:	4b58      	ldr	r3, [pc, #352]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	4a57      	ldr	r2, [pc, #348]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80042cc:	f023 0304 	bic.w	r3, r3, #4
 80042d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d015      	beq.n	8004306 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042da:	f7ff f801 	bl	80032e0 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7fe fffd 	bl	80032e0 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e093      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	4b4b      	ldr	r3, [pc, #300]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ee      	beq.n	80042e2 <HAL_RCC_OscConfig+0x376>
 8004304:	e014      	b.n	8004330 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004306:	f7fe ffeb 	bl	80032e0 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fe ffe7 	bl	80032e0 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e07d      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004324:	4b40      	ldr	r3, [pc, #256]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1ee      	bne.n	800430e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d105      	bne.n	8004342 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004336:	4b3c      	ldr	r3, [pc, #240]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	4a3b      	ldr	r2, [pc, #236]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 800433c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004340:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d069      	beq.n	800441e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800434a:	4b37      	ldr	r3, [pc, #220]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b08      	cmp	r3, #8
 8004354:	d061      	beq.n	800441a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d146      	bne.n	80043ec <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435e:	4b34      	ldr	r3, [pc, #208]	; (8004430 <HAL_RCC_OscConfig+0x4c4>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fe ffbc 	bl	80032e0 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436c:	f7fe ffb8 	bl	80032e0 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e050      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800437e:	4b2a      	ldr	r3, [pc, #168]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004392:	d108      	bne.n	80043a6 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004394:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4921      	ldr	r1, [pc, #132]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043a6:	4b20      	ldr	r3, [pc, #128]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a19      	ldr	r1, [r3, #32]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	430b      	orrs	r3, r1
 80043b8:	491b      	ldr	r1, [pc, #108]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043be:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c4:	f7fe ff8c 	bl	80032e0 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043cc:	f7fe ff88 	bl	80032e0 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e020      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x460>
 80043ea:	e018      	b.n	800441e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ec:	4b10      	ldr	r3, [pc, #64]	; (8004430 <HAL_RCC_OscConfig+0x4c4>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fe ff75 	bl	80032e0 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fe ff71 	bl	80032e0 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e009      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_RCC_OscConfig+0x4bc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <HAL_RCC_OscConfig+0x48e>
 8004418:	e001      	b.n	800441e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	40007000 	.word	0x40007000
 8004430:	42420060 	.word	0x42420060

08004434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004442:	4b7e      	ldr	r3, [pc, #504]	; (800463c <HAL_RCC_ClockConfig+0x208>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d910      	bls.n	8004472 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004450:	4b7a      	ldr	r3, [pc, #488]	; (800463c <HAL_RCC_ClockConfig+0x208>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 0207 	bic.w	r2, r3, #7
 8004458:	4978      	ldr	r1, [pc, #480]	; (800463c <HAL_RCC_ClockConfig+0x208>)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004460:	4b76      	ldr	r3, [pc, #472]	; (800463c <HAL_RCC_ClockConfig+0x208>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d001      	beq.n	8004472 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e0e0      	b.n	8004634 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d020      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800448a:	4b6d      	ldr	r3, [pc, #436]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4a6c      	ldr	r2, [pc, #432]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 8004490:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004494:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a2:	4b67      	ldr	r3, [pc, #412]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4a66      	ldr	r2, [pc, #408]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 80044a8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044ac:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ae:	4b64      	ldr	r3, [pc, #400]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	4961      	ldr	r1, [pc, #388]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d06a      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d4:	4b5a      	ldr	r3, [pc, #360]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d115      	bne.n	800450c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0a7      	b.n	8004634 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ec:	4b54      	ldr	r3, [pc, #336]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d109      	bne.n	800450c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e09b      	b.n	8004634 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fc:	4b50      	ldr	r3, [pc, #320]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e093      	b.n	8004634 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800450c:	4b4c      	ldr	r3, [pc, #304]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f023 0203 	bic.w	r2, r3, #3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	4949      	ldr	r1, [pc, #292]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800451e:	f7fe fedf 	bl	80032e0 <HAL_GetTick>
 8004522:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d112      	bne.n	8004552 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800452c:	e00a      	b.n	8004544 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452e:	f7fe fed7 	bl	80032e0 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e077      	b.n	8004634 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004544:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f003 030c 	and.w	r3, r3, #12
 800454c:	2b04      	cmp	r3, #4
 800454e:	d1ee      	bne.n	800452e <HAL_RCC_ClockConfig+0xfa>
 8004550:	e027      	b.n	80045a2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d11d      	bne.n	8004596 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455c:	f7fe fec0 	bl	80032e0 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e060      	b.n	8004634 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004572:	4b33      	ldr	r3, [pc, #204]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b08      	cmp	r3, #8
 800457c:	d1ee      	bne.n	800455c <HAL_RCC_ClockConfig+0x128>
 800457e:	e010      	b.n	80045a2 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004580:	f7fe feae 	bl	80032e0 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f241 3288 	movw	r2, #5000	; 0x1388
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e04e      	b.n	8004634 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004596:	4b2a      	ldr	r3, [pc, #168]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1ee      	bne.n	8004580 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80045a2:	4b26      	ldr	r3, [pc, #152]	; (800463c <HAL_RCC_ClockConfig+0x208>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d210      	bcs.n	80045d2 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b0:	4b22      	ldr	r3, [pc, #136]	; (800463c <HAL_RCC_ClockConfig+0x208>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f023 0207 	bic.w	r2, r3, #7
 80045b8:	4920      	ldr	r1, [pc, #128]	; (800463c <HAL_RCC_ClockConfig+0x208>)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	4313      	orrs	r3, r2
 80045be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045c0:	4b1e      	ldr	r3, [pc, #120]	; (800463c <HAL_RCC_ClockConfig+0x208>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d001      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e030      	b.n	8004634 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d008      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045de:	4b18      	ldr	r3, [pc, #96]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4915      	ldr	r1, [pc, #84]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d009      	beq.n	8004610 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	490d      	ldr	r1, [pc, #52]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004610:	f000 f81c 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <HAL_RCC_ClockConfig+0x20c>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	4908      	ldr	r1, [pc, #32]	; (8004644 <HAL_RCC_ClockConfig+0x210>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
 8004628:	4a07      	ldr	r2, [pc, #28]	; (8004648 <HAL_RCC_ClockConfig+0x214>)
 800462a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800462c:	2000      	movs	r0, #0
 800462e:	f7fe fe15 	bl	800325c <HAL_InitTick>
  
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40022000 	.word	0x40022000
 8004640:	40021000 	.word	0x40021000
 8004644:	08007440 	.word	0x08007440
 8004648:	20000004 	.word	0x20000004

0800464c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800464c:	b490      	push	{r4, r7}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004652:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004654:	1d3c      	adds	r4, r7, #4
 8004656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800465c:	f240 2301 	movw	r3, #513	; 0x201
 8004660:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	2300      	movs	r3, #0
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004676:	4b21      	ldr	r3, [pc, #132]	; (80046fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b04      	cmp	r3, #4
 8004684:	d002      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0x40>
 8004686:	2b08      	cmp	r3, #8
 8004688:	d003      	beq.n	8004692 <HAL_RCC_GetSysClockFreq+0x46>
 800468a:	e02b      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800468c:	4b1c      	ldr	r3, [pc, #112]	; (8004700 <HAL_RCC_GetSysClockFreq+0xb4>)
 800468e:	623b      	str	r3, [r7, #32]
      break;
 8004690:	e02b      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	0c9b      	lsrs	r3, r3, #18
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	3328      	adds	r3, #40	; 0x28
 800469c:	443b      	add	r3, r7
 800469e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80046a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d012      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046ae:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	0c5b      	lsrs	r3, r3, #17
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	3328      	adds	r3, #40	; 0x28
 80046ba:	443b      	add	r3, r7
 80046bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046c0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	4a0e      	ldr	r2, [pc, #56]	; (8004700 <HAL_RCC_GetSysClockFreq+0xb4>)
 80046c6:	fb03 f202 	mul.w	r2, r3, r2
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
 80046d2:	e004      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	4a0b      	ldr	r2, [pc, #44]	; (8004704 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	623b      	str	r3, [r7, #32]
      break;
 80046e2:	e002      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <HAL_RCC_GetSysClockFreq+0xb4>)
 80046e6:	623b      	str	r3, [r7, #32]
      break;
 80046e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ea:	6a3b      	ldr	r3, [r7, #32]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3728      	adds	r7, #40	; 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc90      	pop	{r4, r7}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	08006e40 	.word	0x08006e40
 80046fc:	40021000 	.word	0x40021000
 8004700:	007a1200 	.word	0x007a1200
 8004704:	003d0900 	.word	0x003d0900

08004708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800470c:	4b02      	ldr	r3, [pc, #8]	; (8004718 <HAL_RCC_GetHCLKFreq+0x10>)
 800470e:	681b      	ldr	r3, [r3, #0]
}
 8004710:	4618      	mov	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr
 8004718:	20000004 	.word	0x20000004

0800471c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004720:	f7ff fff2 	bl	8004708 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4903      	ldr	r1, [pc, #12]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	08007450 	.word	0x08007450

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004748:	f7ff ffde 	bl	8004708 <HAL_RCC_GetHCLKFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	0adb      	lsrs	r3, r3, #11
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4903      	ldr	r1, [pc, #12]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40021000 	.word	0x40021000
 8004768:	08007450 	.word	0x08007450

0800476c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <RCC_Delay+0x38>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a0b      	ldr	r2, [pc, #44]	; (80047a8 <RCC_Delay+0x3c>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	0a5b      	lsrs	r3, r3, #9
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004788:	bf00      	nop
}
 800478a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	1e5a      	subs	r2, r3, #1
 8004790:	60fa      	str	r2, [r7, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f8      	bne.n	8004788 <RCC_Delay+0x1c>
}
 8004796:	bf00      	nop
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000004 	.word	0x20000004
 80047a8:	10624dd3 	.word	0x10624dd3

080047ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d07d      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80047c8:	2300      	movs	r3, #0
 80047ca:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047cc:	4b4f      	ldr	r3, [pc, #316]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10d      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047d8:	4b4c      	ldr	r3, [pc, #304]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	4a4b      	ldr	r2, [pc, #300]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e2:	61d3      	str	r3, [r2, #28]
 80047e4:	4b49      	ldr	r3, [pc, #292]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f4:	4b46      	ldr	r3, [pc, #280]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d118      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004800:	4b43      	ldr	r3, [pc, #268]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a42      	ldr	r2, [pc, #264]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480c:	f7fe fd68 	bl	80032e0 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004812:	e008      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004814:	f7fe fd64 	bl	80032e0 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	; 0x64
 8004820:	d901      	bls.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e06d      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004826:	4b3a      	ldr	r3, [pc, #232]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004832:	4b36      	ldr	r3, [pc, #216]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d02e      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	429a      	cmp	r2, r3
 800484e:	d027      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004850:	4b2e      	ldr	r3, [pc, #184]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004858:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800485a:	4b2e      	ldr	r3, [pc, #184]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004860:	4b2c      	ldr	r3, [pc, #176]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004866:	4a29      	ldr	r2, [pc, #164]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d014      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004876:	f7fe fd33 	bl	80032e0 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487c:	e00a      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487e:	f7fe fd2f 	bl	80032e0 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	f241 3288 	movw	r2, #5000	; 0x1388
 800488c:	4293      	cmp	r3, r2
 800488e:	d901      	bls.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e036      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004894:	4b1d      	ldr	r3, [pc, #116]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ee      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048a0:	4b1a      	ldr	r3, [pc, #104]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4917      	ldr	r1, [pc, #92]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d105      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b8:	4b14      	ldr	r3, [pc, #80]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	4a13      	ldr	r2, [pc, #76]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048d0:	4b0e      	ldr	r3, [pc, #56]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	490b      	ldr	r1, [pc, #44]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048ee:	4b07      	ldr	r3, [pc, #28]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	4904      	ldr	r1, [pc, #16]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
 8004910:	40007000 	.word	0x40007000
 8004914:	42420440 	.word	0x42420440

08004918 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e034      	b.n	8004998 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7fc fa38 	bl	8000db8 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3308      	adds	r3, #8
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f001 fcaa 	bl	80062ac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	461a      	mov	r2, r3
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	f001 fd22 	bl	80063ac <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6858      	ldr	r0, [r3, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	f001 fd4d 	bl	8006414 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	6892      	ldr	r2, [r2, #8]
 8004982:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	6892      	ldr	r2, [r2, #8]
 800498e:	f041 0101 	orr.w	r1, r1, #1
 8004992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e01d      	b.n	80049ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fd fbe2 	bl	8002190 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f000 fbac 	bl	800513c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr

08004a2a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6a1a      	ldr	r2, [r3, #32]
 8004a40:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10f      	bne.n	8004a6a <HAL_TIM_Base_Stop+0x40>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	f240 4344 	movw	r3, #1092	; 0x444
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d107      	bne.n	8004a6a <HAL_TIM_Base_Stop+0x40>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0201 	bic.w	r2, r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0201 	orr.w	r2, r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a1a      	ldr	r2, [r3, #32]
 8004ad0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10f      	bne.n	8004afa <HAL_TIM_Base_Stop_IT+0x48>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6a1a      	ldr	r2, [r3, #32]
 8004ae0:	f240 4344 	movw	r3, #1092	; 0x444
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d107      	bne.n	8004afa <HAL_TIM_Base_Stop_IT+0x48>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr

08004b06 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e01d      	b.n	8004b54 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f815 	bl	8004b5c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4619      	mov	r1, r3
 8004b44:	4610      	mov	r0, r2
 8004b46:	f000 faf9 	bl	800513c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr

08004b6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d122      	bne.n	8004bca <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d11b      	bne.n	8004bca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f06f 0202 	mvn.w	r2, #2
 8004b9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 faa8 	bl	8005106 <HAL_TIM_IC_CaptureCallback>
 8004bb6:	e005      	b.n	8004bc4 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fa9b 	bl	80050f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 faaa 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d122      	bne.n	8004c1e <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d11b      	bne.n	8004c1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f06f 0204 	mvn.w	r2, #4
 8004bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fa7e 	bl	8005106 <HAL_TIM_IC_CaptureCallback>
 8004c0a:	e005      	b.n	8004c18 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fa71 	bl	80050f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa80 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d122      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d11b      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f06f 0208 	mvn.w	r2, #8
 8004c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2204      	movs	r2, #4
 8004c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa54 	bl	8005106 <HAL_TIM_IC_CaptureCallback>
 8004c5e:	e005      	b.n	8004c6c <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fa47 	bl	80050f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa56 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d122      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	2b10      	cmp	r3, #16
 8004c8c:	d11b      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f06f 0210 	mvn.w	r2, #16
 8004c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fa2a 	bl	8005106 <HAL_TIM_IC_CaptureCallback>
 8004cb2:	e005      	b.n	8004cc0 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fa1d 	bl	80050f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fa2c 	bl	8005118 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d10e      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d107      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f06f 0201 	mvn.w	r2, #1
 8004cea:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f9f8 	bl	80050e2 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfc:	2b80      	cmp	r3, #128	; 0x80
 8004cfe:	d10e      	bne.n	8004d1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0a:	2b80      	cmp	r3, #128	; 0x80
 8004d0c:	d107      	bne.n	8004d1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fd9b 	bl	8005854 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	d10e      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b40      	cmp	r3, #64	; 0x40
 8004d38:	d107      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d42:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f9f0 	bl	800512a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d10e      	bne.n	8004d76 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d107      	bne.n	8004d76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f06f 0220 	mvn.w	r2, #32
 8004d6e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fd66 	bl	8005842 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e0b4      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	f200 809f 	bhi.w	8004ef0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004db2:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004ded 	.word	0x08004ded
 8004dbc:	08004ef1 	.word	0x08004ef1
 8004dc0:	08004ef1 	.word	0x08004ef1
 8004dc4:	08004ef1 	.word	0x08004ef1
 8004dc8:	08004e2d 	.word	0x08004e2d
 8004dcc:	08004ef1 	.word	0x08004ef1
 8004dd0:	08004ef1 	.word	0x08004ef1
 8004dd4:	08004ef1 	.word	0x08004ef1
 8004dd8:	08004e6f 	.word	0x08004e6f
 8004ddc:	08004ef1 	.word	0x08004ef1
 8004de0:	08004ef1 	.word	0x08004ef1
 8004de4:	08004ef1 	.word	0x08004ef1
 8004de8:	08004eaf 	.word	0x08004eaf
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fa20 	bl	8005238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0208 	orr.w	r2, r2, #8
 8004e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0204 	bic.w	r2, r2, #4
 8004e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6999      	ldr	r1, [r3, #24]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	619a      	str	r2, [r3, #24]
    }
    break;
 8004e2a:	e062      	b.n	8004ef2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fa76 	bl	8005324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6999      	ldr	r1, [r3, #24]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	021a      	lsls	r2, r3, #8
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	619a      	str	r2, [r3, #24]
    }
    break;
 8004e6c:	e041      	b.n	8004ef2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 facf 	bl	8005418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0208 	orr.w	r2, r2, #8
 8004e88:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0204 	bic.w	r2, r2, #4
 8004e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69d9      	ldr	r1, [r3, #28]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	61da      	str	r2, [r3, #28]
    }
    break;
 8004eac:	e021      	b.n	8004ef2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fb29 	bl	800550c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69d9      	ldr	r1, [r3, #28]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	021a      	lsls	r2, r3, #8
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	61da      	str	r2, [r3, #28]
    }
    break;
 8004eee:	e000      	b.n	8004ef2 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8004ef0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_TIM_ConfigClockSource+0x1c>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e0d8      	b.n	80050da <HAL_TIM_ConfigClockSource+0x1ce>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f60:	d052      	beq.n	8005008 <HAL_TIM_ConfigClockSource+0xfc>
 8004f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f66:	f200 80ae 	bhi.w	80050c6 <HAL_TIM_ConfigClockSource+0x1ba>
 8004f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6e:	d027      	beq.n	8004fc0 <HAL_TIM_ConfigClockSource+0xb4>
 8004f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f74:	f200 80a7 	bhi.w	80050c6 <HAL_TIM_ConfigClockSource+0x1ba>
 8004f78:	2b70      	cmp	r3, #112	; 0x70
 8004f7a:	d02a      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0xc6>
 8004f7c:	2b70      	cmp	r3, #112	; 0x70
 8004f7e:	f200 80a2 	bhi.w	80050c6 <HAL_TIM_ConfigClockSource+0x1ba>
 8004f82:	2b60      	cmp	r3, #96	; 0x60
 8004f84:	d063      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x142>
 8004f86:	2b60      	cmp	r3, #96	; 0x60
 8004f88:	f200 809d 	bhi.w	80050c6 <HAL_TIM_ConfigClockSource+0x1ba>
 8004f8c:	2b50      	cmp	r3, #80	; 0x50
 8004f8e:	d04e      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x122>
 8004f90:	2b50      	cmp	r3, #80	; 0x50
 8004f92:	f200 8098 	bhi.w	80050c6 <HAL_TIM_ConfigClockSource+0x1ba>
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d069      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x162>
 8004f9a:	2b40      	cmp	r3, #64	; 0x40
 8004f9c:	f200 8093 	bhi.w	80050c6 <HAL_TIM_ConfigClockSource+0x1ba>
 8004fa0:	2b30      	cmp	r3, #48	; 0x30
 8004fa2:	f000 8089 	beq.w	80050b8 <HAL_TIM_ConfigClockSource+0x1ac>
 8004fa6:	2b30      	cmp	r3, #48	; 0x30
 8004fa8:	f200 808d 	bhi.w	80050c6 <HAL_TIM_ConfigClockSource+0x1ba>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d07c      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x19e>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	f200 8088 	bhi.w	80050c6 <HAL_TIM_ConfigClockSource+0x1ba>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d069      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x182>
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d06e      	beq.n	800509c <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8004fbe:	e082      	b.n	80050c6 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0207 	bic.w	r2, r2, #7
 8004fce:	609a      	str	r2, [r3, #8]
    break;
 8004fd0:	e07a      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6899      	ldr	r1, [r3, #8]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f000 fb71 	bl	80056c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ff4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ffc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	609a      	str	r2, [r3, #8]
    break;
 8005006:	e05f      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	6899      	ldr	r1, [r3, #8]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f000 fb56 	bl	80056c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800502a:	609a      	str	r2, [r3, #8]
    break;
 800502c:	e04c      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	461a      	mov	r2, r3
 800503c:	f000 fac0 	bl	80055c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2150      	movs	r1, #80	; 0x50
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fb1f 	bl	800568a <TIM_ITRx_SetConfig>
    break;
 800504c:	e03c      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6859      	ldr	r1, [r3, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	461a      	mov	r2, r3
 800505c:	f000 fae2 	bl	8005624 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2160      	movs	r1, #96	; 0x60
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fb0f 	bl	800568a <TIM_ITRx_SetConfig>
    break;
 800506c:	e02c      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6859      	ldr	r1, [r3, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	461a      	mov	r2, r3
 800507c:	f000 faa0 	bl	80055c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2140      	movs	r1, #64	; 0x40
 8005086:	4618      	mov	r0, r3
 8005088:	f000 faff 	bl	800568a <TIM_ITRx_SetConfig>
    break;
 800508c:	e01c      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f000 faf8 	bl	800568a <TIM_ITRx_SetConfig>
    break;
 800509a:	e015      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2110      	movs	r1, #16
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 faf1 	bl	800568a <TIM_ITRx_SetConfig>
    break;
 80050a8:	e00e      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2120      	movs	r1, #32
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 faea 	bl	800568a <TIM_ITRx_SetConfig>
    break;
 80050b6:	e007      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2130      	movs	r1, #48	; 0x30
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fae3 	bl	800568a <TIM_ITRx_SetConfig>
    break;
 80050c4:	e000      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 80050c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr

0800513c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a34      	ldr	r2, [pc, #208]	; (8005224 <TIM_Base_SetConfig+0xe8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <TIM_Base_SetConfig+0x44>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a33      	ldr	r2, [pc, #204]	; (8005228 <TIM_Base_SetConfig+0xec>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00f      	beq.n	8005180 <TIM_Base_SetConfig+0x44>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005166:	d00b      	beq.n	8005180 <TIM_Base_SetConfig+0x44>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a30      	ldr	r2, [pc, #192]	; (800522c <TIM_Base_SetConfig+0xf0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d007      	beq.n	8005180 <TIM_Base_SetConfig+0x44>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a2f      	ldr	r2, [pc, #188]	; (8005230 <TIM_Base_SetConfig+0xf4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_Base_SetConfig+0x44>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a2e      	ldr	r2, [pc, #184]	; (8005234 <TIM_Base_SetConfig+0xf8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d108      	bne.n	8005192 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a23      	ldr	r2, [pc, #140]	; (8005224 <TIM_Base_SetConfig+0xe8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <TIM_Base_SetConfig+0x86>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a22      	ldr	r2, [pc, #136]	; (8005228 <TIM_Base_SetConfig+0xec>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00f      	beq.n	80051c2 <TIM_Base_SetConfig+0x86>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a8:	d00b      	beq.n	80051c2 <TIM_Base_SetConfig+0x86>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1f      	ldr	r2, [pc, #124]	; (800522c <TIM_Base_SetConfig+0xf0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <TIM_Base_SetConfig+0x86>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a1e      	ldr	r2, [pc, #120]	; (8005230 <TIM_Base_SetConfig+0xf4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_Base_SetConfig+0x86>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a1d      	ldr	r2, [pc, #116]	; (8005234 <TIM_Base_SetConfig+0xf8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d108      	bne.n	80051d4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051da:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a09      	ldr	r2, [pc, #36]	; (8005224 <TIM_Base_SetConfig+0xe8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_Base_SetConfig+0xd0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a08      	ldr	r2, [pc, #32]	; (8005228 <TIM_Base_SetConfig+0xec>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d103      	bne.n	8005214 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	615a      	str	r2, [r3, #20]
}
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40013400 	.word	0x40013400
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00

08005238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f023 0201 	bic.w	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f023 0302 	bic.w	r3, r3, #2
 800528c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a20      	ldr	r2, [pc, #128]	; (800531c <TIM_OC1_SetConfig+0xe4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_OC1_SetConfig+0x70>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <TIM_OC1_SetConfig+0xe8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d10c      	bne.n	80052c2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f023 0308 	bic.w	r3, r3, #8
 80052ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f023 0304 	bic.w	r3, r3, #4
 80052c0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a15      	ldr	r2, [pc, #84]	; (800531c <TIM_OC1_SetConfig+0xe4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d003      	beq.n	80052d2 <TIM_OC1_SetConfig+0x9a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a14      	ldr	r2, [pc, #80]	; (8005320 <TIM_OC1_SetConfig+0xe8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d111      	bne.n	80052f6 <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	621a      	str	r2, [r3, #32]
}
 8005310:	bf00      	nop
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40012c00 	.word	0x40012c00
 8005320:	40013400 	.word	0x40013400

08005324 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	f023 0210 	bic.w	r2, r3, #16
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f023 0320 	bic.w	r3, r3, #32
 800537a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a21      	ldr	r2, [pc, #132]	; (8005410 <TIM_OC2_SetConfig+0xec>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_OC2_SetConfig+0x74>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a20      	ldr	r2, [pc, #128]	; (8005414 <TIM_OC2_SetConfig+0xf0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d10d      	bne.n	80053b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b2:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a16      	ldr	r2, [pc, #88]	; (8005410 <TIM_OC2_SetConfig+0xec>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_OC2_SetConfig+0xa0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a15      	ldr	r2, [pc, #84]	; (8005414 <TIM_OC2_SetConfig+0xf0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d113      	bne.n	80053ec <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	621a      	str	r2, [r3, #32]
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40013400 	.word	0x40013400

08005418 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0303 	bic.w	r3, r3, #3
 800545a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800546c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a21      	ldr	r2, [pc, #132]	; (8005504 <TIM_OC3_SetConfig+0xec>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_OC3_SetConfig+0x72>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a20      	ldr	r2, [pc, #128]	; (8005508 <TIM_OC3_SetConfig+0xf0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d10d      	bne.n	80054a6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005490:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054a4:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a16      	ldr	r2, [pc, #88]	; (8005504 <TIM_OC3_SetConfig+0xec>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d003      	beq.n	80054b6 <TIM_OC3_SetConfig+0x9e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a15      	ldr	r2, [pc, #84]	; (8005508 <TIM_OC3_SetConfig+0xf0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d113      	bne.n	80054de <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	621a      	str	r2, [r3, #32]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40013400 	.word	0x40013400

0800550c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005546:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005562:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	031b      	lsls	r3, r3, #12
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a11      	ldr	r2, [pc, #68]	; (80055b8 <TIM_OC4_SetConfig+0xac>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d003      	beq.n	8005580 <TIM_OC4_SetConfig+0x74>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a10      	ldr	r2, [pc, #64]	; (80055bc <TIM_OC4_SetConfig+0xb0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d109      	bne.n	8005594 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005586:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	019b      	lsls	r3, r3, #6
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40013400 	.word	0x40013400

080055c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f023 030a 	bic.w	r3, r3, #10
 8005604:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	621a      	str	r2, [r3, #32]
}
 800561a:	bf00      	nop
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr

08005624 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f023 0210 	bic.w	r2, r3, #16
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005656:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	031b      	lsls	r3, r3, #12
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005668:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	621a      	str	r2, [r3, #32]
}
 8005680:	bf00      	nop
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr

0800568a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800568a:	b480      	push	{r7}
 800568c:	b085      	sub	sp, #20
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	460b      	mov	r3, r1
 8005694:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80056a8:	887b      	ldrh	r3, [r7, #2]
 80056aa:	f043 0307 	orr.w	r3, r3, #7
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	609a      	str	r2, [r3, #8]
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr

080056c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	021a      	lsls	r2, r3, #8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr

0800570a <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005722:	2302      	movs	r3, #2
 8005724:	e044      	b.n	80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bc80      	pop	{r7}
 80057b8:	4770      	bx	lr

080057ba <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e032      	b.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80057f0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6859      	ldr	r1, [r3, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005812:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6899      	ldr	r1, [r3, #8]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr

08005866 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b082      	sub	sp, #8
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e03f      	b.n	80058f8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7fc fdcd 	bl	800242c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2224      	movs	r2, #36	; 0x24
 8005896:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058a8:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fbe6 	bl	800607c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691a      	ldr	r2, [r3, #16]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ce:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058de:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b20      	cmp	r3, #32
 800591e:	f040 8083 	bne.w	8005a28 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_UART_Transmit+0x2e>
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e07b      	b.n	8005a2a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_UART_Transmit+0x40>
 800593c:	2302      	movs	r3, #2
 800593e:	e074      	b.n	8005a2a <HAL_UART_Transmit+0x12a>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2221      	movs	r2, #33	; 0x21
 8005952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005956:	f7fd fcc3 	bl	80032e0 <HAL_GetTick>
 800595a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	88fa      	ldrh	r2, [r7, #6]
 8005966:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8005968:	e042      	b.n	80059f0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005980:	d122      	bne.n	80059c8 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2200      	movs	r2, #0
 800598a:	2180      	movs	r1, #128	; 0x80
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fa0c 	bl	8005daa <UART_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e046      	b.n	8005a2a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ae:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	3302      	adds	r3, #2
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	e017      	b.n	80059f0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	e013      	b.n	80059f0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2200      	movs	r2, #0
 80059d0:	2180      	movs	r1, #128	; 0x80
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f9e9 	bl	8005daa <UART_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e023      	b.n	8005a2a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	60ba      	str	r2, [r7, #8]
 80059e8:	781a      	ldrb	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1b7      	bne.n	800596a <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2200      	movs	r2, #0
 8005a02:	2140      	movs	r1, #64	; 0x40
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f9d0 	bl	8005daa <UART_WaitOnFlagUntilTimeout>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e00a      	b.n	8005a2a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	e000      	b.n	8005a2a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005a28:	2302      	movs	r3, #2
  }
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b088      	sub	sp, #32
 8005a36:	af02      	add	r7, sp, #8
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	f040 8090 	bne.w	8005b74 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_UART_Receive+0x2e>
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e088      	b.n	8005b76 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_UART_Receive+0x40>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e081      	b.n	8005b76 <HAL_UART_Receive+0x144>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2222      	movs	r2, #34	; 0x22
 8005a84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005a88:	f7fd fc2a 	bl	80032e0 <HAL_GetTick>
 8005a8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	88fa      	ldrh	r2, [r7, #6]
 8005a92:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8005a9a:	e05c      	b.n	8005b56 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab2:	d12b      	bne.n	8005b0c <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2200      	movs	r2, #0
 8005abc:	2120      	movs	r1, #32
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f973 	bl	8005daa <UART_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e053      	b.n	8005b76 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10c      	bne.n	8005af4 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	3302      	adds	r3, #2
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	e030      	b.n	8005b56 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	3301      	adds	r3, #1
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	e024      	b.n	8005b56 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2200      	movs	r2, #0
 8005b14:	2120      	movs	r1, #32
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f947 	bl	8005daa <UART_WaitOnFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e027      	b.n	8005b76 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d108      	bne.n	8005b40 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6859      	ldr	r1, [r3, #4]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	60ba      	str	r2, [r7, #8]
 8005b3a:	b2ca      	uxtb	r2, r1
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e00a      	b.n	8005b56 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	1c59      	adds	r1, r3, #1
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d19d      	bne.n	8005a9c <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	e000      	b.n	8005b76 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005b74:	2302      	movs	r3, #2
  }
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10d      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x52>
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f9d5 	bl	8005f7a <UART_Receive_IT>
      return;
 8005bd0:	e0cb      	b.n	8005d6a <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80ab 	beq.w	8005d30 <HAL_UART_IRQHandler+0x1b0>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x70>
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 80a0 	beq.w	8005d30 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_UART_IRQHandler+0x90>
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c08:	f043 0201 	orr.w	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <HAL_UART_IRQHandler+0xb0>
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c28:	f043 0202 	orr.w	r2, r3, #2
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_UART_IRQHandler+0xd0>
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c48:	f043 0204 	orr.w	r2, r3, #4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_UART_IRQHandler+0xf0>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c68:	f043 0208 	orr.w	r2, r3, #8
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d077      	beq.n	8005d68 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <HAL_UART_IRQHandler+0x112>
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f974 	bl	8005f7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bf14      	ite	ne
 8005ca0:	2301      	movne	r3, #1
 8005ca2:	2300      	moveq	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <HAL_UART_IRQHandler+0x13a>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d031      	beq.n	8005d1e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f8bf 	bl	8005e3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d023      	beq.n	8005d16 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cdc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d013      	beq.n	8005d0e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cea:	4a21      	ldr	r2, [pc, #132]	; (8005d70 <HAL_UART_IRQHandler+0x1f0>)
 8005cec:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fd fe48 	bl	8003988 <HAL_DMA_Abort_IT>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d016      	beq.n	8005d2c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0c:	e00e      	b.n	8005d2c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f842 	bl	8005d98 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d14:	e00a      	b.n	8005d2c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f83e 	bl	8005d98 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1c:	e006      	b.n	8005d2c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f83a 	bl	8005d98 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d2a:	e01d      	b.n	8005d68 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2c:	bf00      	nop
    return;
 8005d2e:	e01b      	b.n	8005d68 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_UART_IRQHandler+0x1cc>
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f8ab 	bl	8005ea0 <UART_Transmit_IT>
    return;
 8005d4a:	e00e      	b.n	8005d6a <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d009      	beq.n	8005d6a <HAL_UART_IRQHandler+0x1ea>
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d004      	beq.n	8005d6a <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f8f2 	bl	8005f4a <UART_EndTransmit_IT>
    return;
 8005d66:	e000      	b.n	8005d6a <HAL_UART_IRQHandler+0x1ea>
    return;
 8005d68:	bf00      	nop
  }
}
 8005d6a:	3720      	adds	r7, #32
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	08005e79 	.word	0x08005e79

08005d74 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	4770      	bx	lr

08005daa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	603b      	str	r3, [r7, #0]
 8005db6:	4613      	mov	r3, r2
 8005db8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8005dba:	e02c      	b.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc2:	d028      	beq.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <UART_WaitOnFlagUntilTimeout+0x30>
 8005dca:	f7fd fa89 	bl	80032e0 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d21d      	bcs.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005de8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0201 	bic.w	r2, r2, #1
 8005df8:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e00f      	b.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	bf0c      	ite	eq
 8005e26:	2301      	moveq	r3, #1
 8005e28:	2300      	movne	r3, #0
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	79fb      	ldrb	r3, [r7, #7]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d0c3      	beq.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e54:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0201 	bic.w	r2, r2, #1
 8005e64:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr

08005e78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff ff80 	bl	8005d98 <HAL_UART_ErrorCallback>
}
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b21      	cmp	r3, #33	; 0x21
 8005eb2:	d144      	bne.n	8005f3e <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebc:	d11a      	bne.n	8005ef4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ed2:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d105      	bne.n	8005ee8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	1c9a      	adds	r2, r3, #2
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	621a      	str	r2, [r3, #32]
 8005ee6:	e00e      	b.n	8005f06 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	621a      	str	r2, [r3, #32]
 8005ef2:	e008      	b.n	8005f06 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	1c59      	adds	r1, r3, #1
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6211      	str	r1, [r2, #32]
 8005efe:	781a      	ldrb	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	4619      	mov	r1, r3
 8005f14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10f      	bne.n	8005f3a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e000      	b.n	8005f40 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005f3e:	2302      	movs	r3, #2
  }
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f60:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff ff02 	bl	8005d74 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b22      	cmp	r3, #34	; 0x22
 8005f8c:	d171      	bne.n	8006072 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f96:	d123      	bne.n	8005fe0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10e      	bne.n	8005fc4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbc:	1c9a      	adds	r2, r3, #2
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	629a      	str	r2, [r3, #40]	; 0x28
 8005fc2:	e029      	b.n	8006018 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	629a      	str	r2, [r3, #40]	; 0x28
 8005fde:	e01b      	b.n	8006018 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6858      	ldr	r0, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	1c59      	adds	r1, r3, #1
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6291      	str	r1, [r2, #40]	; 0x28
 8005ff8:	b2c2      	uxtb	r2, r0
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	e00c      	b.n	8006018 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	b2da      	uxtb	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	1c58      	adds	r0, r3, #1
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	6288      	str	r0, [r1, #40]	; 0x28
 8006010:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29b      	uxth	r3, r3
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	4619      	mov	r1, r3
 8006026:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006028:	2b00      	cmp	r3, #0
 800602a:	d120      	bne.n	800606e <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0220 	bic.w	r2, r2, #32
 800603a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800604a:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695a      	ldr	r2, [r3, #20]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0201 	bic.w	r2, r2, #1
 800605a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fe8e 	bl	8005d86 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e002      	b.n	8006074 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	e000      	b.n	8006074 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006072:	2302      	movs	r3, #2
  }
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800607c:	b5b0      	push	{r4, r5, r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80060be:	f023 030c 	bic.w	r3, r3, #12
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	68f9      	ldr	r1, [r7, #12]
 80060c8:	430b      	orrs	r3, r1
 80060ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a6f      	ldr	r2, [pc, #444]	; (80062a4 <UART_SetConfig+0x228>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d16b      	bne.n	80061c4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80060ec:	f7fe fb2a 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 80060f0:	4602      	mov	r2, r0
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009a      	lsls	r2, r3, #2
 80060fa:	441a      	add	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	fbb2 f3f3 	udiv	r3, r2, r3
 8006106:	4a68      	ldr	r2, [pc, #416]	; (80062a8 <UART_SetConfig+0x22c>)
 8006108:	fba2 2303 	umull	r2, r3, r2, r3
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	011c      	lsls	r4, r3, #4
 8006110:	f7fe fb18 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8006114:	4602      	mov	r2, r0
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009a      	lsls	r2, r3, #2
 800611e:	441a      	add	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	fbb2 f5f3 	udiv	r5, r2, r3
 800612a:	f7fe fb0b 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 800612e:	4602      	mov	r2, r0
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	009a      	lsls	r2, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
 8006144:	4a58      	ldr	r2, [pc, #352]	; (80062a8 <UART_SetConfig+0x22c>)
 8006146:	fba2 2303 	umull	r2, r3, r2, r3
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2264      	movs	r2, #100	; 0x64
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	1aeb      	subs	r3, r5, r3
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	3332      	adds	r3, #50	; 0x32
 8006158:	4a53      	ldr	r2, [pc, #332]	; (80062a8 <UART_SetConfig+0x22c>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006164:	441c      	add	r4, r3
 8006166:	f7fe faed 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 800616a:	4602      	mov	r2, r0
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	009a      	lsls	r2, r3, #2
 8006174:	441a      	add	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006180:	f7fe fae0 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8006184:	4602      	mov	r2, r0
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	009a      	lsls	r2, r3, #2
 800618e:	441a      	add	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	fbb2 f3f3 	udiv	r3, r2, r3
 800619a:	4a43      	ldr	r2, [pc, #268]	; (80062a8 <UART_SetConfig+0x22c>)
 800619c:	fba2 2303 	umull	r2, r3, r2, r3
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	2264      	movs	r2, #100	; 0x64
 80061a4:	fb02 f303 	mul.w	r3, r2, r3
 80061a8:	1aeb      	subs	r3, r5, r3
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	3332      	adds	r3, #50	; 0x32
 80061ae:	4a3e      	ldr	r2, [pc, #248]	; (80062a8 <UART_SetConfig+0x22c>)
 80061b0:	fba2 2303 	umull	r2, r3, r2, r3
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	f003 020f 	and.w	r2, r3, #15
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4422      	add	r2, r4
 80061c0:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80061c2:	e06a      	b.n	800629a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80061c4:	f7fe faaa 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	009a      	lsls	r2, r3, #2
 80061d2:	441a      	add	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	fbb2 f3f3 	udiv	r3, r2, r3
 80061de:	4a32      	ldr	r2, [pc, #200]	; (80062a8 <UART_SetConfig+0x22c>)
 80061e0:	fba2 2303 	umull	r2, r3, r2, r3
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	011c      	lsls	r4, r3, #4
 80061e8:	f7fe fa98 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 80061ec:	4602      	mov	r2, r0
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	009a      	lsls	r2, r3, #2
 80061f6:	441a      	add	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8006202:	f7fe fa8b 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 8006206:	4602      	mov	r2, r0
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009a      	lsls	r2, r3, #2
 8006210:	441a      	add	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	fbb2 f3f3 	udiv	r3, r2, r3
 800621c:	4a22      	ldr	r2, [pc, #136]	; (80062a8 <UART_SetConfig+0x22c>)
 800621e:	fba2 2303 	umull	r2, r3, r2, r3
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	2264      	movs	r2, #100	; 0x64
 8006226:	fb02 f303 	mul.w	r3, r2, r3
 800622a:	1aeb      	subs	r3, r5, r3
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	3332      	adds	r3, #50	; 0x32
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <UART_SetConfig+0x22c>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	095b      	lsrs	r3, r3, #5
 8006238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800623c:	441c      	add	r4, r3
 800623e:	f7fe fa6d 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 8006242:	4602      	mov	r2, r0
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	009a      	lsls	r2, r3, #2
 800624c:	441a      	add	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	fbb2 f5f3 	udiv	r5, r2, r3
 8006258:	f7fe fa60 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 800625c:	4602      	mov	r2, r0
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009a      	lsls	r2, r3, #2
 8006266:	441a      	add	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006272:	4a0d      	ldr	r2, [pc, #52]	; (80062a8 <UART_SetConfig+0x22c>)
 8006274:	fba2 2303 	umull	r2, r3, r2, r3
 8006278:	095b      	lsrs	r3, r3, #5
 800627a:	2264      	movs	r2, #100	; 0x64
 800627c:	fb02 f303 	mul.w	r3, r2, r3
 8006280:	1aeb      	subs	r3, r5, r3
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	3332      	adds	r3, #50	; 0x32
 8006286:	4a08      	ldr	r2, [pc, #32]	; (80062a8 <UART_SetConfig+0x22c>)
 8006288:	fba2 2303 	umull	r2, r3, r2, r3
 800628c:	095b      	lsrs	r3, r3, #5
 800628e:	f003 020f 	and.w	r2, r3, #15
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4422      	add	r2, r4
 8006298:	609a      	str	r2, [r3, #8]
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bdb0      	pop	{r4, r5, r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40013800 	.word	0x40013800
 80062a8:	51eb851f 	.word	0x51eb851f

080062ac <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	f023 0101 	bic.w	r1, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d132      	bne.n	800633c <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062e0:	4b31      	ldr	r3, [pc, #196]	; (80063a8 <FSMC_NORSRAM_Init+0xfc>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	6851      	ldr	r1, [r2, #4]
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	6892      	ldr	r2, [r2, #8]
 80062ec:	4311      	orrs	r1, r2
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	68d2      	ldr	r2, [r2, #12]
 80062f2:	4311      	orrs	r1, r2
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	6912      	ldr	r2, [r2, #16]
 80062f8:	4311      	orrs	r1, r2
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	6952      	ldr	r2, [r2, #20]
 80062fe:	4311      	orrs	r1, r2
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	6992      	ldr	r2, [r2, #24]
 8006304:	4311      	orrs	r1, r2
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	69d2      	ldr	r2, [r2, #28]
 800630a:	4311      	orrs	r1, r2
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	6a12      	ldr	r2, [r2, #32]
 8006310:	4311      	orrs	r1, r2
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006316:	4311      	orrs	r1, r2
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800631c:	4311      	orrs	r1, r2
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006322:	4311      	orrs	r1, r2
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006328:	430a      	orrs	r2, r1
 800632a:	4313      	orrs	r3, r2
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800633a:	e02f      	b.n	800639c <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006346:	4b18      	ldr	r3, [pc, #96]	; (80063a8 <FSMC_NORSRAM_Init+0xfc>)
 8006348:	4013      	ands	r3, r2
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	6851      	ldr	r1, [r2, #4]
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	6892      	ldr	r2, [r2, #8]
 8006352:	4311      	orrs	r1, r2
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	68d2      	ldr	r2, [r2, #12]
 8006358:	4311      	orrs	r1, r2
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	6912      	ldr	r2, [r2, #16]
 800635e:	4311      	orrs	r1, r2
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	6952      	ldr	r2, [r2, #20]
 8006364:	4311      	orrs	r1, r2
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	6992      	ldr	r2, [r2, #24]
 800636a:	4311      	orrs	r1, r2
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	69d2      	ldr	r2, [r2, #28]
 8006370:	4311      	orrs	r1, r2
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	6a12      	ldr	r2, [r2, #32]
 8006376:	4311      	orrs	r1, r2
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800637c:	4311      	orrs	r1, r2
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006382:	4311      	orrs	r1, r2
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006388:	4311      	orrs	r1, r2
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800638e:	4311      	orrs	r1, r2
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	4319      	orrs	r1, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr
 80063a8:	fff70081 	.word	0xfff70081

080063ac <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	431a      	orrs	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	021b      	lsls	r3, r3, #8
 80063d8:	431a      	orrs	r2, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	041b      	lsls	r3, r3, #16
 80063e0:	431a      	orrs	r2, r3
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	051b      	lsls	r3, r3, #20
 80063ea:	431a      	orrs	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	3b02      	subs	r3, #2
 80063f2:	061b      	lsls	r3, r3, #24
 80063f4:	431a      	orrs	r2, r3
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	3201      	adds	r2, #1
 8006400:	4319      	orrs	r1, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	bc80      	pop	{r7}
 8006412:	4770      	bx	lr

08006414 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006428:	d11d      	bne.n	8006466 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006432:	4b13      	ldr	r3, [pc, #76]	; (8006480 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006434:	4013      	ands	r3, r2
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	6811      	ldr	r1, [r2, #0]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	6852      	ldr	r2, [r2, #4]
 800643e:	0112      	lsls	r2, r2, #4
 8006440:	4311      	orrs	r1, r2
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	6892      	ldr	r2, [r2, #8]
 8006446:	0212      	lsls	r2, r2, #8
 8006448:	4311      	orrs	r1, r2
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	6992      	ldr	r2, [r2, #24]
 800644e:	4311      	orrs	r1, r2
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	68d2      	ldr	r2, [r2, #12]
 8006454:	0412      	lsls	r2, r2, #16
 8006456:	430a      	orrs	r2, r1
 8006458:	ea43 0102 	orr.w	r1, r3, r2
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006464:	e005      	b.n	8006472 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800646e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	cff00000 	.word	0xcff00000

08006484 <__errno>:
 8006484:	4b01      	ldr	r3, [pc, #4]	; (800648c <__errno+0x8>)
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	20000040 	.word	0x20000040

08006490 <__libc_init_array>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	2600      	movs	r6, #0
 8006494:	4d0c      	ldr	r5, [pc, #48]	; (80064c8 <__libc_init_array+0x38>)
 8006496:	4c0d      	ldr	r4, [pc, #52]	; (80064cc <__libc_init_array+0x3c>)
 8006498:	1b64      	subs	r4, r4, r5
 800649a:	10a4      	asrs	r4, r4, #2
 800649c:	42a6      	cmp	r6, r4
 800649e:	d109      	bne.n	80064b4 <__libc_init_array+0x24>
 80064a0:	f000 fc9c 	bl	8006ddc <_init>
 80064a4:	2600      	movs	r6, #0
 80064a6:	4d0a      	ldr	r5, [pc, #40]	; (80064d0 <__libc_init_array+0x40>)
 80064a8:	4c0a      	ldr	r4, [pc, #40]	; (80064d4 <__libc_init_array+0x44>)
 80064aa:	1b64      	subs	r4, r4, r5
 80064ac:	10a4      	asrs	r4, r4, #2
 80064ae:	42a6      	cmp	r6, r4
 80064b0:	d105      	bne.n	80064be <__libc_init_array+0x2e>
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
 80064b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b8:	4798      	blx	r3
 80064ba:	3601      	adds	r6, #1
 80064bc:	e7ee      	b.n	800649c <__libc_init_array+0xc>
 80064be:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c2:	4798      	blx	r3
 80064c4:	3601      	adds	r6, #1
 80064c6:	e7f2      	b.n	80064ae <__libc_init_array+0x1e>
 80064c8:	0800748c 	.word	0x0800748c
 80064cc:	0800748c 	.word	0x0800748c
 80064d0:	0800748c 	.word	0x0800748c
 80064d4:	08007490 	.word	0x08007490

080064d8 <memset>:
 80064d8:	4603      	mov	r3, r0
 80064da:	4402      	add	r2, r0
 80064dc:	4293      	cmp	r3, r2
 80064de:	d100      	bne.n	80064e2 <memset+0xa>
 80064e0:	4770      	bx	lr
 80064e2:	f803 1b01 	strb.w	r1, [r3], #1
 80064e6:	e7f9      	b.n	80064dc <memset+0x4>

080064e8 <siprintf>:
 80064e8:	b40e      	push	{r1, r2, r3}
 80064ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064ee:	b500      	push	{lr}
 80064f0:	b09c      	sub	sp, #112	; 0x70
 80064f2:	ab1d      	add	r3, sp, #116	; 0x74
 80064f4:	9002      	str	r0, [sp, #8]
 80064f6:	9006      	str	r0, [sp, #24]
 80064f8:	9107      	str	r1, [sp, #28]
 80064fa:	9104      	str	r1, [sp, #16]
 80064fc:	4808      	ldr	r0, [pc, #32]	; (8006520 <siprintf+0x38>)
 80064fe:	4909      	ldr	r1, [pc, #36]	; (8006524 <siprintf+0x3c>)
 8006500:	f853 2b04 	ldr.w	r2, [r3], #4
 8006504:	9105      	str	r1, [sp, #20]
 8006506:	6800      	ldr	r0, [r0, #0]
 8006508:	a902      	add	r1, sp, #8
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	f000 f868 	bl	80065e0 <_svfiprintf_r>
 8006510:	2200      	movs	r2, #0
 8006512:	9b02      	ldr	r3, [sp, #8]
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	b01c      	add	sp, #112	; 0x70
 8006518:	f85d eb04 	ldr.w	lr, [sp], #4
 800651c:	b003      	add	sp, #12
 800651e:	4770      	bx	lr
 8006520:	20000040 	.word	0x20000040
 8006524:	ffff0208 	.word	0xffff0208

08006528 <__ssputs_r>:
 8006528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800652c:	688e      	ldr	r6, [r1, #8]
 800652e:	4682      	mov	sl, r0
 8006530:	429e      	cmp	r6, r3
 8006532:	460c      	mov	r4, r1
 8006534:	4690      	mov	r8, r2
 8006536:	461f      	mov	r7, r3
 8006538:	d838      	bhi.n	80065ac <__ssputs_r+0x84>
 800653a:	898a      	ldrh	r2, [r1, #12]
 800653c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006540:	d032      	beq.n	80065a8 <__ssputs_r+0x80>
 8006542:	6825      	ldr	r5, [r4, #0]
 8006544:	6909      	ldr	r1, [r1, #16]
 8006546:	3301      	adds	r3, #1
 8006548:	eba5 0901 	sub.w	r9, r5, r1
 800654c:	6965      	ldr	r5, [r4, #20]
 800654e:	444b      	add	r3, r9
 8006550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006558:	106d      	asrs	r5, r5, #1
 800655a:	429d      	cmp	r5, r3
 800655c:	bf38      	it	cc
 800655e:	461d      	movcc	r5, r3
 8006560:	0553      	lsls	r3, r2, #21
 8006562:	d531      	bpl.n	80065c8 <__ssputs_r+0xa0>
 8006564:	4629      	mov	r1, r5
 8006566:	f000 fb6f 	bl	8006c48 <_malloc_r>
 800656a:	4606      	mov	r6, r0
 800656c:	b950      	cbnz	r0, 8006584 <__ssputs_r+0x5c>
 800656e:	230c      	movs	r3, #12
 8006570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006574:	f8ca 3000 	str.w	r3, [sl]
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006584:	464a      	mov	r2, r9
 8006586:	6921      	ldr	r1, [r4, #16]
 8006588:	f000 face 	bl	8006b28 <memcpy>
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006596:	81a3      	strh	r3, [r4, #12]
 8006598:	6126      	str	r6, [r4, #16]
 800659a:	444e      	add	r6, r9
 800659c:	6026      	str	r6, [r4, #0]
 800659e:	463e      	mov	r6, r7
 80065a0:	6165      	str	r5, [r4, #20]
 80065a2:	eba5 0509 	sub.w	r5, r5, r9
 80065a6:	60a5      	str	r5, [r4, #8]
 80065a8:	42be      	cmp	r6, r7
 80065aa:	d900      	bls.n	80065ae <__ssputs_r+0x86>
 80065ac:	463e      	mov	r6, r7
 80065ae:	4632      	mov	r2, r6
 80065b0:	4641      	mov	r1, r8
 80065b2:	6820      	ldr	r0, [r4, #0]
 80065b4:	f000 fac6 	bl	8006b44 <memmove>
 80065b8:	68a3      	ldr	r3, [r4, #8]
 80065ba:	2000      	movs	r0, #0
 80065bc:	1b9b      	subs	r3, r3, r6
 80065be:	60a3      	str	r3, [r4, #8]
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	4433      	add	r3, r6
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	e7db      	b.n	8006580 <__ssputs_r+0x58>
 80065c8:	462a      	mov	r2, r5
 80065ca:	f000 fbb1 	bl	8006d30 <_realloc_r>
 80065ce:	4606      	mov	r6, r0
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d1e1      	bne.n	8006598 <__ssputs_r+0x70>
 80065d4:	4650      	mov	r0, sl
 80065d6:	6921      	ldr	r1, [r4, #16]
 80065d8:	f000 face 	bl	8006b78 <_free_r>
 80065dc:	e7c7      	b.n	800656e <__ssputs_r+0x46>
	...

080065e0 <_svfiprintf_r>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	4698      	mov	r8, r3
 80065e6:	898b      	ldrh	r3, [r1, #12]
 80065e8:	4607      	mov	r7, r0
 80065ea:	061b      	lsls	r3, r3, #24
 80065ec:	460d      	mov	r5, r1
 80065ee:	4614      	mov	r4, r2
 80065f0:	b09d      	sub	sp, #116	; 0x74
 80065f2:	d50e      	bpl.n	8006612 <_svfiprintf_r+0x32>
 80065f4:	690b      	ldr	r3, [r1, #16]
 80065f6:	b963      	cbnz	r3, 8006612 <_svfiprintf_r+0x32>
 80065f8:	2140      	movs	r1, #64	; 0x40
 80065fa:	f000 fb25 	bl	8006c48 <_malloc_r>
 80065fe:	6028      	str	r0, [r5, #0]
 8006600:	6128      	str	r0, [r5, #16]
 8006602:	b920      	cbnz	r0, 800660e <_svfiprintf_r+0x2e>
 8006604:	230c      	movs	r3, #12
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800660c:	e0d1      	b.n	80067b2 <_svfiprintf_r+0x1d2>
 800660e:	2340      	movs	r3, #64	; 0x40
 8006610:	616b      	str	r3, [r5, #20]
 8006612:	2300      	movs	r3, #0
 8006614:	9309      	str	r3, [sp, #36]	; 0x24
 8006616:	2320      	movs	r3, #32
 8006618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800661c:	2330      	movs	r3, #48	; 0x30
 800661e:	f04f 0901 	mov.w	r9, #1
 8006622:	f8cd 800c 	str.w	r8, [sp, #12]
 8006626:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80067cc <_svfiprintf_r+0x1ec>
 800662a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800662e:	4623      	mov	r3, r4
 8006630:	469a      	mov	sl, r3
 8006632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006636:	b10a      	cbz	r2, 800663c <_svfiprintf_r+0x5c>
 8006638:	2a25      	cmp	r2, #37	; 0x25
 800663a:	d1f9      	bne.n	8006630 <_svfiprintf_r+0x50>
 800663c:	ebba 0b04 	subs.w	fp, sl, r4
 8006640:	d00b      	beq.n	800665a <_svfiprintf_r+0x7a>
 8006642:	465b      	mov	r3, fp
 8006644:	4622      	mov	r2, r4
 8006646:	4629      	mov	r1, r5
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff ff6d 	bl	8006528 <__ssputs_r>
 800664e:	3001      	adds	r0, #1
 8006650:	f000 80aa 	beq.w	80067a8 <_svfiprintf_r+0x1c8>
 8006654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006656:	445a      	add	r2, fp
 8006658:	9209      	str	r2, [sp, #36]	; 0x24
 800665a:	f89a 3000 	ldrb.w	r3, [sl]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 80a2 	beq.w	80067a8 <_svfiprintf_r+0x1c8>
 8006664:	2300      	movs	r3, #0
 8006666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800666a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800666e:	f10a 0a01 	add.w	sl, sl, #1
 8006672:	9304      	str	r3, [sp, #16]
 8006674:	9307      	str	r3, [sp, #28]
 8006676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800667a:	931a      	str	r3, [sp, #104]	; 0x68
 800667c:	4654      	mov	r4, sl
 800667e:	2205      	movs	r2, #5
 8006680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006684:	4851      	ldr	r0, [pc, #324]	; (80067cc <_svfiprintf_r+0x1ec>)
 8006686:	f000 fa41 	bl	8006b0c <memchr>
 800668a:	9a04      	ldr	r2, [sp, #16]
 800668c:	b9d8      	cbnz	r0, 80066c6 <_svfiprintf_r+0xe6>
 800668e:	06d0      	lsls	r0, r2, #27
 8006690:	bf44      	itt	mi
 8006692:	2320      	movmi	r3, #32
 8006694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006698:	0711      	lsls	r1, r2, #28
 800669a:	bf44      	itt	mi
 800669c:	232b      	movmi	r3, #43	; 0x2b
 800669e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066a2:	f89a 3000 	ldrb.w	r3, [sl]
 80066a6:	2b2a      	cmp	r3, #42	; 0x2a
 80066a8:	d015      	beq.n	80066d6 <_svfiprintf_r+0xf6>
 80066aa:	4654      	mov	r4, sl
 80066ac:	2000      	movs	r0, #0
 80066ae:	f04f 0c0a 	mov.w	ip, #10
 80066b2:	9a07      	ldr	r2, [sp, #28]
 80066b4:	4621      	mov	r1, r4
 80066b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ba:	3b30      	subs	r3, #48	; 0x30
 80066bc:	2b09      	cmp	r3, #9
 80066be:	d94e      	bls.n	800675e <_svfiprintf_r+0x17e>
 80066c0:	b1b0      	cbz	r0, 80066f0 <_svfiprintf_r+0x110>
 80066c2:	9207      	str	r2, [sp, #28]
 80066c4:	e014      	b.n	80066f0 <_svfiprintf_r+0x110>
 80066c6:	eba0 0308 	sub.w	r3, r0, r8
 80066ca:	fa09 f303 	lsl.w	r3, r9, r3
 80066ce:	4313      	orrs	r3, r2
 80066d0:	46a2      	mov	sl, r4
 80066d2:	9304      	str	r3, [sp, #16]
 80066d4:	e7d2      	b.n	800667c <_svfiprintf_r+0x9c>
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	1d19      	adds	r1, r3, #4
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	9103      	str	r1, [sp, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bfbb      	ittet	lt
 80066e2:	425b      	neglt	r3, r3
 80066e4:	f042 0202 	orrlt.w	r2, r2, #2
 80066e8:	9307      	strge	r3, [sp, #28]
 80066ea:	9307      	strlt	r3, [sp, #28]
 80066ec:	bfb8      	it	lt
 80066ee:	9204      	strlt	r2, [sp, #16]
 80066f0:	7823      	ldrb	r3, [r4, #0]
 80066f2:	2b2e      	cmp	r3, #46	; 0x2e
 80066f4:	d10c      	bne.n	8006710 <_svfiprintf_r+0x130>
 80066f6:	7863      	ldrb	r3, [r4, #1]
 80066f8:	2b2a      	cmp	r3, #42	; 0x2a
 80066fa:	d135      	bne.n	8006768 <_svfiprintf_r+0x188>
 80066fc:	9b03      	ldr	r3, [sp, #12]
 80066fe:	3402      	adds	r4, #2
 8006700:	1d1a      	adds	r2, r3, #4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	9203      	str	r2, [sp, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	bfb8      	it	lt
 800670a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800670e:	9305      	str	r3, [sp, #20]
 8006710:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80067d0 <_svfiprintf_r+0x1f0>
 8006714:	2203      	movs	r2, #3
 8006716:	4650      	mov	r0, sl
 8006718:	7821      	ldrb	r1, [r4, #0]
 800671a:	f000 f9f7 	bl	8006b0c <memchr>
 800671e:	b140      	cbz	r0, 8006732 <_svfiprintf_r+0x152>
 8006720:	2340      	movs	r3, #64	; 0x40
 8006722:	eba0 000a 	sub.w	r0, r0, sl
 8006726:	fa03 f000 	lsl.w	r0, r3, r0
 800672a:	9b04      	ldr	r3, [sp, #16]
 800672c:	3401      	adds	r4, #1
 800672e:	4303      	orrs	r3, r0
 8006730:	9304      	str	r3, [sp, #16]
 8006732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006736:	2206      	movs	r2, #6
 8006738:	4826      	ldr	r0, [pc, #152]	; (80067d4 <_svfiprintf_r+0x1f4>)
 800673a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800673e:	f000 f9e5 	bl	8006b0c <memchr>
 8006742:	2800      	cmp	r0, #0
 8006744:	d038      	beq.n	80067b8 <_svfiprintf_r+0x1d8>
 8006746:	4b24      	ldr	r3, [pc, #144]	; (80067d8 <_svfiprintf_r+0x1f8>)
 8006748:	bb1b      	cbnz	r3, 8006792 <_svfiprintf_r+0x1b2>
 800674a:	9b03      	ldr	r3, [sp, #12]
 800674c:	3307      	adds	r3, #7
 800674e:	f023 0307 	bic.w	r3, r3, #7
 8006752:	3308      	adds	r3, #8
 8006754:	9303      	str	r3, [sp, #12]
 8006756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006758:	4433      	add	r3, r6
 800675a:	9309      	str	r3, [sp, #36]	; 0x24
 800675c:	e767      	b.n	800662e <_svfiprintf_r+0x4e>
 800675e:	460c      	mov	r4, r1
 8006760:	2001      	movs	r0, #1
 8006762:	fb0c 3202 	mla	r2, ip, r2, r3
 8006766:	e7a5      	b.n	80066b4 <_svfiprintf_r+0xd4>
 8006768:	2300      	movs	r3, #0
 800676a:	f04f 0c0a 	mov.w	ip, #10
 800676e:	4619      	mov	r1, r3
 8006770:	3401      	adds	r4, #1
 8006772:	9305      	str	r3, [sp, #20]
 8006774:	4620      	mov	r0, r4
 8006776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800677a:	3a30      	subs	r2, #48	; 0x30
 800677c:	2a09      	cmp	r2, #9
 800677e:	d903      	bls.n	8006788 <_svfiprintf_r+0x1a8>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0c5      	beq.n	8006710 <_svfiprintf_r+0x130>
 8006784:	9105      	str	r1, [sp, #20]
 8006786:	e7c3      	b.n	8006710 <_svfiprintf_r+0x130>
 8006788:	4604      	mov	r4, r0
 800678a:	2301      	movs	r3, #1
 800678c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006790:	e7f0      	b.n	8006774 <_svfiprintf_r+0x194>
 8006792:	ab03      	add	r3, sp, #12
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	462a      	mov	r2, r5
 8006798:	4638      	mov	r0, r7
 800679a:	4b10      	ldr	r3, [pc, #64]	; (80067dc <_svfiprintf_r+0x1fc>)
 800679c:	a904      	add	r1, sp, #16
 800679e:	f3af 8000 	nop.w
 80067a2:	1c42      	adds	r2, r0, #1
 80067a4:	4606      	mov	r6, r0
 80067a6:	d1d6      	bne.n	8006756 <_svfiprintf_r+0x176>
 80067a8:	89ab      	ldrh	r3, [r5, #12]
 80067aa:	065b      	lsls	r3, r3, #25
 80067ac:	f53f af2c 	bmi.w	8006608 <_svfiprintf_r+0x28>
 80067b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067b2:	b01d      	add	sp, #116	; 0x74
 80067b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b8:	ab03      	add	r3, sp, #12
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	462a      	mov	r2, r5
 80067be:	4638      	mov	r0, r7
 80067c0:	4b06      	ldr	r3, [pc, #24]	; (80067dc <_svfiprintf_r+0x1fc>)
 80067c2:	a904      	add	r1, sp, #16
 80067c4:	f000 f87c 	bl	80068c0 <_printf_i>
 80067c8:	e7eb      	b.n	80067a2 <_svfiprintf_r+0x1c2>
 80067ca:	bf00      	nop
 80067cc:	08007458 	.word	0x08007458
 80067d0:	0800745e 	.word	0x0800745e
 80067d4:	08007462 	.word	0x08007462
 80067d8:	00000000 	.word	0x00000000
 80067dc:	08006529 	.word	0x08006529

080067e0 <_printf_common>:
 80067e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e4:	4616      	mov	r6, r2
 80067e6:	4699      	mov	r9, r3
 80067e8:	688a      	ldr	r2, [r1, #8]
 80067ea:	690b      	ldr	r3, [r1, #16]
 80067ec:	4607      	mov	r7, r0
 80067ee:	4293      	cmp	r3, r2
 80067f0:	bfb8      	it	lt
 80067f2:	4613      	movlt	r3, r2
 80067f4:	6033      	str	r3, [r6, #0]
 80067f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067fa:	460c      	mov	r4, r1
 80067fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006800:	b10a      	cbz	r2, 8006806 <_printf_common+0x26>
 8006802:	3301      	adds	r3, #1
 8006804:	6033      	str	r3, [r6, #0]
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	0699      	lsls	r1, r3, #26
 800680a:	bf42      	ittt	mi
 800680c:	6833      	ldrmi	r3, [r6, #0]
 800680e:	3302      	addmi	r3, #2
 8006810:	6033      	strmi	r3, [r6, #0]
 8006812:	6825      	ldr	r5, [r4, #0]
 8006814:	f015 0506 	ands.w	r5, r5, #6
 8006818:	d106      	bne.n	8006828 <_printf_common+0x48>
 800681a:	f104 0a19 	add.w	sl, r4, #25
 800681e:	68e3      	ldr	r3, [r4, #12]
 8006820:	6832      	ldr	r2, [r6, #0]
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	42ab      	cmp	r3, r5
 8006826:	dc28      	bgt.n	800687a <_printf_common+0x9a>
 8006828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800682c:	1e13      	subs	r3, r2, #0
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	bf18      	it	ne
 8006832:	2301      	movne	r3, #1
 8006834:	0692      	lsls	r2, r2, #26
 8006836:	d42d      	bmi.n	8006894 <_printf_common+0xb4>
 8006838:	4649      	mov	r1, r9
 800683a:	4638      	mov	r0, r7
 800683c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006840:	47c0      	blx	r8
 8006842:	3001      	adds	r0, #1
 8006844:	d020      	beq.n	8006888 <_printf_common+0xa8>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	68e5      	ldr	r5, [r4, #12]
 800684a:	f003 0306 	and.w	r3, r3, #6
 800684e:	2b04      	cmp	r3, #4
 8006850:	bf18      	it	ne
 8006852:	2500      	movne	r5, #0
 8006854:	6832      	ldr	r2, [r6, #0]
 8006856:	f04f 0600 	mov.w	r6, #0
 800685a:	68a3      	ldr	r3, [r4, #8]
 800685c:	bf08      	it	eq
 800685e:	1aad      	subeq	r5, r5, r2
 8006860:	6922      	ldr	r2, [r4, #16]
 8006862:	bf08      	it	eq
 8006864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006868:	4293      	cmp	r3, r2
 800686a:	bfc4      	itt	gt
 800686c:	1a9b      	subgt	r3, r3, r2
 800686e:	18ed      	addgt	r5, r5, r3
 8006870:	341a      	adds	r4, #26
 8006872:	42b5      	cmp	r5, r6
 8006874:	d11a      	bne.n	80068ac <_printf_common+0xcc>
 8006876:	2000      	movs	r0, #0
 8006878:	e008      	b.n	800688c <_printf_common+0xac>
 800687a:	2301      	movs	r3, #1
 800687c:	4652      	mov	r2, sl
 800687e:	4649      	mov	r1, r9
 8006880:	4638      	mov	r0, r7
 8006882:	47c0      	blx	r8
 8006884:	3001      	adds	r0, #1
 8006886:	d103      	bne.n	8006890 <_printf_common+0xb0>
 8006888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800688c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006890:	3501      	adds	r5, #1
 8006892:	e7c4      	b.n	800681e <_printf_common+0x3e>
 8006894:	2030      	movs	r0, #48	; 0x30
 8006896:	18e1      	adds	r1, r4, r3
 8006898:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068a2:	4422      	add	r2, r4
 80068a4:	3302      	adds	r3, #2
 80068a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068aa:	e7c5      	b.n	8006838 <_printf_common+0x58>
 80068ac:	2301      	movs	r3, #1
 80068ae:	4622      	mov	r2, r4
 80068b0:	4649      	mov	r1, r9
 80068b2:	4638      	mov	r0, r7
 80068b4:	47c0      	blx	r8
 80068b6:	3001      	adds	r0, #1
 80068b8:	d0e6      	beq.n	8006888 <_printf_common+0xa8>
 80068ba:	3601      	adds	r6, #1
 80068bc:	e7d9      	b.n	8006872 <_printf_common+0x92>
	...

080068c0 <_printf_i>:
 80068c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068c4:	7e0f      	ldrb	r7, [r1, #24]
 80068c6:	4691      	mov	r9, r2
 80068c8:	2f78      	cmp	r7, #120	; 0x78
 80068ca:	4680      	mov	r8, r0
 80068cc:	460c      	mov	r4, r1
 80068ce:	469a      	mov	sl, r3
 80068d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068d6:	d807      	bhi.n	80068e8 <_printf_i+0x28>
 80068d8:	2f62      	cmp	r7, #98	; 0x62
 80068da:	d80a      	bhi.n	80068f2 <_printf_i+0x32>
 80068dc:	2f00      	cmp	r7, #0
 80068de:	f000 80d9 	beq.w	8006a94 <_printf_i+0x1d4>
 80068e2:	2f58      	cmp	r7, #88	; 0x58
 80068e4:	f000 80a4 	beq.w	8006a30 <_printf_i+0x170>
 80068e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068f0:	e03a      	b.n	8006968 <_printf_i+0xa8>
 80068f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068f6:	2b15      	cmp	r3, #21
 80068f8:	d8f6      	bhi.n	80068e8 <_printf_i+0x28>
 80068fa:	a101      	add	r1, pc, #4	; (adr r1, 8006900 <_printf_i+0x40>)
 80068fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006900:	08006959 	.word	0x08006959
 8006904:	0800696d 	.word	0x0800696d
 8006908:	080068e9 	.word	0x080068e9
 800690c:	080068e9 	.word	0x080068e9
 8006910:	080068e9 	.word	0x080068e9
 8006914:	080068e9 	.word	0x080068e9
 8006918:	0800696d 	.word	0x0800696d
 800691c:	080068e9 	.word	0x080068e9
 8006920:	080068e9 	.word	0x080068e9
 8006924:	080068e9 	.word	0x080068e9
 8006928:	080068e9 	.word	0x080068e9
 800692c:	08006a7b 	.word	0x08006a7b
 8006930:	0800699d 	.word	0x0800699d
 8006934:	08006a5d 	.word	0x08006a5d
 8006938:	080068e9 	.word	0x080068e9
 800693c:	080068e9 	.word	0x080068e9
 8006940:	08006a9d 	.word	0x08006a9d
 8006944:	080068e9 	.word	0x080068e9
 8006948:	0800699d 	.word	0x0800699d
 800694c:	080068e9 	.word	0x080068e9
 8006950:	080068e9 	.word	0x080068e9
 8006954:	08006a65 	.word	0x08006a65
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	1d1a      	adds	r2, r3, #4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	602a      	str	r2, [r5, #0]
 8006960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006968:	2301      	movs	r3, #1
 800696a:	e0a4      	b.n	8006ab6 <_printf_i+0x1f6>
 800696c:	6820      	ldr	r0, [r4, #0]
 800696e:	6829      	ldr	r1, [r5, #0]
 8006970:	0606      	lsls	r6, r0, #24
 8006972:	f101 0304 	add.w	r3, r1, #4
 8006976:	d50a      	bpl.n	800698e <_printf_i+0xce>
 8006978:	680e      	ldr	r6, [r1, #0]
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	2e00      	cmp	r6, #0
 800697e:	da03      	bge.n	8006988 <_printf_i+0xc8>
 8006980:	232d      	movs	r3, #45	; 0x2d
 8006982:	4276      	negs	r6, r6
 8006984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006988:	230a      	movs	r3, #10
 800698a:	485e      	ldr	r0, [pc, #376]	; (8006b04 <_printf_i+0x244>)
 800698c:	e019      	b.n	80069c2 <_printf_i+0x102>
 800698e:	680e      	ldr	r6, [r1, #0]
 8006990:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006994:	602b      	str	r3, [r5, #0]
 8006996:	bf18      	it	ne
 8006998:	b236      	sxthne	r6, r6
 800699a:	e7ef      	b.n	800697c <_printf_i+0xbc>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	6820      	ldr	r0, [r4, #0]
 80069a0:	1d19      	adds	r1, r3, #4
 80069a2:	6029      	str	r1, [r5, #0]
 80069a4:	0601      	lsls	r1, r0, #24
 80069a6:	d501      	bpl.n	80069ac <_printf_i+0xec>
 80069a8:	681e      	ldr	r6, [r3, #0]
 80069aa:	e002      	b.n	80069b2 <_printf_i+0xf2>
 80069ac:	0646      	lsls	r6, r0, #25
 80069ae:	d5fb      	bpl.n	80069a8 <_printf_i+0xe8>
 80069b0:	881e      	ldrh	r6, [r3, #0]
 80069b2:	2f6f      	cmp	r7, #111	; 0x6f
 80069b4:	bf0c      	ite	eq
 80069b6:	2308      	moveq	r3, #8
 80069b8:	230a      	movne	r3, #10
 80069ba:	4852      	ldr	r0, [pc, #328]	; (8006b04 <_printf_i+0x244>)
 80069bc:	2100      	movs	r1, #0
 80069be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069c2:	6865      	ldr	r5, [r4, #4]
 80069c4:	2d00      	cmp	r5, #0
 80069c6:	bfa8      	it	ge
 80069c8:	6821      	ldrge	r1, [r4, #0]
 80069ca:	60a5      	str	r5, [r4, #8]
 80069cc:	bfa4      	itt	ge
 80069ce:	f021 0104 	bicge.w	r1, r1, #4
 80069d2:	6021      	strge	r1, [r4, #0]
 80069d4:	b90e      	cbnz	r6, 80069da <_printf_i+0x11a>
 80069d6:	2d00      	cmp	r5, #0
 80069d8:	d04d      	beq.n	8006a76 <_printf_i+0x1b6>
 80069da:	4615      	mov	r5, r2
 80069dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80069e0:	fb03 6711 	mls	r7, r3, r1, r6
 80069e4:	5dc7      	ldrb	r7, [r0, r7]
 80069e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069ea:	4637      	mov	r7, r6
 80069ec:	42bb      	cmp	r3, r7
 80069ee:	460e      	mov	r6, r1
 80069f0:	d9f4      	bls.n	80069dc <_printf_i+0x11c>
 80069f2:	2b08      	cmp	r3, #8
 80069f4:	d10b      	bne.n	8006a0e <_printf_i+0x14e>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	07de      	lsls	r6, r3, #31
 80069fa:	d508      	bpl.n	8006a0e <_printf_i+0x14e>
 80069fc:	6923      	ldr	r3, [r4, #16]
 80069fe:	6861      	ldr	r1, [r4, #4]
 8006a00:	4299      	cmp	r1, r3
 8006a02:	bfde      	ittt	le
 8006a04:	2330      	movle	r3, #48	; 0x30
 8006a06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a0a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006a0e:	1b52      	subs	r2, r2, r5
 8006a10:	6122      	str	r2, [r4, #16]
 8006a12:	464b      	mov	r3, r9
 8006a14:	4621      	mov	r1, r4
 8006a16:	4640      	mov	r0, r8
 8006a18:	f8cd a000 	str.w	sl, [sp]
 8006a1c:	aa03      	add	r2, sp, #12
 8006a1e:	f7ff fedf 	bl	80067e0 <_printf_common>
 8006a22:	3001      	adds	r0, #1
 8006a24:	d14c      	bne.n	8006ac0 <_printf_i+0x200>
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a2a:	b004      	add	sp, #16
 8006a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a30:	4834      	ldr	r0, [pc, #208]	; (8006b04 <_printf_i+0x244>)
 8006a32:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a36:	6829      	ldr	r1, [r5, #0]
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a3e:	6029      	str	r1, [r5, #0]
 8006a40:	061d      	lsls	r5, r3, #24
 8006a42:	d514      	bpl.n	8006a6e <_printf_i+0x1ae>
 8006a44:	07df      	lsls	r7, r3, #31
 8006a46:	bf44      	itt	mi
 8006a48:	f043 0320 	orrmi.w	r3, r3, #32
 8006a4c:	6023      	strmi	r3, [r4, #0]
 8006a4e:	b91e      	cbnz	r6, 8006a58 <_printf_i+0x198>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	f023 0320 	bic.w	r3, r3, #32
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	2310      	movs	r3, #16
 8006a5a:	e7af      	b.n	80069bc <_printf_i+0xfc>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	f043 0320 	orr.w	r3, r3, #32
 8006a62:	6023      	str	r3, [r4, #0]
 8006a64:	2378      	movs	r3, #120	; 0x78
 8006a66:	4828      	ldr	r0, [pc, #160]	; (8006b08 <_printf_i+0x248>)
 8006a68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a6c:	e7e3      	b.n	8006a36 <_printf_i+0x176>
 8006a6e:	0659      	lsls	r1, r3, #25
 8006a70:	bf48      	it	mi
 8006a72:	b2b6      	uxthmi	r6, r6
 8006a74:	e7e6      	b.n	8006a44 <_printf_i+0x184>
 8006a76:	4615      	mov	r5, r2
 8006a78:	e7bb      	b.n	80069f2 <_printf_i+0x132>
 8006a7a:	682b      	ldr	r3, [r5, #0]
 8006a7c:	6826      	ldr	r6, [r4, #0]
 8006a7e:	1d18      	adds	r0, r3, #4
 8006a80:	6961      	ldr	r1, [r4, #20]
 8006a82:	6028      	str	r0, [r5, #0]
 8006a84:	0635      	lsls	r5, r6, #24
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	d501      	bpl.n	8006a8e <_printf_i+0x1ce>
 8006a8a:	6019      	str	r1, [r3, #0]
 8006a8c:	e002      	b.n	8006a94 <_printf_i+0x1d4>
 8006a8e:	0670      	lsls	r0, r6, #25
 8006a90:	d5fb      	bpl.n	8006a8a <_printf_i+0x1ca>
 8006a92:	8019      	strh	r1, [r3, #0]
 8006a94:	2300      	movs	r3, #0
 8006a96:	4615      	mov	r5, r2
 8006a98:	6123      	str	r3, [r4, #16]
 8006a9a:	e7ba      	b.n	8006a12 <_printf_i+0x152>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	1d1a      	adds	r2, r3, #4
 8006aa2:	602a      	str	r2, [r5, #0]
 8006aa4:	681d      	ldr	r5, [r3, #0]
 8006aa6:	6862      	ldr	r2, [r4, #4]
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f000 f82f 	bl	8006b0c <memchr>
 8006aae:	b108      	cbz	r0, 8006ab4 <_printf_i+0x1f4>
 8006ab0:	1b40      	subs	r0, r0, r5
 8006ab2:	6060      	str	r0, [r4, #4]
 8006ab4:	6863      	ldr	r3, [r4, #4]
 8006ab6:	6123      	str	r3, [r4, #16]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006abe:	e7a8      	b.n	8006a12 <_printf_i+0x152>
 8006ac0:	462a      	mov	r2, r5
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	6923      	ldr	r3, [r4, #16]
 8006ac8:	47d0      	blx	sl
 8006aca:	3001      	adds	r0, #1
 8006acc:	d0ab      	beq.n	8006a26 <_printf_i+0x166>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	079b      	lsls	r3, r3, #30
 8006ad2:	d413      	bmi.n	8006afc <_printf_i+0x23c>
 8006ad4:	68e0      	ldr	r0, [r4, #12]
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	4298      	cmp	r0, r3
 8006ada:	bfb8      	it	lt
 8006adc:	4618      	movlt	r0, r3
 8006ade:	e7a4      	b.n	8006a2a <_printf_i+0x16a>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4632      	mov	r2, r6
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	47d0      	blx	sl
 8006aea:	3001      	adds	r0, #1
 8006aec:	d09b      	beq.n	8006a26 <_printf_i+0x166>
 8006aee:	3501      	adds	r5, #1
 8006af0:	68e3      	ldr	r3, [r4, #12]
 8006af2:	9903      	ldr	r1, [sp, #12]
 8006af4:	1a5b      	subs	r3, r3, r1
 8006af6:	42ab      	cmp	r3, r5
 8006af8:	dcf2      	bgt.n	8006ae0 <_printf_i+0x220>
 8006afa:	e7eb      	b.n	8006ad4 <_printf_i+0x214>
 8006afc:	2500      	movs	r5, #0
 8006afe:	f104 0619 	add.w	r6, r4, #25
 8006b02:	e7f5      	b.n	8006af0 <_printf_i+0x230>
 8006b04:	08007469 	.word	0x08007469
 8006b08:	0800747a 	.word	0x0800747a

08006b0c <memchr>:
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	b2c9      	uxtb	r1, r1
 8006b12:	4402      	add	r2, r0
 8006b14:	4293      	cmp	r3, r2
 8006b16:	4618      	mov	r0, r3
 8006b18:	d101      	bne.n	8006b1e <memchr+0x12>
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	e003      	b.n	8006b26 <memchr+0x1a>
 8006b1e:	7804      	ldrb	r4, [r0, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	428c      	cmp	r4, r1
 8006b24:	d1f6      	bne.n	8006b14 <memchr+0x8>
 8006b26:	bd10      	pop	{r4, pc}

08006b28 <memcpy>:
 8006b28:	440a      	add	r2, r1
 8006b2a:	4291      	cmp	r1, r2
 8006b2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006b30:	d100      	bne.n	8006b34 <memcpy+0xc>
 8006b32:	4770      	bx	lr
 8006b34:	b510      	push	{r4, lr}
 8006b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b3a:	4291      	cmp	r1, r2
 8006b3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b40:	d1f9      	bne.n	8006b36 <memcpy+0xe>
 8006b42:	bd10      	pop	{r4, pc}

08006b44 <memmove>:
 8006b44:	4288      	cmp	r0, r1
 8006b46:	b510      	push	{r4, lr}
 8006b48:	eb01 0402 	add.w	r4, r1, r2
 8006b4c:	d902      	bls.n	8006b54 <memmove+0x10>
 8006b4e:	4284      	cmp	r4, r0
 8006b50:	4623      	mov	r3, r4
 8006b52:	d807      	bhi.n	8006b64 <memmove+0x20>
 8006b54:	1e43      	subs	r3, r0, #1
 8006b56:	42a1      	cmp	r1, r4
 8006b58:	d008      	beq.n	8006b6c <memmove+0x28>
 8006b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b62:	e7f8      	b.n	8006b56 <memmove+0x12>
 8006b64:	4601      	mov	r1, r0
 8006b66:	4402      	add	r2, r0
 8006b68:	428a      	cmp	r2, r1
 8006b6a:	d100      	bne.n	8006b6e <memmove+0x2a>
 8006b6c:	bd10      	pop	{r4, pc}
 8006b6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b76:	e7f7      	b.n	8006b68 <memmove+0x24>

08006b78 <_free_r>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	2900      	cmp	r1, #0
 8006b7e:	d040      	beq.n	8006c02 <_free_r+0x8a>
 8006b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b84:	1f0c      	subs	r4, r1, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	bfb8      	it	lt
 8006b8a:	18e4      	addlt	r4, r4, r3
 8006b8c:	f000 f910 	bl	8006db0 <__malloc_lock>
 8006b90:	4a1c      	ldr	r2, [pc, #112]	; (8006c04 <_free_r+0x8c>)
 8006b92:	6813      	ldr	r3, [r2, #0]
 8006b94:	b933      	cbnz	r3, 8006ba4 <_free_r+0x2c>
 8006b96:	6063      	str	r3, [r4, #4]
 8006b98:	6014      	str	r4, [r2, #0]
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ba0:	f000 b90c 	b.w	8006dbc <__malloc_unlock>
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	d908      	bls.n	8006bba <_free_r+0x42>
 8006ba8:	6820      	ldr	r0, [r4, #0]
 8006baa:	1821      	adds	r1, r4, r0
 8006bac:	428b      	cmp	r3, r1
 8006bae:	bf01      	itttt	eq
 8006bb0:	6819      	ldreq	r1, [r3, #0]
 8006bb2:	685b      	ldreq	r3, [r3, #4]
 8006bb4:	1809      	addeq	r1, r1, r0
 8006bb6:	6021      	streq	r1, [r4, #0]
 8006bb8:	e7ed      	b.n	8006b96 <_free_r+0x1e>
 8006bba:	461a      	mov	r2, r3
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	b10b      	cbz	r3, 8006bc4 <_free_r+0x4c>
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	d9fa      	bls.n	8006bba <_free_r+0x42>
 8006bc4:	6811      	ldr	r1, [r2, #0]
 8006bc6:	1850      	adds	r0, r2, r1
 8006bc8:	42a0      	cmp	r0, r4
 8006bca:	d10b      	bne.n	8006be4 <_free_r+0x6c>
 8006bcc:	6820      	ldr	r0, [r4, #0]
 8006bce:	4401      	add	r1, r0
 8006bd0:	1850      	adds	r0, r2, r1
 8006bd2:	4283      	cmp	r3, r0
 8006bd4:	6011      	str	r1, [r2, #0]
 8006bd6:	d1e0      	bne.n	8006b9a <_free_r+0x22>
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	4401      	add	r1, r0
 8006bde:	6011      	str	r1, [r2, #0]
 8006be0:	6053      	str	r3, [r2, #4]
 8006be2:	e7da      	b.n	8006b9a <_free_r+0x22>
 8006be4:	d902      	bls.n	8006bec <_free_r+0x74>
 8006be6:	230c      	movs	r3, #12
 8006be8:	602b      	str	r3, [r5, #0]
 8006bea:	e7d6      	b.n	8006b9a <_free_r+0x22>
 8006bec:	6820      	ldr	r0, [r4, #0]
 8006bee:	1821      	adds	r1, r4, r0
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	bf01      	itttt	eq
 8006bf4:	6819      	ldreq	r1, [r3, #0]
 8006bf6:	685b      	ldreq	r3, [r3, #4]
 8006bf8:	1809      	addeq	r1, r1, r0
 8006bfa:	6021      	streq	r1, [r4, #0]
 8006bfc:	6063      	str	r3, [r4, #4]
 8006bfe:	6054      	str	r4, [r2, #4]
 8006c00:	e7cb      	b.n	8006b9a <_free_r+0x22>
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	200007a0 	.word	0x200007a0

08006c08 <sbrk_aligned>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	4e0e      	ldr	r6, [pc, #56]	; (8006c44 <sbrk_aligned+0x3c>)
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	6831      	ldr	r1, [r6, #0]
 8006c10:	4605      	mov	r5, r0
 8006c12:	b911      	cbnz	r1, 8006c1a <sbrk_aligned+0x12>
 8006c14:	f000 f8bc 	bl	8006d90 <_sbrk_r>
 8006c18:	6030      	str	r0, [r6, #0]
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f000 f8b7 	bl	8006d90 <_sbrk_r>
 8006c22:	1c43      	adds	r3, r0, #1
 8006c24:	d00a      	beq.n	8006c3c <sbrk_aligned+0x34>
 8006c26:	1cc4      	adds	r4, r0, #3
 8006c28:	f024 0403 	bic.w	r4, r4, #3
 8006c2c:	42a0      	cmp	r0, r4
 8006c2e:	d007      	beq.n	8006c40 <sbrk_aligned+0x38>
 8006c30:	1a21      	subs	r1, r4, r0
 8006c32:	4628      	mov	r0, r5
 8006c34:	f000 f8ac 	bl	8006d90 <_sbrk_r>
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d101      	bne.n	8006c40 <sbrk_aligned+0x38>
 8006c3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006c40:	4620      	mov	r0, r4
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	200007a4 	.word	0x200007a4

08006c48 <_malloc_r>:
 8006c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c4c:	1ccd      	adds	r5, r1, #3
 8006c4e:	f025 0503 	bic.w	r5, r5, #3
 8006c52:	3508      	adds	r5, #8
 8006c54:	2d0c      	cmp	r5, #12
 8006c56:	bf38      	it	cc
 8006c58:	250c      	movcc	r5, #12
 8006c5a:	2d00      	cmp	r5, #0
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	db01      	blt.n	8006c64 <_malloc_r+0x1c>
 8006c60:	42a9      	cmp	r1, r5
 8006c62:	d905      	bls.n	8006c70 <_malloc_r+0x28>
 8006c64:	230c      	movs	r3, #12
 8006c66:	2600      	movs	r6, #0
 8006c68:	603b      	str	r3, [r7, #0]
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c70:	4e2e      	ldr	r6, [pc, #184]	; (8006d2c <_malloc_r+0xe4>)
 8006c72:	f000 f89d 	bl	8006db0 <__malloc_lock>
 8006c76:	6833      	ldr	r3, [r6, #0]
 8006c78:	461c      	mov	r4, r3
 8006c7a:	bb34      	cbnz	r4, 8006cca <_malloc_r+0x82>
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f7ff ffc2 	bl	8006c08 <sbrk_aligned>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	4604      	mov	r4, r0
 8006c88:	d14d      	bne.n	8006d26 <_malloc_r+0xde>
 8006c8a:	6834      	ldr	r4, [r6, #0]
 8006c8c:	4626      	mov	r6, r4
 8006c8e:	2e00      	cmp	r6, #0
 8006c90:	d140      	bne.n	8006d14 <_malloc_r+0xcc>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	4631      	mov	r1, r6
 8006c96:	4638      	mov	r0, r7
 8006c98:	eb04 0803 	add.w	r8, r4, r3
 8006c9c:	f000 f878 	bl	8006d90 <_sbrk_r>
 8006ca0:	4580      	cmp	r8, r0
 8006ca2:	d13a      	bne.n	8006d1a <_malloc_r+0xd2>
 8006ca4:	6821      	ldr	r1, [r4, #0]
 8006ca6:	3503      	adds	r5, #3
 8006ca8:	1a6d      	subs	r5, r5, r1
 8006caa:	f025 0503 	bic.w	r5, r5, #3
 8006cae:	3508      	adds	r5, #8
 8006cb0:	2d0c      	cmp	r5, #12
 8006cb2:	bf38      	it	cc
 8006cb4:	250c      	movcc	r5, #12
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7ff ffa5 	bl	8006c08 <sbrk_aligned>
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	d02b      	beq.n	8006d1a <_malloc_r+0xd2>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	442b      	add	r3, r5
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	e00e      	b.n	8006ce8 <_malloc_r+0xa0>
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	1b52      	subs	r2, r2, r5
 8006cce:	d41e      	bmi.n	8006d0e <_malloc_r+0xc6>
 8006cd0:	2a0b      	cmp	r2, #11
 8006cd2:	d916      	bls.n	8006d02 <_malloc_r+0xba>
 8006cd4:	1961      	adds	r1, r4, r5
 8006cd6:	42a3      	cmp	r3, r4
 8006cd8:	6025      	str	r5, [r4, #0]
 8006cda:	bf18      	it	ne
 8006cdc:	6059      	strne	r1, [r3, #4]
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	bf08      	it	eq
 8006ce2:	6031      	streq	r1, [r6, #0]
 8006ce4:	5162      	str	r2, [r4, r5]
 8006ce6:	604b      	str	r3, [r1, #4]
 8006ce8:	4638      	mov	r0, r7
 8006cea:	f104 060b 	add.w	r6, r4, #11
 8006cee:	f000 f865 	bl	8006dbc <__malloc_unlock>
 8006cf2:	f026 0607 	bic.w	r6, r6, #7
 8006cf6:	1d23      	adds	r3, r4, #4
 8006cf8:	1af2      	subs	r2, r6, r3
 8006cfa:	d0b6      	beq.n	8006c6a <_malloc_r+0x22>
 8006cfc:	1b9b      	subs	r3, r3, r6
 8006cfe:	50a3      	str	r3, [r4, r2]
 8006d00:	e7b3      	b.n	8006c6a <_malloc_r+0x22>
 8006d02:	6862      	ldr	r2, [r4, #4]
 8006d04:	42a3      	cmp	r3, r4
 8006d06:	bf0c      	ite	eq
 8006d08:	6032      	streq	r2, [r6, #0]
 8006d0a:	605a      	strne	r2, [r3, #4]
 8006d0c:	e7ec      	b.n	8006ce8 <_malloc_r+0xa0>
 8006d0e:	4623      	mov	r3, r4
 8006d10:	6864      	ldr	r4, [r4, #4]
 8006d12:	e7b2      	b.n	8006c7a <_malloc_r+0x32>
 8006d14:	4634      	mov	r4, r6
 8006d16:	6876      	ldr	r6, [r6, #4]
 8006d18:	e7b9      	b.n	8006c8e <_malloc_r+0x46>
 8006d1a:	230c      	movs	r3, #12
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	f000 f84c 	bl	8006dbc <__malloc_unlock>
 8006d24:	e7a1      	b.n	8006c6a <_malloc_r+0x22>
 8006d26:	6025      	str	r5, [r4, #0]
 8006d28:	e7de      	b.n	8006ce8 <_malloc_r+0xa0>
 8006d2a:	bf00      	nop
 8006d2c:	200007a0 	.word	0x200007a0

08006d30 <_realloc_r>:
 8006d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d34:	4680      	mov	r8, r0
 8006d36:	4614      	mov	r4, r2
 8006d38:	460e      	mov	r6, r1
 8006d3a:	b921      	cbnz	r1, 8006d46 <_realloc_r+0x16>
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d42:	f7ff bf81 	b.w	8006c48 <_malloc_r>
 8006d46:	b92a      	cbnz	r2, 8006d54 <_realloc_r+0x24>
 8006d48:	f7ff ff16 	bl	8006b78 <_free_r>
 8006d4c:	4625      	mov	r5, r4
 8006d4e:	4628      	mov	r0, r5
 8006d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d54:	f000 f838 	bl	8006dc8 <_malloc_usable_size_r>
 8006d58:	4284      	cmp	r4, r0
 8006d5a:	4607      	mov	r7, r0
 8006d5c:	d802      	bhi.n	8006d64 <_realloc_r+0x34>
 8006d5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d62:	d812      	bhi.n	8006d8a <_realloc_r+0x5a>
 8006d64:	4621      	mov	r1, r4
 8006d66:	4640      	mov	r0, r8
 8006d68:	f7ff ff6e 	bl	8006c48 <_malloc_r>
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d0ed      	beq.n	8006d4e <_realloc_r+0x1e>
 8006d72:	42bc      	cmp	r4, r7
 8006d74:	4622      	mov	r2, r4
 8006d76:	4631      	mov	r1, r6
 8006d78:	bf28      	it	cs
 8006d7a:	463a      	movcs	r2, r7
 8006d7c:	f7ff fed4 	bl	8006b28 <memcpy>
 8006d80:	4631      	mov	r1, r6
 8006d82:	4640      	mov	r0, r8
 8006d84:	f7ff fef8 	bl	8006b78 <_free_r>
 8006d88:	e7e1      	b.n	8006d4e <_realloc_r+0x1e>
 8006d8a:	4635      	mov	r5, r6
 8006d8c:	e7df      	b.n	8006d4e <_realloc_r+0x1e>
	...

08006d90 <_sbrk_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	2300      	movs	r3, #0
 8006d94:	4d05      	ldr	r5, [pc, #20]	; (8006dac <_sbrk_r+0x1c>)
 8006d96:	4604      	mov	r4, r0
 8006d98:	4608      	mov	r0, r1
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	f7fb f800 	bl	8001da0 <_sbrk>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d102      	bne.n	8006daa <_sbrk_r+0x1a>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	b103      	cbz	r3, 8006daa <_sbrk_r+0x1a>
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	200007a8 	.word	0x200007a8

08006db0 <__malloc_lock>:
 8006db0:	4801      	ldr	r0, [pc, #4]	; (8006db8 <__malloc_lock+0x8>)
 8006db2:	f000 b811 	b.w	8006dd8 <__retarget_lock_acquire_recursive>
 8006db6:	bf00      	nop
 8006db8:	200007ac 	.word	0x200007ac

08006dbc <__malloc_unlock>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	; (8006dc4 <__malloc_unlock+0x8>)
 8006dbe:	f000 b80c 	b.w	8006dda <__retarget_lock_release_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	200007ac 	.word	0x200007ac

08006dc8 <_malloc_usable_size_r>:
 8006dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dcc:	1f18      	subs	r0, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	bfbc      	itt	lt
 8006dd2:	580b      	ldrlt	r3, [r1, r0]
 8006dd4:	18c0      	addlt	r0, r0, r3
 8006dd6:	4770      	bx	lr

08006dd8 <__retarget_lock_acquire_recursive>:
 8006dd8:	4770      	bx	lr

08006dda <__retarget_lock_release_recursive>:
 8006dda:	4770      	bx	lr

08006ddc <_init>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	bf00      	nop
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr

08006de8 <_fini>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	bf00      	nop
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr
